# ********RoostGPT********

# Test generated by RoostGPT for test api-spec using AI Type  and AI Model 
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=3a8d014c99
# 
# 

# ********RoostGPT********
Feature: Laureate Information API

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']

  Scenario Outline: Get information about a specific Nobel Prize Laureate
    Given path '/2.1/laureate/<laureateID>'
    And header Authorization = 'Bearer ' + authToken
    When method GET
    Then status 200
    And match response ==
      """
      {
        laureate: {
          id: '#number',
          laureateIfPerson: {
            knownName: {
              en: '#string',
              se: '#string',
              false: '#string'
            },
            givenName: {
              en: '#string',
              se: '#string',
              false: '#string'
            },
            familyName: {
              en: '#string',
              se: '#string',
              false: '#string'
            },
            fullName: {
              en: '#string',
              se: '#string',
              false: '#string'
            },
            filename: '#string',
            penname: '##string',
            gender: '#? _ == "female" || _ == "male"',
            birth: {
              date: '#? _ == null || _ matches /^\\d{4}-\\d{2}-\\d{2}$/',
              place: '#object'
            },
            death: {
              date: '##? _ == null || _ matches /^\\d{4}-\\d{2}-\\d{2}$/',
              place: '##object'
            }
          },
          laureateIfOrg: '##object',
          wikipedia: {
            slug: '#string',
            english: '#string'
          },
          wikidata: {
            id: '#string',
            url: '#string'
          },
          sameAs: '#array',
          links: '#array',
          nobelPrizes: '#array'
        }
      }
      """
    And match response.laureate.id == <laureateID>
    And match response.laureate.nobelPrizes[*].awardYear == '#? _ >= 1901'
    And match response.laureate.nobelPrizes[*].prizeStatus == '#? _ == "received" || _ == "declined" || _ == "restricted"'

    Examples:
      | read('laureate_laureateID_get.csv') |

  Scenario: Get information about a non-existent Laureate
    Given path '/2.1/laureate/999999'
    And header Authorization = 'Bearer ' + authToken
    When method GET
    Then status 404
    And match response ==
      """
      {
        code: '#string',
        message: '#string'
      }
      """

  Scenario: Invalid Laureate ID format
    Given path '/2.1/laureate/invalid'
    And header Authorization = 'Bearer ' + authToken
    When method GET
    Then status 400
    And match response ==
      """
      {
        code: '#string',
        message: '#string'
      }
      """

  Scenario: Laureate ID out of range
    Given path '/2.1/laureate/0'
    And header Authorization = 'Bearer ' + authToken
    When method GET
    Then status 422
    And match response ==
      """
      {
        code: '#string',
        message: '#string'
      }
      """
