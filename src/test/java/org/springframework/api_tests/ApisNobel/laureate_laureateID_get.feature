# ********RoostGPT********

# Test generated by RoostGPT for test api-spec using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=3a8d014c99
# 
# 

# ********RoostGPT********
Feature: Test Nobel Prize Laureate API

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: '#(karate.properties["AUTH_TOKEN"])' }

  Scenario Outline: Get Laureate Information by ID
    Given path '2.1/laureate', <laureateID>
    When method GET
    Then status <status>
    And match response == <responseSchema>

    Examples:
      | laureateID | status | responseSchema                      |
      |          1 |    200 | { laureate: '#object' }             |
      |       9999 |    404 | { code: '404', message: '#string' } |
      |         -1 |    422 | { code: '404', message: '#string' } |

  Scenario: Invalid HTTP Method for Laureate Endpoint
    Given path '2.1/laureate/1'
    When method POST
    Then status 405

  Scenario: Validate Response Headers
    Given path '2.1/laureate/1'
    When method GET
    Then status 200
    And match responseHeaders['Content-Type'] contains 'application/json'

  Scenario Outline: Validate Laureate Response Schema
    Given path '2.1/laureate', <laureateID>
    When method GET
    Then status 200
    And match response.laureate.id == '#number'
    And match response.laureate.laureateIfPerson.knownName.en == '#string'
    And match response.laureate.laureateIfPerson.gender == '#string'
    And match response.laureate.laureateIfPerson.birth.date == '#string'
    And match response.laureate.laureateIfPerson.birth.place.city.en == '#string'
    And match response.laureate.laureateIfPerson.birth.place.country.en == '#string'

    Examples:
      | read('laureate_laureateID_get.csv') |
