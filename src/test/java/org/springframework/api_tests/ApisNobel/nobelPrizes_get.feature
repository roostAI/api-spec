# ********RoostGPT********

# Test generated by RoostGPT for test Exi-PW-Karate-VertexAi using AI Type Vertex AI and AI Model claude-3-7-sonnet
# 
# Feature file generated for /nobelPrizes_get for http method type GET 
# RoostTestHash=977dd819cb
# 
# 

# ********RoostGPT********
Feature: Nobel Prizes API Tests

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase

  Scenario: Get all Nobel Prizes
    Given path '/2.1/nobelPrizes'
    When method GET
    Then status 200
    And match response == '#object'
    And match response.nobelPrizes == '#array'
    And match response.meta == '#object'
    And match response.links == '#array'

  Scenario Outline: Get Nobel Prizes with query parameters
    Given path '/2.1/nobelPrizes'
    And param offset = <offset>
    And param limit = <limit>
    And param sort = '<sort>'
    And param nobelPrizeYear = <nobelPrizeYear>
    And param yearTo = <yearTo>
    And param nobelPrizeCategory = '<nobelPrizeCategory>'
    And param format = '<format>'
    And param csvLang = '<csvLang>'
    When method GET
    Then status 200
    And match response == '#object'
    And match response.nobelPrizes == '#array'
    And match response.meta == '#object'
    And match response.meta.offset == <offset>
    And match response.meta.limit == <limit>
    And match response.meta.nobelPrizeYear == <nobelPrizeYear>
    And match response.meta.yearTo == <yearTo>
    And match response.meta.nobelPrizeCategory == '<nobelPrizeCategory>'
    And match response.meta.count == '#number'
    And match response.links == '#array'

    Examples:
      | read('nobelPrizes_get.csv') |

  Scenario: Get Nobel Prizes for a specific year
    Given path '/2.1/nobelPrizes'
    And param nobelPrizeYear = 2020
    When method GET
    Then status 200
    And match response == '#object'
    And match response.nobelPrizes == '#array'
    And match each response.nobelPrizes contains { awardYear: 2020 }
    And match response.meta.nobelPrizeYear == 2020

  Scenario: Get Nobel Prizes for a specific category
    Given path '/2.1/nobelPrizes'
    And param nobelPrizeCategory = 'phy'
    When method GET
    Then status 200
    And match response == '#object'
    And match response.nobelPrizes == '#array'
    And match each response.nobelPrizes contains { category: { en: '#string' } }
    And match response.meta.nobelPrizeCategory == 'phy'

  Scenario: Get Nobel Prizes with pagination
    Given path '/2.1/nobelPrizes'
    And param offset = 5
    And param limit = 10
    When method GET
    Then status 200
    And match response == '#object'
    And match response.nobelPrizes == '#array'
    And match response.meta.offset == 5
    And match response.meta.limit == 10

  Scenario: Verify Nobel Prize schema structure
    Given path '/2.1/nobelPrizes'
    And param limit = 1
    When method GET
    Then status 200
    And match response.nobelPrizes[0] contains { awardYear: '#number' }
    And match response.nobelPrizes[0] contains { category: '#object' }
    And match response.nobelPrizes[0].category contains { en: '#string' }
    And match response.nobelPrizes[0] contains { categoryFullName: '#object' }
    And match response.nobelPrizes[0] contains { prizeAmount: '#number' }
    And match response.nobelPrizes[0] contains { prizeAmountAdjusted: '#number' }
    And match response.nobelPrizes[0].laureates == '#array'
    And match each response.nobelPrizes[0].laureates contains { id: '#number' }
    And match each response.nobelPrizes[0].laureates contains { name: '#object' }
    And match each response.nobelPrizes[0].laureates contains { portion: '#string' }
    And match each response.nobelPrizes[0].laureates contains { sortOrder: '#string' }

  Scenario: Test invalid year range
    Given path '/2.1/nobelPrizes'
    And param nobelPrizeYear = 2030
    When method GET
    Then status 400
    And match response contains { code: '#string', message: '#string' }

  Scenario: Test non-existent category
    Given path '/2.1/nobelPrizes'
    And param nobelPrizeCategory = 'nonexistent'
    When method GET
    Then status 404
    And match response contains { code: '#string', message: '#string' }

  Scenario: Test invalid parameters
    Given path '/2.1/nobelPrizes'
    And param offset = -1
    When method GET
    Then status 422
    And match response contains { code: '#string', message: '#string' }
