# ********RoostGPT********

# Test generated by RoostGPT for test api-spec using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /nobelPrizes_get for http method type GET 
# RoostTestHash=4940f5c55b
# 
# 

# ********RoostGPT********
Feature: Test Nobel Prizes API

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: '#(karate.properties["AUTH_TOKEN"])' }

  Scenario Outline: Test GET Nobel Prizes with valid parameters
    Given path '2.1/nobelPrizes'
    And param offset = <offset>
    And param limit = <limit>
    And param sort = <sort>
    And param nobelPrizeYear = <nobelPrizeYear>
    And param yearTo = <yearTo>
    And param nobelPrizeCategory = <nobelPrizeCategory>
    And param format = <format>
    And param csvLang = <csvLang>
    When method GET
    Then status 200
    And match response.nobelPrizes == '#[]'
    And match response.meta.offset == <offset>
    And match response.meta.limit == <limit>
    And match response.meta.nobelPrizeYear == <nobelPrizeYear>
    And match response.meta.yearTo == <yearTo>
    And match response.meta.nobelPrizeCategory == <nobelPrizeCategory>
    And match response.meta.count == '#number'
    And match response.links == '#[]'

    Examples:
      | read('nobelPrizes_get.csv') |

  Scenario: Test GET Nobel Prizes with missing parameters
    Given path '2.1/nobelPrizes'
    When method GET
    Then status 200
    And match response.nobelPrizes == '#[]'
    And match response.meta.offset == 0
    And match response.meta.limit == '#number'
    And match response.meta.count == '#number'
    And match response.links == '#[]'

  Scenario Outline: Test GET Nobel Prizes with invalid parameters
    Given path '2.1/nobelPrizes'
    And param offset = <offset>
    And param limit = <limit>
    And param sort = <sort>
    And param nobelPrizeYear = <nobelPrizeYear>
    And param yearTo = <yearTo>
    And param nobelPrizeCategory = <nobelPrizeCategory>
    And param format = <format>
    And param csvLang = <csvLang>
    When method GET
    Then status 400
    And match response.code == '400'
    And match response.message == '#string'

    Examples:
      | offset | limit | sort | nobelPrizeYear | yearTo | nobelPrizeCategory | format | csvLang |
      |     -1 |    10 | asc  |           2020 |   2021 | phy                | json   | en      |
      |      0 |    -5 | desc |           1899 |   2020 | che                | csv    | se      |

  Scenario: Test GET Nobel Prizes with non-existent resource
    Given path '2.1/nobelPrizes'
    And param nobelPrizeYear = 1800
    When method GET
    Then status 404
    And match response.code == '404'
    And match response.message == '#string'
