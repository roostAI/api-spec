# ********RoostGPT********

# Test generated by RoostGPT for test api-spec using AI Type  and AI Model 
# 
# Feature file generated for /nobelPrizes_get for http method type GET 
# RoostTestHash=4940f5c55b
# 
# 

# ********RoostGPT********
Feature: Nobel Prizes API

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']

  Scenario: Get all Nobel Prizes
    Given path '/2.1/nobelPrizes'
    And header Authorization = 'Bearer ' + authToken
    When method GET
    Then status 200
    And match response ==
      """
      {
        nobelPrizes: '#array',
        meta: '#object',
        links: '#array'
      }
      """
    And match each response.nobelPrizes contains
      """
      {
        awardYear: '#number',
        category: '#object',
        categoryFullName: '#object',
        dateAwarded: '#string',
        prizeAmount: '#number',
        prizeAmountAdjusted: '#number',
        topMotivation: '#object',
        laureates: '#array'
      }
      """

  Scenario Outline: Get Nobel Prizes with query parameters
    Given path '/2.1/nobelPrizes'
    And header Authorization = 'Bearer ' + authToken
    And param offset = <offset>
    And param limit = <limit>
    And param sort = '<sort>'
    And param nobelPrizeYear = <nobelPrizeYear>
    And param yearTo = <yearTo>
    And param nobelPrizeCategory = '<nobelPrizeCategory>'
    And param format = '<format>'
    And param csvLang = '<csvLang>'
    When method GET
    Then status 200
    And match response.meta.offset == <offset>
    And match response.meta.limit == <limit>
    And match response.meta.nobelPrizeYear == <nobelPrizeYear>
    And match response.meta.yearTo == <yearTo>
    And match response.meta.nobelPrizeCategory == '<nobelPrizeCategory>'

    Examples:
      | read('nobelPrizes_get.csv') |

  Scenario: Get Nobel Prizes with invalid offset
    Given path '/2.1/nobelPrizes'
    And header Authorization = 'Bearer ' + authToken
    And param offset = 0
    When method GET
    Then status 400
    And match response == { code: '#string', message: '#string' }

  Scenario: Get Nobel Prizes with invalid limit
    Given path '/2.1/nobelPrizes'
    And header Authorization = 'Bearer ' + authToken
    And param limit = 0
    When method GET
    Then status 400
    And match response == { code: '#string', message: '#string' }

  Scenario: Get Nobel Prizes with invalid nobelPrizeYear
    Given path '/2.1/nobelPrizes'
    And header Authorization = 'Bearer ' + authToken
    And param nobelPrizeYear = 1900
    When method GET
    Then status 400
    And match response == { code: '#string', message: '#string' }

  Scenario: Get Nobel Prizes with invalid nobelPrizeCategory
    Given path '/2.1/nobelPrizes'
    And header Authorization = 'Bearer ' + authToken
    And param nobelPrizeCategory = 'invalid'
    When method GET
    Then status 400
    And match response == { code: '#string', message: '#string' }

  Scenario: Get Nobel Prizes - Not Found
    Given path '/2.1/nobelPrizes'
    And header Authorization = 'Bearer ' + authToken
    And param nobelPrizeYear = 2100
    When method GET
    Then status 404
    And match response == { code: '#string', message: '#string' }

  Scenario: Get Nobel Prizes - Unprocessable Entity
    Given path '/2.1/nobelPrizes'
    And header Authorization = 'Bearer ' + authToken
    And param nobelPrizeYear = 2020
    And param yearTo = 2010
    When method GET
    Then status 422
    And match response == { code: '#string', message: '#string' }
