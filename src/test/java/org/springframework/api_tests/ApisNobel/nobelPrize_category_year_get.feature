# ********RoostGPT********

# Test generated by RoostGPT for test Exi-PW-Karate-VertexAi using AI Type Vertex AI and AI Model claude-3-7-sonnet
# 
# Feature file generated for /nobelPrize/{category}/{year}_get for http method type GET 
# RoostTestHash=9818bf6b39
# 
# 

# ********RoostGPT********
Feature: Nobel Prize API Tests

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase

  Scenario Outline: Get Nobel Prize information for <category> in <year>
    Given path '/2.1/nobelPrize', '<category>', <year>
    When method GET
    Then status 200
    And match response == '#object'
    And match response.nobelPrize == '#object'
    And match response.nobelPrize.awardYear == '#number'
    And match response.nobelPrize.category == '#object'
    And match response.nobelPrize.category.en == '#string'
    And match response.nobelPrize.category.se == '#string'
    And match response.nobelPrize.category.no == '#string'
    And match response.nobelPrize.categoryFullName == '#object'
    And match response.nobelPrize.categoryFullName.en == '#string'
    And match response.nobelPrize.categoryFullName.se == '#string'
    And match response.nobelPrize.categoryFullName.no == '#string'
    And match response.nobelPrize.dateAwarded == '#string'
    And match response.nobelPrize.dateAwarded == '#regex \\d{4}-\\d{2}-\\d{2}'
    And match response.nobelPrize.prizeAmount == '#number'
    And match response.nobelPrize.prizeAmountAdjusted == '#number'
    And match response.nobelPrize.topMotivation == '#object'
    And match response.nobelPrize.topMotivation.en == '#string'
    And match response.nobelPrize.topMotivation.se == '#string'
    And match response.nobelPrize.topMotivation.no == '#string'
    And match response.nobelPrize.laureates == '#array'
    And match each response.nobelPrize.laureates contains { id: '#number', name: '#object', portion: '#string', sortOrder: '#string', motivation: '#object' }
    And match each response.nobelPrize.laureates[*].name contains { en: '#string', se: '#string', no: '#string' }
    And match each response.nobelPrize.laureates[*].motivation contains { en: '#string', se: '#string', no: '#string' }

    Examples:
      | read('nobelPrize_category_year_get.csv') |

  Scenario Outline: Get Nobel Prize information with invalid category
    Given path '/2.1/nobelPrize', '<category>', <year>
    When method GET
    Then status 404
    And match response == '#object'
    And match response.code == '#string'
    And match response.message == '#string'

    Examples:
      | category        | year |
      | invalidCategory | 2000 |

  Scenario Outline: Get Nobel Prize information with invalid year
    Given path '/2.1/nobelPrize', '<category>', <year>
    When method GET
    Then status 400
    And match response == '#object'
    And match response.code == '#string'
    And match response.message == '#string'

    Examples:
      | category | year |
      | physics  | 1800 |
      | peace    | 3000 |

  Scenario Outline: Get Nobel Prize information with unprocessable entity
    Given path '/2.1/nobelPrize', '<category>', <year>
    When method GET
    Then status 422
    And match response == '#object'
    And match response.code == '#string'
    And match response.message == '#string'

    Examples:
      | category | year |
      | physics  | 1901 |
