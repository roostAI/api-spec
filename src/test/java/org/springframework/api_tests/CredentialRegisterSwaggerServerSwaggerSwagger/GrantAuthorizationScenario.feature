# ********RoostGPT********

# Test generated by RoostGPT for test karate-integration-credential using AI Type  and AI Model 
# 
# ROOST_METHOD_HASH=25259bbe63
# ROOST_METHOD_SIG_HASH=536a03cafe
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Credential Wallet API\r\n' +
#     '  As a user of the Credential Wallet API\r\n' +
#     '  I want to be able to perform CRUD operations on accounts\r\n' +
#     '  So that I can manage my account effectively',
#   background: 'Background:\r\n    Given the base URL is "http://localhost:8080"',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Grant authorization',
#     steps: 'Given an existing account, create another account\r\n' +
#       'When the client sends a POST request to "/authorizations"\r\n' +
#       'Then grant access to your account and confirm access via GET request to "/authorizations"',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Credential Wallet API
  As a user of the Credential Wallet API
  I want to be able to perform CRUD operations on accounts
  So that I can manage my account effectively

  Background:
    * url 'http://localhost:8080'

  Scenario: Grant authorization
    Given path '/accounts'
    And request
      """
      {
        "name": "testAccount",
        "email": "test@example.com"
      }
      """
    When method post
    Then status 201
    * def accountId = response.id
    And match accountId == '#string'
    Given path '/authorizations'
    And request
      """
      {
        "accountId": accountId,
        "permissions": ["read", "write"]
      }
      """
    When method post
    Then status 201
    And match response == { authorized: true, accountId: '#string' }
    Given path '/authorizations/' + accountId
    When method get
    Then status 200
    And match response.permissions CONTAINS ["read", "write"]
    And match response.accountId == accountId
    And match response.authorized == true
