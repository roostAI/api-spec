# ********RoostGPT********

# Test generated by RoostGPT for test pw-it-Karate-1761119423725 using AI Type AWS Bedrock Runtime AI and AI Model us.anthropic.claude-3-7-sonnet-20250219-v1:0
# 
# ROOST_METHOD_HASH=411b891724
# ROOST_METHOD_SIG_HASH=536a03cafe
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Credential Wallet API\r\n' +
#     '  As a user of the Credential Wallet API\r\n' +
#     '  I want to be able to perform CRUD operations on accounts\r\n' +
#     '  So that I can manage my account effectively',
#   background: 'Background:\r\n    Given the base URL is "http://localhost:8080"',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Grant authorization',
#     steps: 'Given an existing account, create another account\r\n' +
#       'When the client sends a POST request to "/authorizations"\r\n' +
#       'Then grant access to your account and confirm access via GET request to "/authorizations"',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Credential Wallet API
  As a user of the Credential Wallet API
  I want to be able to perform CRUD operations on accounts
  So that I can manage my account effectively

  Background:
    * def API_HOST_URL = 'http://localhost:8080'

  Scenario: Grant authorization
    * url API_HOST_URL
    And def firstAccountPayload =
      """
      {
        'username': 'testuser1',
        'email': 'testuser1@example.com',
        'password': 'Password123!'
      }
      """
    When path '/accounts'
    And request firstAccountPayload
    And method POST
    Then status 201
    And def firstAccountId = response.id
    Given def secondAccountPayload =
      """
      {
        'username': 'testuser2',
        'email': 'testuser2@example.com',
        'password': 'Password123!'
      }
      """
    When path '/accounts'
    And request secondAccountPayload
    And method POST
    Then status 201
    And def secondAccountId = response.id
    Given path '/authorizations'
    And def authorizationPayload =
      """
      {
        'grantorId': firstAccountId,
        'granteeId': secondAccountId,
        'permissions': ['READ', 'WRITE']
      }
      """
    And request authorizationPayload
    When method POST
    Then status 201
    And def authorizationId = response.id
    Given path '/authorizations'
    When method GET
    Then status 200
    And match response == '#array'
    And match response contains
      """
      {
        'id': '#(authorizationId)',
        'grantorId': '#(firstAccountId)',
        'granteeId': '#(secondAccountId)',
        'permissions': '#array'
      }
      """
