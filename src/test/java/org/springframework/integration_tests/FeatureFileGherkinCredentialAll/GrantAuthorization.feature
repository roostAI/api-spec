# ********RoostGPT********

# Test generated by RoostGPT for test pw-it-Karate-1760081855381 using AI Type AWS Bedrock Runtime AI and AI Model us.anthropic.claude-3-7-sonnet-20250219-v1:0
# 
# ROOST_METHOD_HASH=411b891724
# ROOST_METHOD_SIG_HASH=536a03cafe
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Credential Wallet API\r\n' +
#     '  As a user of the Credential Wallet API\r\n' +
#     '  I want to be able to perform CRUD operations on accounts\r\n' +
#     '  So that I can manage my account effectively',
#   background: 'Background:\r\n    Given the base URL is "http://localhost:8080"',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Grant authorization',
#     steps: 'Given an existing account, create another account\r\n' +
#       'When the client sends a POST request to "/authorizations"\r\n' +
#       'Then grant access to your account and confirm access via GET request to "/authorizations"',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Credential Wallet API
  As a user of the Credential Wallet API
  I want to be able to perform CRUD operations on accounts
  So that I can manage my account effectively

  Background:
    * def API_HOST_URL = 'http://localhost:8080'

  Scenario: Grant authorization
    * url API_HOST_URL
    And path '/accounts'
    And request { username: 'firstUser', password: 'Password123!' }
    When method post
    Then status 201
    And def firstAccountId = response.id
    * url API_HOST_URL
    And path '/accounts'
    And request { username: 'secondUser', password: 'Password123!' }
    When method post
    Then status 201
    And def secondAccountId = response.id
    * url API_HOST_URL
    And path '/authorizations'
    And request
      """
      {
        "grantorId": "#(firstAccountId)",
        "granteeId": "#(secondAccountId)",
        "permissions": ["read", "write"]
      }
      """
    When method post
    Then status 201
    And def authorizationId = response.id
    * url API_HOST_URL
    And path '/authorizations'
    When method get
    Then status 200
    And match response == '#array'
    And match response contains deep { id: '#(authorizationId)', grantorId: '#(firstAccountId)', granteeId: '#(secondAccountId)', permissions: '#array' }
