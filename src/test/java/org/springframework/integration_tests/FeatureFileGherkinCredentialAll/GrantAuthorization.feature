# ********RoostGPT********

# Test generated by RoostGPT for test pw-it-Karate-1755506330139 using AI Type AWS Bedrock Runtime AI and AI Model anthropic.claude-3-sonnet-20240229-v1:0
# 
# ROOST_METHOD_HASH=411b891724
# ROOST_METHOD_SIG_HASH=536a03cafe
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Credential Wallet API\r\n' +
#     '  As a user of the Credential Wallet API\r\n' +
#     '  I want to be able to perform CRUD operations on accounts\r\n' +
#     '  So that I can manage my account effectively',
#   background: 'Background:\r\n    Given the base URL is "http://localhost:8080"',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Grant authorization',
#     steps: 'Given an existing account, create another account\r\n' +
#       'When the client sends a POST request to "/authorizations"\r\n' +
#       'Then grant access to your account and confirm access via GET request to "/authorizations"',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature:

  Scenario Outline: Grant authorization
    * url BASE_URL + '/accounts'
    And request
      """
      {
        "name": "John Doe",
        "email": "john@example.com",
        "password": "myPassword123"
      }
      """
    When method post
    Then status 201
    And def accountId = response.id
    * url BASE_URL + '/authorizations'
    And request
      """
      {
        "accountId": "#(accountId)",
        "grantedToUser": "#(AUTH_USER)"
      }
      """
    And headers { Authorization: '#(AUTH_TOKEN)' }
    When method post
    Then status 201
    * url BASE_URL + '/authorizations'
    And param accountId = accountId
    And headers { Authorization: '#(AUTH_TOKEN)' }
    When method get
    Then status 200
    And match response.accountId == accountId
    And match response.grantedToUser == AUTH_USER
