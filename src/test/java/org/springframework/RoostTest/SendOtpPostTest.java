// ********RoostGPT********
/*
Test generated by RoostGPT for test pw-test-1751523219678 using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /sendOTP_post for http method type POST in rest-assured framework

RoostTestHash=42f4c4f405

[
  {
    "ScenarioID": "1",
    "TestName": "testValidRequestReturns200",
    "Description": "Test sending OTP with valid request and expect a success response",
    "Execution": {
      "Arrange": "No parameters needed for this endpoint",
      "Act": "Send POST request to /sendOTP",
      "Assert": "Check for 200 status code and verify the success message is returned in the response"
    },
    "Validation": "Ensures OTP is successfully sent with a valid request"
  },
  {
    "ScenarioID": "2",
    "TestName": "testUnauthenticatedRequestReturns401",
    "Description": "Test request when authorization is required and token is missing",
    "Execution": {
      "Arrange": "No parameters needed, simulate request without authentication",
      "Act": "Send POST request to /sendOTP without authentication headers",
      "Assert": "Check for 401 status code and 'Authorisation failed' error message in the response"
    },
    "Validation": "Ensures endpoint requires proper authentication to access"
  },
  {
    "ScenarioID": "3",
    "TestName": "testInvalidTokenReturns401",
    "Description": "Test request with an invalid authentication token",
    "Execution": {
      "Arrange": "Add header with an invalid authentication token",
      "Act": "Send POST request to /sendOTP with invalid token in headers",
      "Assert": "Check for 401 status code and 'Authorisation failed' error message in the response"
    },
    "Validation": "Ensures endpoint validates authentication tokens correctly"
  },
  {
    "ScenarioID": "4",
    "TestName": "testEndpointNotFoundReturns404",
    "Description": "Test sending request to an invalid endpoint path and expect a 'Not Found' response",
    "Execution": {
      "Arrange": "No parameters needed, simulate request to endpoint /sendOTPInvalid",
      "Act": "Send POST request to /sendOTPInvalid",
      "Assert": "Check for 404 status code and 'Not Found' error message in the response"
    },
    "Validation": "Ensures the API correctly handles non-existent endpoints"
  },
  {
    "ScenarioID": "5",
    "TestName": "testUnsupportedHttpMethodReturns405",
    "Description": "Test sending request with an unsupported HTTP method and expect a method not allowed response",
    "Execution": {
      "Arrange": "No parameters needed, simulate request with method GET",
      "Act": "Send GET request to /sendOTP",
      "Assert": "Check for 405 status code and verify response indicates unsupported method"
    },
    "Validation": "Ensures the endpoint rejects unsupported HTTP methods"
  },
  {
    "ScenarioID": "6",
    "TestName": "testMalformedRequestBodyReturns400",
    "Description": "Test sending malformed request body and expect an error response",
    "Execution": {
      "Arrange": "Prepare a malformed JSON body",
      "Act": "Send POST request to /sendOTP with invalid JSON in body",
      "Assert": "Check for 400 status code and the error message in response"
    },
    "Validation": "Ensures API handles malformed request bodies gracefully"
  },
  {
    "ScenarioID": "7",
    "TestName": "testValidRequestMultipleTimes",
    "Description": "Test sending multiple valid requests in quick succession",
    "Execution": {
      "Arrange": "No parameters needed",
      "Act": "Send multiple consecutive POST requests to /sendOTP",
      "Assert": "Verify all responses return 200 status code"
    },
    "Validation": "Ensures API handles high traffic with valid requests without issues"
  },
  {
    "ScenarioID": "8",
    "TestName": "testInvalidContentTypeReturns415",
    "Description": "Test sending request with unsupported Content-Type header",
    "Execution": {
      "Arrange": "Prepare request with Content-Type header as text/plain",
      "Act": "Send POST request to /sendOTP with unsupported Content-Type",
      "Assert": "Check for 415 status code and verify response indicates unsupported media type"
    },
    "Validation": "Ensures API only accepts supported content types"
  },
  {
    "ScenarioID": "9",
    "TestName": "testNoHeadersProvidedReturns400",
    "Description": "Test sending request without any headers and verify server response",
    "Execution": {
      "Arrange": "Do not provide headers",
      "Act": "Send POST request to /sendOTP",
      "Assert": "Check if server handles header-less request gracefully by returning a valid error response"
    },
    "Validation": "Ensures API validates header information properly"
  },
  {
    "ScenarioID": "10",
    "TestName": "testEmptyResponseBodyFor200",
    "Description": "Verify if successful response for 200 contains the expected structure",
    "Execution": {
      "Arrange": "No parameters needed for request",
      "Act": "Send POST request to /sendOTP",
      "Assert": "Check if response body for 200 is correctly structured as per API metadata"
    },
    "Validation": "Ensures response for successful requests conforms to expected structure"
  }
]

*/

// ********RoostGPT********
package org.springframework.RoostTest;

import org.json.JSONObject;
import org.json.JSONArray;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;

public class SendOtpPostTest {

    List<JSONObject> testCases = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        testCases = dataloader.loadJson("src/test/java/org/springframework/RoostTest/sendOTPPostTest.JSON");
    }


    @Test
    public void SendOtpPost_Test() {
        this.setUp();
        Integer testNumber = 1;
        for (JSONObject testData : testCases) {
            RestAssured.baseURI = "https://localhost:8080/smt";

            JSONObject requestHeader = testData.optJSONObject("request_header");
            JSONObject requestBody = testData.optJSONObject("request_body");
            JSONObject queryParams = testData.optJSONObject("query_params");
            JSONObject pathParams = testData.optJSONObject("path_params");
            String requestPath = "/sendOTP";

            if (pathParams != null) {
                for (String key : pathParams.keySet()) {
                    requestPath = requestPath.replace("{" + key + "}", pathParams.getString(key));
                }
            }

            io.restassured.specification.RequestSpecification req = given();

            // Resolve Authorization token priority: ENV > Param(RoostENV) > JSON
            String userEnvAuthToken = System.getenv("AUTH_TOKEN");
            String resolvedAuthToken = (userEnvAuthToken != null && !userEnvAuthToken.isEmpty()) ? userEnvAuthToken : "credential-register/swagger_server/swagger/swagger.yaml";

            boolean authSet = false;
            if (requestHeader != null) {
                Iterator<String> keys = requestHeader.keys();
                while (keys.hasNext()) {
                    String key = keys.next();
                    String value = requestHeader.getString(key);

                    if (key.equalsIgnoreCase("Authorization")) {
                        if (value.equalsIgnoreCase("${AUTH_TOKEN}") && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                            req.header("Authorization", "Bearer " + resolvedAuthToken);
                            authSet = true;
                        } else {
                            req.header(key, value);
                            authSet = true;
                        }
                    } else {
                        req.header(key, value);
                    }
                }
            }

            if (!authSet && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                req.header("Authorization", "Bearer " + resolvedAuthToken);
            }

            if (queryParams != null) {
                for (String key : queryParams.keySet()) {
                    req.queryParam(key, queryParams.get(key));
                }
            }

            if (requestBody != null && requestBody.length() > 0) {
                req.body(requestBody.toString());
            }

            Response responseObj;
            switch ("post".toLowerCase()) {
              case "post":
                responseObj = req.when().post(requestPath);
                break;
              case "get":
                responseObj = req.when().get(requestPath);
                break;
              case "put":
                responseObj = req.when().put(requestPath);
                break;
              case "delete":
                responseObj = req.when().delete(requestPath);
                break;
              default:
                throw new RuntimeException("Unsupported HTTP method: " + "post");
            }

            responseObj = responseObj.then().extract().response();

            System.out.printf("Test Case %d: SendOtpPost_Test\n", testNumber++);
            System.out.println("Request: POST " + requestPath);
            System.out.println("Status Code: " + responseObj.statusCode());

            if (testData.has("expected_status_code")) {
                int expectedCode = testData.getInt("expected_status_code");
                MatcherAssert.assertThat(
                    "Expected status code " + expectedCode + " but got " + responseObj.statusCode(),
                    responseObj.statusCode(),
                    equalTo(expectedCode)
                );
            }
        }
    }
}
