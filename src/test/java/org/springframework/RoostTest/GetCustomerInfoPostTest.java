// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredJsonTest using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /GetCustomerInfo_post for http method type POST in rest-assured framework

RoostTestHash=40816839ba

[
  {
    "ScenarioID": "1",
    "TestName": "testValidRequestReturns200",
    "Description": "Verify successful operation when all required headers and valid values are provided.",
    "Execution": {
      "Arrange": "Set headers: Authorization with valid token, botId and accountId with non-empty strings.",
      "Act": "Send POST request to /GetCustomerInfo with correct headers.",
      "Assert": "Verify 200 status code and response body contains all expected fields with proper data types."
    },
    "Validation": "Ensures API successfully processes valid request and returns the expected response."
  },
  {
    "ScenarioID": "2",
    "TestName": "testMissingBotIdHeaderFailsWith401",
    "Description": "Test the behavior when botId required header is missing.",
    "Execution": {
      "Arrange": "Set headers: Authorization with valid token, accountId with non-empty string. Do NOT include botId.",
      "Act": "Send POST request to /GetCustomerInfo with missing botId header.",
      "Assert": "Verify 401 status code and error message indicating authorisation failed."
    },
    "Validation": "Ensures required botId header is validated by the API."
  },
  {
    "ScenarioID": "3",
    "TestName": "testMissingAccountIdHeaderFailsWith401",
    "Description": "Test the behavior when accountId required header is missing.",
    "Execution": {
      "Arrange": "Set headers: Authorization with valid token, botId with non-empty string. Do NOT include accountId.",
      "Act": "Send POST request to /GetCustomerInfo with missing accountId header.",
      "Assert": "Verify 401 status code and error message indicating authorisation failed."
    },
    "Validation": "Ensures required accountId header is validated by the API."
  },
  {
    "ScenarioID": "4",
    "TestName": "testInvalidAuthorizationTokenFailsWith401",
    "Description": "Test the behavior when Authorization token is invalid.",
    "Execution": {
      "Arrange": "Set headers: Authorization with invalid token, botId and accountId with non-empty strings.",
      "Act": "Send POST request to /GetCustomerInfo with invalid Authorization token.",
      "Assert": "Verify 401 status code and error message indicating authorisation failed."
    },
    "Validation": "Ensures Authorization token is validated by the API."
  },
  {
    "ScenarioID": "5",
    "TestName": "testSuccessfulRequestWithOptionalHeaders",
    "Description": "Verify operation succeeds when optional headers are provided alongside required headers.",
    "Execution": {
      "Arrange": "Set headers: Authorization with valid token, botId and accountId with non-empty strings, X_Auth_token as a non-empty string, and X_CORRELATION_ID as a number.",
      "Act": "Send POST request to /GetCustomerInfo with all headers.",
      "Assert": "Verify 200 status code and response body contains all expected fields with proper data types."
    },
    "Validation": "Ensures optional headers don't interfere with a valid request."
  },
  {
    "ScenarioID": "6",
    "TestName": "testRequestWithEmptyAuthorizationHeaderFailsWith401",
    "Description": "Test the behavior when Authorization header is empty.",
    "Execution": {
      "Arrange": "Set headers: Authorization as an empty string, botId and accountId with non-empty strings.",
      "Act": "Send POST request to /GetCustomerInfo with empty Authorization header.",
      "Assert": "Verify 401 status code and error message indicating authorisation failed."
    },
    "Validation": "Ensures empty Authorization header is correctly rejected."
  },
  {
    "ScenarioID": "7",
    "TestName": "testRequestWithMissingAuthorizationHeaderFailsWith401",
    "Description": "Test the behavior when Authorization header is missing entirely.",
    "Execution": {
      "Arrange": "Set headers: botId and accountId with non-empty strings. Do NOT include Authorization.",
      "Act": "Send POST request to /GetCustomerInfo without Authorization header.",
      "Assert": "Verify 401 status code and error message indicating authorisation failed."
    },
    "Validation": "Ensures required Authorization header is validated by the API."
  },
  {
    "ScenarioID": "8",
    "TestName": "testRequestWithWrongTypeX_CORRELATION_ID",
    "Description": "Test the behavior when X_CORRELATION_ID header is provided with invalid type.",
    "Execution": {
      "Arrange": "Set headers: Authorization with valid token, botId and accountId with non-empty strings, X_CORRELATION_ID as a string instead of number.",
      "Act": "Send POST request to /GetCustomerInfo with incorrect type for X_CORRELATION_ID header.",
      "Assert": "Verify appropriate error response, expected validation error or 400 bad request."
    },
    "Validation": "Ensures API handles invalid data types for optional headers."
  },
  {
    "ScenarioID": "9",
    "TestName": "testEmptyResponseForValidRequest",
    "Description": "Verify graceful response handling when no customer info exists for provided headers.",
    "Execution": {
      "Arrange": "Set headers: Authorization with valid token, botId and accountId with non-empty strings, referring to a non-existent customer.",
      "Act": "Send POST request to /GetCustomerInfo with valid headers.",
      "Assert": "Verify 200 status code and response body is empty or indicates no customer data found."
    },
    "Validation": "Ensures API correctly handles requests for non-existent customer info."
  },
  {
    "ScenarioID": "10",
    "TestName": "testRequestWithoutOptionalHeadersSucceeds",
    "Description": "Verify operation succeeds when optional headers are not provided.",
    "Execution": {
      "Arrange": "Set headers: Authorization with valid token, botId and accountId with non-empty strings.",
      "Act": "Send POST request to /GetCustomerInfo without optional headers.",
      "Assert": "Verify 200 status code and response body contains all expected fields with proper data types."
    },
    "Validation": "Ensures optional headers are not required for a successful request."
  }
]

*/

// ********RoostGPT********
package org.springframework.RoostTest;

import org.json.JSONObject;
import org.json.JSONArray;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;

public class GetCustomerInfoPostTest {

    List<JSONObject> testCases = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        testCases = dataloader.loadJson("src/test/java/org/springframework/RoostTest/GetCustomerInfoPostTest.JSON");
    }


    @Test
    public void GetCustomerInfoPost_Test() {
        this.setUp();
        Integer testNumber = 1;
        for (JSONObject testData : testCases) {
            RestAssured.baseURI = "https://localhost:8080/smt";

            JSONObject requestHeader = testData.optJSONObject("request_header");
            JSONObject requestBody = testData.optJSONObject("request_body");
            JSONObject queryParams = testData.optJSONObject("query_params");
            JSONObject pathParams = testData.optJSONObject("path_params");
            String requestPath = "/GetCustomerInfo";

            if (pathParams != null) {
                for (String key : pathParams.keySet()) {
                    requestPath = requestPath.replace("{" + key + "}", pathParams.getString(key));
                }
            }

            io.restassured.specification.RequestSpecification req = given();

            // Resolve Authorization token priority: ENV > Param(RoostENV) > JSON
            String userEnvAuthToken = System.getenv("AUTH_TOKEN");
            String resolvedAuthToken = (userEnvAuthToken != null && !userEnvAuthToken.isEmpty()) ? userEnvAuthToken : "credential-register/swagger_server/swagger/swagger.yaml";

            boolean authSet = false;
            if (requestHeader != null) {
                Iterator<String> keys = requestHeader.keys();
                while (keys.hasNext()) {
                    String key = keys.next();
                    String value = requestHeader.getString(key);

                    if (key.equalsIgnoreCase("Authorization")) {
                        if (value.equalsIgnoreCase("${AUTH_TOKEN}") && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                            req.header("Authorization", "Bearer " + resolvedAuthToken);
                            authSet = true;
                        } else {
                            req.header(key, value);
                            authSet = true;
                        }
                    } else {
                        req.header(key, value);
                    }
                }
            }

            if (!authSet && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                req.header("Authorization", "Bearer " + resolvedAuthToken);
            }

            if (queryParams != null) {
                for (String key : queryParams.keySet()) {
                    req.queryParam(key, queryParams.get(key));
                }
            }

            if (requestBody != null && requestBody.length() > 0) {
                req.body(requestBody.toString());
            }

            Response responseObj;
            switch ("post".toLowerCase()) {
              case "post":
                responseObj = req.when().post(requestPath);
                break;
              case "get":
                responseObj = req.when().get(requestPath);
                break;
              case "put":
                responseObj = req.when().put(requestPath);
                break;
              case "delete":
                responseObj = req.when().delete(requestPath);
                break;
              default:
                throw new RuntimeException("Unsupported HTTP method: " + "post");
            }

            responseObj = responseObj.then().extract().response();

            System.out.printf("Test Case %d: GetCustomerInfoPost_Test\n", testNumber++);
            System.out.println("Request: POST " + requestPath);
            System.out.println("Status Code: " + responseObj.statusCode());

            if (testData.has("expected_status_code")) {
                int expectedCode = testData.getInt("expected_status_code");
                MatcherAssert.assertThat(
                    "Expected status code " + expectedCode + " but got " + responseObj.statusCode(),
                    responseObj.statusCode(),
                    equalTo(expectedCode)
                );
            }
        }
    }
}
