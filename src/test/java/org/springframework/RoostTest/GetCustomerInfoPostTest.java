// ********RoostGPT********
/*
Test generated by RoostGPT for test pw-test-1751523219678 using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /GetCustomerInfo_post for http method type POST in rest-assured framework

RoostTestHash=40816839ba

[
  {
    "ScenarioID": "1",
    "TestName": "testValidHeadersAndAuthorizationReturns200",
    "Description": "Test the endpoint with all required headers and valid authorization token",
    "Execution": {
      "Arrange": "Prepare valid botId, accountId, Authorization, and optional headers koreUserId",
      "Act": "Send POST request to /GetCustomerInfo with correctly formatted headers",
      "Assert": "Check response status is 200 and verify the response body contains expected customer information"
    },
    "Validation": "Ensures API successfully processes valid headers and authorization token"
  },
  {
    "ScenarioID": "2",
    "TestName": "testMissingBotIdHeaderReturns400",
    "Description": "Test the endpoint with missing botId header, which is required",
    "Execution": {
      "Arrange": "Prepare headers without the required botId header",
      "Act": "Send POST request to /GetCustomerInfo missing botId",
      "Assert": "Check response status is 400 and error message indicates botId is required"
    },
    "Validation": "Ensures valid error response is returned when required botId header is missing"
  },
  {
    "ScenarioID": "3",
    "TestName": "testInvalidAuthorizationTokenReturns401",
    "Description": "Test the endpoint with invalid Authorization token in header",
    "Execution": {
      "Arrange": "Prepare headers with valid botId, accountId, and invalid Authorization token",
      "Act": "Send POST request to /GetCustomerInfo with invalid Authorization token",
      "Assert": "Check response status is 401 and error message indicates authorization failure"
    },
    "Validation": "Ensures API correctly denies access with invalid authorization token"
  },
  {
    "ScenarioID": "4",
    "TestName": "testMissingAuthorizationTokenReturns401",
    "Description": "Test the endpoint with missing Authorization token in header",
    "Execution": {
      "Arrange": "Prepare headers with valid botId and accountId but no Authorization token",
      "Act": "Send POST request to /GetCustomerInfo without Authorization token",
      "Assert": "Check response status is 401 and error message indicates authorization failure"
    },
    "Validation": "Ensures API correctly denies access when Authorization token is missing"
  },
  {
    "ScenarioID": "5",
    "TestName": "testOptionalHeadersHandling",
    "Description": "Test the endpoint with optional headers koreUserId, X_Auth_token, and X_CORRELATION_ID provided",
    "Execution": {
      "Arrange": "Prepare botId, accountId, Authorization along with optional headers",
      "Act": "Send POST request to /GetCustomerInfo including all optional headers",
      "Assert": "Check response status is 200 and API correctly processes optional headers"
    },
    "Validation": "Ensures optional headers are handled without error"
  },
  {
    "ScenarioID": "6",
    "TestName": "testInvalidHeaderTypeX_CORRELATION_IDReturns400",
    "Description": "Test the endpoint with invalid type for X_CORRELATION_ID header (should be number)",
    "Execution": {
      "Arrange": "Prepare headers with valid botId, accountId, Authorization, and invalid (non-numeric) X_CORRELATION_ID",
      "Act": "Send POST request to /GetCustomerInfo with invalid X_CORRELATION_ID",
      "Assert": "Check response status is 400 and error message indicates incorrect header type"
    },
    "Validation": "Ensures API returns error for invalid header type"
  },
  {
    "ScenarioID": "7",
    "TestName": "testEmptyHeadersReturns400",
    "Description": "Test the endpoint with all required headers missing",
    "Execution": {
      "Arrange": "Prepare an empty header set",
      "Act": "Send POST request to /GetCustomerInfo with no headers",
      "Assert": "Check response status is 400 and error message indicates missing required headers"
    },
    "Validation": "Ensures API correctly handles empty/missing headers"
  },
  {
    "ScenarioID": "8",
    "TestName": "testMalformedAuthorizationHeaderReturns400",
    "Description": "Test the endpoint with malformed Authorization header",
    "Execution": {
      "Arrange": "Prepare headers with malformed Authorization header structure",
      "Act": "Send POST request to /GetCustomerInfo with malformed Authorization",
      "Assert": "Check response status is 400 and error message indicates malformed Authorization header"
    },
    "Validation": "Ensures API detects and rejects malformed Authorization header"
  },
  {
    "ScenarioID": "9",
    "TestName": "testEmptyResponseArrayForValidHeaders",
    "Description": "Test the endpoint with valid headers but ensure response supports edge cases like empty data",
    "Execution": {
      "Arrange": "Prepare headers with valid botId, accountId, and Authorization",
      "Act": "Send POST request to /GetCustomerInfo expecting empty arrays in response properties",
      "Assert": "Verify response contains empty arrays in securityQuestions if no data is available"
    },
    "Validation": "Ensures API handles and returns scenarios with empty arrays gracefully"
  },
  {
    "ScenarioID": "10",
    "TestName": "testEnumMismatchIdentificationTypeReturns400",
    "Description": "Test the endpoint with invalid value in response expected enum (identificationType)",
    "Execution": {
      "Arrange": "Prepare valid headers expecting invalid enum value in identificationType",
      "Act": "Send POST request to /GetCustomerInfo with no preconditions on identificationType, mock behavior",
      "Assert": "If identificationType is invalid, check response status is 400 or response correctly maps invalid enums"
    },
    "Validation": "Ensures API handles invalid enum values gracefully"
  }
]

*/

// ********RoostGPT********
package org.springframework.RoostTest;

import org.json.JSONObject;
import org.json.JSONArray;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;

public class GetCustomerInfoPostTest {

    List<JSONObject> testCases = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        testCases = dataloader.loadJson("src/test/java/org/springframework/RoostTest/GetCustomerInfoPostTest.JSON");
    }


    @Test
    public void GetCustomerInfoPost_Test() {
        this.setUp();
        Integer testNumber = 1;
        for (JSONObject testData : testCases) {
            RestAssured.baseURI = "https://localhost:8080/smt";

            JSONObject requestHeader = testData.optJSONObject("request_header");
            JSONObject requestBody = testData.optJSONObject("request_body");
            JSONObject queryParams = testData.optJSONObject("query_params");
            JSONObject pathParams = testData.optJSONObject("path_params");
            String requestPath = "/GetCustomerInfo";

            if (pathParams != null) {
                for (String key : pathParams.keySet()) {
                    requestPath = requestPath.replace("{" + key + "}", pathParams.getString(key));
                }
            }

            io.restassured.specification.RequestSpecification req = given();

            // Resolve Authorization token priority: ENV > Param(RoostENV) > JSON
            String userEnvAuthToken = System.getenv("AUTH_TOKEN");
            String resolvedAuthToken = (userEnvAuthToken != null && !userEnvAuthToken.isEmpty()) ? userEnvAuthToken : "credential-register/swagger_server/swagger/swagger.yaml";

            boolean authSet = false;
            if (requestHeader != null) {
                Iterator<String> keys = requestHeader.keys();
                while (keys.hasNext()) {
                    String key = keys.next();
                    String value = requestHeader.getString(key);

                    if (key.equalsIgnoreCase("Authorization")) {
                        if (value.equalsIgnoreCase("${AUTH_TOKEN}") && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                            req.header("Authorization", "Bearer " + resolvedAuthToken);
                            authSet = true;
                        } else {
                            req.header(key, value);
                            authSet = true;
                        }
                    } else {
                        req.header(key, value);
                    }
                }
            }

            if (!authSet && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                req.header("Authorization", "Bearer " + resolvedAuthToken);
            }

            if (queryParams != null) {
                for (String key : queryParams.keySet()) {
                    req.queryParam(key, queryParams.get(key));
                }
            }

            if (requestBody != null && requestBody.length() > 0) {
                req.body(requestBody.toString());
            }

            Response responseObj;
            switch ("post".toLowerCase()) {
              case "post":
                responseObj = req.when().post(requestPath);
                break;
              case "get":
                responseObj = req.when().get(requestPath);
                break;
              case "put":
                responseObj = req.when().put(requestPath);
                break;
              case "delete":
                responseObj = req.when().delete(requestPath);
                break;
              default:
                throw new RuntimeException("Unsupported HTTP method: " + "post");
            }

            responseObj = responseObj.then().extract().response();

            System.out.printf("Test Case %d: GetCustomerInfoPost_Test\n", testNumber++);
            System.out.println("Request: POST " + requestPath);
            System.out.println("Status Code: " + responseObj.statusCode());

            if (testData.has("expected_status_code")) {
                int expectedCode = testData.getInt("expected_status_code");
                MatcherAssert.assertThat(
                    "Expected status code " + expectedCode + " but got " + responseObj.statusCode(),
                    responseObj.statusCode(),
                    equalTo(expectedCode)
                );
            }
        }
    }
}
