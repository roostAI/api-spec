// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssuredJsonTest using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /GetAccountInfo_post for http method type POST in rest-assured framework

RoostTestHash=50db5da8c5

[
  {
    "ScenarioID": "1",
    "TestName": "testValidRequestWithAllRequiredHeaders",
    "Description": "Test when all required headers are valid and present",
    "Execution": {
      "Arrange": "Prepare headers: Authorization, botId, accountId with valid values",
      "Act": "Send POST request to /GetAccountInfo with correct headers",
      "Assert": "Check if the response returns status code 200 and contains valid account information in the response body"
    },
    "Validation": "Ensures API returns the correct customer account details with valid input"
  },
  {
    "ScenarioID": "2",
    "TestName": "testMissingAuthorizationHeaderFails",
    "Description": "Test when Authorization header is missing from the request",
    "Execution": {
      "Arrange": "Prepare headers: botId, accountId without Authorization",
      "Act": "Send POST request to /GetAccountInfo without Authorization header",
      "Assert": "Check if the response returns status code 401 with error message: 'Authorization failed.'"
    },
    "Validation": "Ensures API enforces Authorization header requirement"
  },
  {
    "ScenarioID": "3",
    "TestName": "testInvalidAuthorizationTokenFails",
    "Description": "Test when Authorization token is invalid",
    "Execution": {
      "Arrange": "Prepare headers: Authorization='invalid_token', botId, accountId",
      "Act": "Send POST request to /GetAccountInfo with invalid Authorization token",
      "Assert": "Check if the response returns status code 401 with error message: 'Authorization failed.'"
    },
    "Validation": "Ensures API rejects requests with invalid Authorization tokens"
  },
  {
    "ScenarioID": "4",
    "TestName": "testMissingBotIdHeaderFails",
    "Description": "Test when botId is missing from the request",
    "Execution": {
      "Arrange": "Prepare headers: Authorization, accountId without botId",
      "Act": "Send POST request to /GetAccountInfo without botId header",
      "Assert": "Check if the response returns status code 404 with error message: 'Not Found'"
    },
    "Validation": "Ensures API requires botId header"
  },
  {
    "ScenarioID": "5",
    "TestName": "testMissingAccountIdHeaderFails",
    "Description": "Test when accountId is missing from the request",
    "Execution": {
      "Arrange": "Prepare headers: Authorization, botId without accountId",
      "Act": "Send POST request to /GetAccountInfo without accountId header",
      "Assert": "Check if the response returns status code 404 with error message: 'Not Found'"
    },
    "Validation": "Ensures API requires accountId header"
  },
  {
    "ScenarioID": "6",
    "TestName": "testOptionalHeadersAreNotRequired",
    "Description": "Test if optional headers like koreUserId, X_Auth_token, and X_CORRELATION_ID are omitted",
    "Execution": {
      "Arrange": "Prepare headers with Authorization, botId, and accountId only",
      "Act": "Send POST request to /GetAccountInfo without optional headers",
      "Assert": "Check if the response returns status code 200 with valid account details"
    },
    "Validation": "Ensures optional headers are not mandatory for the API"
  },
  {
    "ScenarioID": "7",
    "TestName": "testInvalidXCorrelationIdFails",
    "Description": "Test when X_CORRELATION_ID is provided but has invalid type",
    "Execution": {
      "Arrange": "Prepare headers with X_CORRELATION_ID='invalid_string', Authorization, botId, accountId",
      "Act": "Send POST request to /GetAccountInfo with invalid X_CORRELATION_ID",
      "Assert": "Check if the response returns status code 400 with appropriate validation error"
    },
    "Validation": "Ensures API validates the type of optional headers"
  },
  {
    "ScenarioID": "8",
    "TestName": "testResponseStructureForValidRequest",
    "Description": "Test the structure of response for valid inputs",
    "Execution": {
      "Arrange": "Prepare valid headers: Authorization, botId, accountId",
      "Act": "Send POST request to /GetAccountInfo",
      "Assert": "Check if the response body has matching schema (customerId and accounts array) with all expected properties"
    },
    "Validation": "Ensures the API response adheres to the defined schema"
  },
  {
    "ScenarioID": "9",
    "TestName": "testRequestWithEmptyAccountInfo",
    "Description": "Test when the response contains no accounts information",
    "Execution": {
      "Arrange": "Prepare headers that match a customer with no accounts",
      "Act": "Send POST request to /GetAccountInfo",
      "Assert": "Check if the response returns status code 200 with 'accounts' as an empty array"
    },
    "Validation": "Ensures API handles cases with no account information gracefully"
  },
  {
    "ScenarioID": "10",
    "TestName": "testRequestWithMalformedAuthorizationHeaderFails",
    "Description": "Test when Authorization header is malformed",
    "Execution": {
      "Arrange": "Prepare headers: Authorization='Bearer123', botId, accountId",
      "Act": "Send POST request to /GetAccountInfo with malformed Authorization header",
      "Assert": "Check if the response returns status code 401 with relevant error details"
    },
    "Validation": "Ensures API rejects malformed Authorization tokens"
  },
  {
    "ScenarioID": "11",
    "TestName": "testRequestWithInvalidBotId",
    "Description": "Test when botId value is invalid",
    "Execution": {
      "Arrange": "Prepare headers: Authorization, botId='invalid_bot_id', accountId",
      "Act": "Send POST request to /GetAccountInfo with invalid botId",
      "Assert": "Check if the response returns status code 404 with error message"
    },
    "Validation": "Ensures validation of botId input"
  },
  {
    "ScenarioID": "12",
    "TestName": "testEnumValuesValidationForCardStatus",
    "Description": "Test if card status accepts only valid enum values: active, frozen, expired, or blocked",
    "Execution": {
      "Arrange": "Prepare valid headers and include a card status outside the valid enum",
      "Act": "Send POST request to /GetAccountInfo",
      "Assert": "Check if the response returns status code 400 with validation error"
    },
    "Validation": "Ensures enum constraints are enforced on cardStatus field"
  },
  {
    "ScenarioID": "13",
    "TestName": "testResponseForInactiveAccount",
    "Description": "Test the response when an account has a status other than 'active'",
    "Execution": {
      "Arrange": "Prepare headers that match an account with status 'frozen'",
      "Act": "Send POST request to /GetAccountInfo",
      "Assert": "Check if the response body correctly reflects the account status in the response"
    },
    "Validation": "Ensures API returns account details with proper status"
  }
]

*/

// ********RoostGPT********
package org.springframework.RoostTest;

import org.json.JSONObject;
import org.json.JSONArray;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;

public class GetAccountInfoPostTest {

    List<JSONObject> testCases = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        testCases = dataloader.loadJson("src/test/java/org/springframework/RoostTest/GetAccountInfoPostTest.JSON");
    }


    @Test
    public void GetAccountInfoPost_Test() {
        this.setUp();
        Integer testNumber = 1;
        for (JSONObject testData : testCases) {
            RestAssured.baseURI = "https://localhost:8080/smt";

            JSONObject requestHeader = testData.optJSONObject("request_header");
            JSONObject requestBody = testData.optJSONObject("request_body");
            JSONObject queryParams = testData.optJSONObject("query_params");
            JSONObject pathParams = testData.optJSONObject("path_params");
            String requestPath = "/GetAccountInfo";

            if (pathParams != null) {
                for (String key : pathParams.keySet()) {
                    requestPath = requestPath.replace("{" + key + "}", pathParams.getString(key));
                }
            }

            io.restassured.specification.RequestSpecification req = given();

            // Resolve Authorization token priority: ENV > Param(RoostENV) > JSON
            String userEnvAuthToken = System.getenv("AUTH_TOKEN");
            String resolvedAuthToken = (userEnvAuthToken != null && !userEnvAuthToken.isEmpty()) ? userEnvAuthToken : "credential-register/swagger_server/swagger/swagger.yaml";

            boolean authSet = false;
            if (requestHeader != null) {
                Iterator<String> keys = requestHeader.keys();
                while (keys.hasNext()) {
                    String key = keys.next();
                    String value = requestHeader.getString(key);

                    if (key.equalsIgnoreCase("Authorization")) {
                        if (value.equalsIgnoreCase("${AUTH_TOKEN}") && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                            req.header("Authorization", "Bearer " + resolvedAuthToken);
                            authSet = true;
                        } else {
                            req.header(key, value);
                            authSet = true;
                        }
                    } else {
                        req.header(key, value);
                    }
                }
            }

            if (!authSet && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                req.header("Authorization", "Bearer " + resolvedAuthToken);
            }

            if (queryParams != null) {
                for (String key : queryParams.keySet()) {
                    req.queryParam(key, queryParams.get(key));
                }
            }

            if (requestBody != null && requestBody.length() > 0) {
                req.body(requestBody.toString());
            }

            Response responseObj;
            switch ("post".toLowerCase()) {
              case "post":
                responseObj = req.when().post(requestPath);
                break;
              case "get":
                responseObj = req.when().get(requestPath);
                break;
              case "put":
                responseObj = req.when().put(requestPath);
                break;
              case "delete":
                responseObj = req.when().delete(requestPath);
                break;
              default:
                throw new RuntimeException("Unsupported HTTP method: " + "post");
            }

            responseObj = responseObj.then().extract().response();

            System.out.printf("Test Case %d: GetAccountInfoPost_Test\n", testNumber++);
            System.out.println("Request: POST " + requestPath);
            System.out.println("Status Code: " + responseObj.statusCode());

            if (testData.has("expected_status_code")) {
                int expectedCode = testData.getInt("expected_status_code");
                MatcherAssert.assertThat(
                    "Expected status code " + expectedCode + " but got " + responseObj.statusCode(),
                    responseObj.statusCode(),
                    equalTo(expectedCode)
                );
            }
        }
    }
}
