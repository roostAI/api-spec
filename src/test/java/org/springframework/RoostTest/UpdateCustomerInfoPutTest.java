// ********RoostGPT********
/*
Test generated by RoostGPT for test pw-test-1751523219678 using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /UpdateCustomerInfo_put for http method type PUT in rest-assured framework

RoostTestHash=2c472e781e

[
  {
    "ScenarioID": "1",
    "TestName": "testValidHeadersReturns200",
    "Description": "Verify that a valid request with all required headers returns a 200 status",
    "Execution": {
      "Arrange": "Prepare valid headers: 'botId', 'accountId', and 'Authorization'",
      "Act": "Send PUT request to /UpdateCustomerInfo with valid headers",
      "Assert": "Check for 200 status code"
    },
    "Validation": "Ensures API successfully processes request with valid input"
  },
  {
    "ScenarioID": "2",
    "TestName": "testMissingRequiredHeadersReturns401",
    "Description": "Verify that the endpoint returns a 401 status when 'Authorization' header is missing",
    "Execution": {
      "Arrange": "Prepare headers excluding 'Authorization' and include 'botId' and 'accountId'",
      "Act": "Send PUT request to /UpdateCustomerInfo without 'Authorization' header",
      "Assert": "Check for 401 status code and error message in response body"
    },
    "Validation": "Validates that missing authentication causes authorization failure"
  },
  {
    "ScenarioID": "3",
    "TestName": "testInvalidBotIdFormatReturns404",
    "Description": "Verify response when 'botId' is missing or incorrectly formatted",
    "Execution": {
      "Arrange": "Prepare headers with missing or invalid 'botId' value",
      "Act": "Send PUT request to /UpdateCustomerInfo with invalid 'botId'",
      "Assert": "Check for 404 status code and error message indicating resource not found"
    },
    "Validation": "Ensures the API handles missing or invalid required parameters correctly"
  },
  {
    "ScenarioID": "4",
    "TestName": "testOptionalHeadersIncludedReturns200",
    "Description": "Verify response when optional headers 'X_Auth_token' and 'X_CORRELATION_ID' are included",
    "Execution": {
      "Arrange": "Prepare valid headers including optional 'X_Auth_token' and 'X_CORRELATION_ID'",
      "Act": "Send PUT request to /UpdateCustomerInfo with all headers",
      "Assert": "Check for 200 status code and validate successful operation"
    },
    "Validation": "Ensures optional headers do not impact the operation when provided"
  },
  {
    "ScenarioID": "5",
    "TestName": "testMissingAccountIdReturns404",
    "Description": "Verify response when 'accountId' header is missing",
    "Execution": {
      "Arrange": "Prepare headers excluding 'accountId', but include valid 'botId' and 'Authorization'",
      "Act": "Send PUT request to /UpdateCustomerInfo without 'accountId' header",
      "Assert": "Check for 404 status code and appropriate error message"
    },
    "Validation": "Validates that resource identification fails for missing 'accountId'"
  },
  {
    "ScenarioID": "6",
    "TestName": "testAuthorizationHeaderInvalidFormatReturns401",
    "Description": "Verify that the endpoint returns a 401 status when 'Authorization' header has invalid format",
    "Execution": {
      "Arrange": "Prepare headers with an invalid value for 'Authorization' header",
      "Act": "Send PUT request to /UpdateCustomerInfo with invalid 'Authorization' header",
      "Assert": "Check for 401 status code and appropriate error message"
    },
    "Validation": "Ensures invalid authorization format results in authentication failure"
  },
  {
    "ScenarioID": "7",
    "TestName": "testMissingOptionalHeadersStillReturns200",
    "Description": "Verify that a request without optional headers still returns a 200 status",
    "Execution": {
      "Arrange": "Prepare valid headers excluding 'X_Auth_token' and 'X_CORRELATION_ID'",
      "Act": "Send PUT request to /UpdateCustomerInfo without optional headers",
      "Assert": "Check for 200 status code"
    },
    "Validation": "Ensures optional headers are truly optional and missing them does not affect response"
  },
  {
    "ScenarioID": "8",
    "TestName": "testInvalidCorrelationIdTypeReturns400",
    "Description": "Verify response when 'X_CORRELATION_ID' is of invalid type",
    "Execution": {
      "Arrange": "Prepare headers with 'X_CORRELATION_ID' value set to a string instead of a number",
      "Act": "Send PUT request to /UpdateCustomerInfo with invalid 'X_CORRELATION_ID'",
      "Assert": "Check for 400 status code and validation error in response body"
    },
    "Validation": "Ensures incorrect data types for optional parameters are properly validated"
  },
  {
    "ScenarioID": "9",
    "TestName": "testEmptyHeadersReturns401",
    "Description": "Verify response when all headers are empty or null",
    "Execution": {
      "Arrange": "Prepare headers where required values are null or empty strings",
      "Act": "Send PUT request to /UpdateCustomerInfo with empty headers",
      "Assert": "Check for 401 status code and appropriate error message"
    },
    "Validation": "Validates behavior when no meaningful header values are provided"
  },
  {
    "ScenarioID": "10",
    "TestName": "testValidHeadersWithExtraUnknownHeaderReturns200",
    "Description": "Verify response when an unrecognized header is included alongside valid headers",
    "Execution": {
      "Arrange": "Prepare valid headers and add an unknown header",
      "Act": "Send PUT request to /UpdateCustomerInfo with extra unrecognized header",
      "Assert": "Check for 200 status code"
    },
    "Validation": "Ensures the API ignores unrecognized headers and still processes the request successfully"
  }
]

*/

// ********RoostGPT********
package org.springframework.RoostTest;

import org.json.JSONObject;
import org.json.JSONArray;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.*;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;

public class UpdateCustomerInfoPutTest {

    List<JSONObject> testCases = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        testCases = dataloader.loadJson("src/test/java/org/springframework/RoostTest/UpdateCustomerInfoPutTest.JSON");
    }


    @Test
    public void UpdateCustomerInfoPut_Test() {
        this.setUp();
        Integer testNumber = 1;
        for (JSONObject testData : testCases) {
            RestAssured.baseURI = "https://localhost:8080/smt";

            JSONObject requestHeader = testData.optJSONObject("request_header");
            JSONObject requestBody = testData.optJSONObject("request_body");
            JSONObject queryParams = testData.optJSONObject("query_params");
            JSONObject pathParams = testData.optJSONObject("path_params");
            String requestPath = "/UpdateCustomerInfo";

            if (pathParams != null) {
                for (String key : pathParams.keySet()) {
                    requestPath = requestPath.replace("{" + key + "}", pathParams.getString(key));
                }
            }

            io.restassured.specification.RequestSpecification req = given();

            // Resolve Authorization token priority: ENV > Param(RoostENV) > JSON
            String userEnvAuthToken = System.getenv("AUTH_TOKEN");
            String resolvedAuthToken = (userEnvAuthToken != null && !userEnvAuthToken.isEmpty()) ? userEnvAuthToken : "credential-register/swagger_server/swagger/swagger.yaml";

            boolean authSet = false;
            if (requestHeader != null) {
                Iterator<String> keys = requestHeader.keys();
                while (keys.hasNext()) {
                    String key = keys.next();
                    String value = requestHeader.getString(key);

                    if (key.equalsIgnoreCase("Authorization")) {
                        if (value.equalsIgnoreCase("${AUTH_TOKEN}") && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                            req.header("Authorization", "Bearer " + resolvedAuthToken);
                            authSet = true;
                        } else {
                            req.header(key, value);
                            authSet = true;
                        }
                    } else {
                        req.header(key, value);
                    }
                }
            }

            if (!authSet && resolvedAuthToken != null && !resolvedAuthToken.isEmpty()) {
                req.header("Authorization", "Bearer " + resolvedAuthToken);
            }

            if (queryParams != null) {
                for (String key : queryParams.keySet()) {
                    req.queryParam(key, queryParams.get(key));
                }
            }

            if (requestBody != null && requestBody.length() > 0) {
                req.body(requestBody.toString());
            }

            Response responseObj;
            switch ("put".toLowerCase()) {
              case "post":
                responseObj = req.when().post(requestPath);
                break;
              case "get":
                responseObj = req.when().get(requestPath);
                break;
              case "put":
                responseObj = req.when().put(requestPath);
                break;
              case "delete":
                responseObj = req.when().delete(requestPath);
                break;
              default:
                throw new RuntimeException("Unsupported HTTP method: " + "put");
            }

            responseObj = responseObj.then().extract().response();

            System.out.printf("Test Case %d: UpdateCustomerInfoPut_Test\n", testNumber++);
            System.out.println("Request: PUT " + requestPath);
            System.out.println("Status Code: " + responseObj.statusCode());

            if (testData.has("expected_status_code")) {
                int expectedCode = testData.getInt("expected_status_code");
                MatcherAssert.assertThat(
                    "Expected status code " + expectedCode + " but got " + responseObj.statusCode(),
                    responseObj.statusCode(),
                    equalTo(expectedCode)
                );
            }
        }
    }
}
