{
  "info": {
    "_postman_id": "a9ed4e1c-91c7-4c75-86ad-ad905e692627",
    "name": "FastAPI Copy 2",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
    "_exporter_id": "24197802"
  },
  "item": [
    {
      "name": "/",
      "item": [
        {
          "name": "Read Root",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": "{{baseUrl}}/"
          },
          "response": [
            {
              "name": "Successful Response",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "url": "http://localhost:8080/rest/chai/0.1.0/"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Api-postman using AI Type Open AI and AI Model gpt-3.5-turbo-0125\n\n\nTest generated for {{baseUrl}}/ for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Successful Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Content-Type is application/json\", function () {\n            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n        });\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "items",
      "item": [
        {
          "name": "{item_id}",
          "item": [
            {
              "name": "Read Item",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/items/:item_id?q=<string>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "items",
                    ":item_id"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "{{q}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "item_id",
                      "value": "{{item_id}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Successful Response",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/items/:item_id?q=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "items",
                        ":item_id"
                      ],
                      "query": [
                        {
                          "key": "q",
                          "value": "{{q}}"
                        }
                      ],
                      "variable": [
                        {
                          "key": "item_id",
                          "value": "{{item_id}}"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "{}"
                },
                {
                  "name": "Validation Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/items/:item_id?q=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "items",
                        ":item_id"
                      ],
                      "query": [
                        {
                          "key": "q",
                          "value": "{{q}}"
                        }
                      ],
                      "variable": [
                        {
                          "key": "item_id",
                          "value": "{{item_id}}"
                        }
                      ]
                    }
                  },
                  "status": "Unprocessable Entity (WebDAV) (RFC 4918)",
                  "code": 422,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Api-postman using AI Type Open AI and AI Model gpt-3.5-turbo-0125\n\n\nTest generated for items/{item_id}?q={{q}} for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Successful Response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Content-Type is application/json\", function () {\n            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n        });\n    });\n\n}\n\nif (pm.response.code == 422){\n    pm.test(\"Validation Error\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unprocessable Entity (WebDAV) (RFC 4918)\");\n        pm.test(\"Response has Content-Type header\", function () {\n            pm.response.to.have.header(\"Content-Type\");\n        });\n        pm.test(\"Content-Type is application/json\", function () {\n            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n        });\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `detail`))).to.equal(true);\n                }\n\n            }\n\n        })\n  \n        pm.test(`detail length to be atmost '100'`,function(){\n            pm.expect(ld.get(responseData, `detail`, \"\").length).to.be.at.most(100);\n        })\n  \n        pm.test(`detail length to be atleast '100'`,function(){\n          pm.expect(ld.get(responseData, `detail`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test(`Each object in the detail field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`detail`);\n            let detailArray = ld.get(pm.response.json(), `detail`, \"\");\n            for (let detail_it = 0; detail_it < detailArray.length; detail_it++) {\n                let iterator = detail_it;\n                \t\n        pm.test(`${iterator} element of array 'detailArray' has 'loc' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `detail[${detail_it}].loc`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `detail[${detail_it}].loc`))).to.equal(true);\n            }\n\n        })\n\n  \n        pm.test(`detail[${detail_it}].loc length to be atmost '100'`,function(){\n            pm.expect(ld.get(responseData, `detail[${detail_it}].loc`, \"\").length).to.be.at.most(100);\n        })\n  \n        pm.test(`detail[${detail_it}].loc length to be atleast '100'`,function(){\n          pm.expect(ld.get(responseData, `detail[${detail_it}].loc`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test(`${iterator} element of array 'detail[${detail_it}].msg' has 'msg' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `detail[${detail_it}].msg`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`detail[${detail_it}].msg`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test(`detail[${detail_it}].msg length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `detail[${detail_it}].msg`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`detail[${detail_it}].msg length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `detail[${detail_it}].msg`, \"\").length).to.be.at.least(0);\n        })\n\n        pm.test(`${iterator} element of array 'detail[${detail_it}].type' has 'type' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `detail[${detail_it}].type`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`detail[${detail_it}].type`, null)).to.equal(\"string\");\n            }\n        })\n\n  \n        pm.test(`detail[${detail_it}].type length to be atmost '1000'`,function(){\n            pm.expect(ld.get(responseData, `detail[${detail_it}].type`, \"\").length).to.be.at.most(1000);\n        })\n  \n        pm.test(`detail[${detail_it}].type length to be alteast '0'`,function(){\n            pm.expect(ld.get(responseData, `detail[${detail_it}].type`, \"\").length).to.be.at.least(0);\n        })\n\n            }\n\n        })\n\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "/"
    },
    {
      "type": "number",
      "value": 200,
      "key": "statusCode"
    }
  ]
}