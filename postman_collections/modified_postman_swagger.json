{
  "item": [
    {
      "name": "Submit Request",
      "request": {
        "name": "Submit Request",
        "description": {
          "content": "Meta API request",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "submitRequest"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "botId",
            "value": "{{botId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "accountId",
            "value": "{{accountId}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "<object>",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "submitRequest"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "<object>",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "submitRequest"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "<object>",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "submitRequest"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "<object>",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for submitRequest for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "AuthToken",
      "request": {
        "name": "AuthToken",
        "description": {
          "content": "Get authentication token",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "authToken"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "botId",
            "value": "{{botId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "accountId",
            "value": "{{accountId}}",
            "description": ""
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null
      },
      "response": [
        {
          "name": "successful login",
          "originalRequest": {
            "url": {
              "path": [
                "authToken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"token\": \"token\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "authToken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "authToken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for authToken for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"successful login\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `token` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`token`)){\n                if(pm.expect(ld.get(pm.response.json(), `token`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `token`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "Deposit",
      "request": {
        "name": "Deposit",
        "description": {
          "content": "Deposit amount to customer's account",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "deposit"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*string}}\",\n    \"amount\": \"{{amount_*string}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"image\": {\n        \"frontImage\": \"{{image.frontImage_*string}}\",\n        \"backImage\": \"{{image.backImage_*string}}\"\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "Deposit success",
          "originalRequest": {
            "url": {
              "path": [
                "deposit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\",\n    \"amount\": \"{{amount_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"image\": {\n        \"frontImage\": \"{{image.frontImage_*string}}\",\n        \"backImage\": \"{{image.backImage_*string}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "deposit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\",\n    \"amount\": \"{{amount_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"image\": {\n        \"frontImage\": \"{{image.frontImage_*string}}\",\n        \"backImage\": \"{{image.backImage_*string}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "deposit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\",\n    \"amount\": \"{{amount_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"image\": {\n        \"frontImage\": \"{{image.frontImage_*string}}\",\n        \"backImage\": \"{{image.backImage_*string}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for deposit for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Deposit success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "GetAccountInfo",
      "request": {
        "name": "GetAccountInfo",
        "description": {
          "content": "fetch customer account details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetAccountInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"customerId\": 46632724.213349074,\n  \"accounts\": [\n    {\n      \"customerId\": -87023033.77087826,\n      \"accountName\": \"sit anim dolor\",\n      \"accountNickname\": \"veniam Duis amet mollit\",\n      \"accountNumber\": \"proident dolore\",\n      \"accountType\": \"Ut consectetur enim pariatur sint\",\n      \"activatedDate\": \"dolor\",\n      \"availableBalance\": -62203839.51040578,\n      \"availableCash\": 10853401.973872319,\n      \"availableCashLimit\": -99077641.93002358,\n      \"availableCredit\": 53776096.67205593,\n      \"bankName\": \"voluptate quis pr\",\n      \"branchName\": \"adipisicing\",\n      \"cardName\": \"fugiat cillum Ut\",\n      \"cardNumber\": \"Excepteur mollit incididunt\",\n      \"cardStatus\": \"cupidatat ea\",\n      \"cardType\": \"dolor ut\",\n      \"creditLimit\": -65417797.62766251,\n      \"currency\": \"qui tempor\",\n      \"currentBalance\": -30165106.524727255,\n      \"deactivatedDate\": \"sunt eu eiusmod sit Lorem\",\n      \"dueAmount\": 20677851.390632987,\n      \"dueDate\": \"laboris anim velit dolor aliquip\",\n      \"earlyWithdrawalPenalty\": -26045745.184874475,\n      \"email\": \"sunt nostrud sit\",\n      \"expDate\": \"Excepteur occaecat deserunt esse velit\",\n      \"fdType\": \"in sunt anim voluptate officia\",\n      \"image\": \"consequat consectetur fugiat ut ad\",\n      \"interestRate\": -336856.2525984496,\n      \"internalTransferFromEnabled\": true,\n      \"internalTransferToEnabled\": true,\n      \"isPrimaryMobile\": true,\n      \"isAlternateMobileNumber\": true,\n      \"isStatement\": false,\n      \"lastDrawDate\": \"in\",\n      \"loanMaturityDate\": \"velit\",\n      \"loanOriginationDate\": \"in in nulla\",\n      \"location\": \"eu aliquip labore reprehenderit et\",\n      \"lastUpdated\": \"fugiat consequat velit sed\",\n      \"maxTransactionLimit\": \"labore aute nostrud\",\n      \"maturityDate\": \"Ut Duis elit aliqua incididunt\",\n      \"minimumPaymentDue\": \"exercitation Ut dolor al\",\n      \"minimumBalance\": \"in cul\",\n      \"monthlyPayment\": 66363221.453692496,\n      \"openingBalance\": 87328134.6123552,\n      \"originalLoanAmount\": 65666858.48938781,\n      \"P2PLimit\": -54353042.2207688,\n      \"p2pEnabled\": 37055865.21512133,\n      \"paybillEnabled\": true,\n      \"payoffAmount\": 72763538.26401553,\n      \"personalBankerName\": \"incididunt aliqua\",\n      \"personalBankerContact\": {\n        \"email\": \"dolore dolor ut esse\",\n        \"mobileNumber\": \"occaecat quis consectetur nulla\"\n      },\n      \"phone\": 77294911.2993167,\n      \"postedBalance\": 99052018.74701804,\n      \"principalBalance\": \"in consectet\",\n      \"productCode\": \"incididunt labore et\",\n      \"productName\": \"do qui\",\n      \"propertyAddress\": \"nisi deserunt et\",\n      \"rewardPoints\": \"irure culpa veniam ipsum\",\n      \"routingNumber\": \"proident do et commodo cupidatat\",\n      \"statementDate\": \"velit mollit exercitation Excepteur\",\n      \"status\": \"ad dolor\",\n      \"swiftCode\": \"nostrud mollit\",\n      \"totalBalance\": -31740801.00464493,\n      \"unbilledAmount\": 61875720.90585381,\n      \"valueAtMaturity\": 34826361.810647726,\n      \"holdAmount\": -27975500.871075004,\n      \"unclearFundsAmount\": -70494560.16074407,\n      \"averageMonthlyBalance\": 65764616.97647691,\n      \"netWithdrawableBalance\": 34543126.69040838,\n      \"totalTenure\": \"labor\",\n      \"remainingTenure\": \"sunt officia et\",\n      \"debitAccountNumber\": \"in sit deserunt\",\n      \"lateFee\": 40521309.45414603,\n      \"bounceCharge\": -64348520.96041524,\n      \"totalCharges\": 90867168.02369702,\n      \"overDueAmount\": -72976739.81711377,\n      \"cardDetails\": [\n        {\n          \"cardName\": \"labore aute incididunt fugiat\",\n          \"cardNumber\": \"ea tempor sunt\",\n          \"cardStatus\": \"sed non velit ut tempor\",\n          \"cardImage\": \"dolor laborum exercitation\",\n          \"cardType\": \"officia pariatur\",\n          \"expDate\": \"qui minim officia ex\",\n          \"displayCardStatus\": \"ea mollit aliquip id\",\n          \"primaryCard\": \"incididunt non cillum et\",\n          \"cardChannelInfo\": {\n            \"ATM\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"offline\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"international\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"online\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"contactless\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"cardRestrictions\": {\n            \"countries\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"MCC\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"blockReason\": \"qui tempor velit\",\n          \"nameOnCard\": \"non adipisicing sit ut voluptate\",\n          \"cardNetwork\": \"sit anim eu Excepteur tempor\",\n          \"autopay\": {\n            \"enabled\": true,\n            \"sourceAccountId\": \"enim\",\n            \"paymentType\": \"dolor eu et do\",\n            \"onStatementDate\": false,\n            \"dayOfMonth\": \"est pariatur non\"\n          },\n          \"dueAmount\": 24851973.425580457,\n          \"dueDate\": \"ut ad sit\",\n          \"minimumPaymentDue\": -50348879.680066936,\n          \"partialPaymentPaid\": -95751685.7731009\n        },\n        {\n          \"cardName\": \"ex do enim\",\n          \"cardNumber\": \"elit exercitation laboris\",\n          \"cardStatus\": \"et \",\n          \"cardImage\": \"aliqua Lorem\",\n          \"cardType\": \"minim reprehenderit adipisicing in mollit\",\n          \"expDate\": \"dolor in exercitation\",\n          \"displayCardStatus\": \"laborum deserunt adipisicing exercitation in\",\n          \"primaryCard\": \"nulla non dolore\",\n          \"cardChannelInfo\": {\n            \"ATM\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"offline\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"international\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"online\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"contactless\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"cardRestrictions\": {\n            \"countries\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"MCC\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"blockReason\": \"tempor aliqua dolor\",\n          \"nameOnCard\": \"nulla ex\",\n          \"cardNetwork\": \"voluptate dolor\",\n          \"autopay\": {\n            \"enabled\": true,\n            \"sourceAccountId\": \"eu esse\",\n            \"paymentType\": \"ut consequat eu\",\n            \"onStatementDate\": false,\n            \"dayOfMonth\": \"ut in sed\"\n          },\n          \"dueAmount\": -64566497.691205926,\n          \"dueDate\": \"irure mollit\",\n          \"minimumPaymentDue\": 47449623.30996314,\n          \"partialPaymentPaid\": 37157234.532542646\n        }\n      ],\n      \"IsCrossAccount\": true\n    },\n    {\n      \"customerId\": -50691222.94209425,\n      \"accountName\": \"consequat\",\n      \"accountNickname\": \"labore velit sint est magna\",\n      \"accountNumber\": \"est sit sed qui\",\n      \"accountType\": \"ut\",\n      \"activatedDate\": \"ex labore proident\",\n      \"availableBalance\": 2743250.1353277713,\n      \"availableCash\": -41958577.71646598,\n      \"availableCashLimit\": 80730169.99917412,\n      \"availableCredit\": 78025391.64386353,\n      \"bankName\": \"Ut quis esse anim\",\n      \"branchName\": \"minim dolor sint\",\n      \"cardName\": \"sed occaecat\",\n      \"cardNumber\": \"amet ut incididunt\",\n      \"cardStatus\": \"eiusmod ut et voluptate\",\n      \"cardType\": \"Lorem mollit\",\n      \"creditLimit\": 15458517.398956805,\n      \"currency\": \"dolor aute dolor consequat\",\n      \"currentBalance\": -12335748.981335208,\n      \"deactivatedDate\": \"eu laborum Ut mollit\",\n      \"dueAmount\": 46853876.447907746,\n      \"dueDate\": \"sint dolor Lorem cupidatat\",\n      \"earlyWithdrawalPenalty\": -55024705.96101578,\n      \"email\": \"in laboris\",\n      \"expDate\": \"dolor\",\n      \"fdType\": \"cillum mollit do Excepteur\",\n      \"image\": \"occaecat nulla qui deserunt\",\n      \"interestRate\": -12016454.95934312,\n      \"internalTransferFromEnabled\": false,\n      \"internalTransferToEnabled\": true,\n      \"isPrimaryMobile\": true,\n      \"isAlternateMobileNumber\": true,\n      \"isStatement\": false,\n      \"lastDrawDate\": \"velit sit Excepteur eu\",\n      \"loanMaturityDate\": \"ipsum magna nisi occaecat\",\n      \"loanOriginationDate\": \"aute ex\",\n      \"location\": \"proident voluptate sed ipsum sit\",\n      \"lastUpdated\": \"irure officia Lorem commodo\",\n      \"maxTransactionLimit\": \"dolore dol\",\n      \"maturityDate\": \"in aute ipsum cillum\",\n      \"minimumPaymentDue\": \"proident sunt qui adipisicing\",\n      \"minimumBalance\": \"occaecat\",\n      \"monthlyPayment\": -72334791.61380498,\n      \"openingBalance\": 56479722.8528178,\n      \"originalLoanAmount\": 63986545.35463074,\n      \"P2PLimit\": 41248006.14735001,\n      \"p2pEnabled\": -73695609.10861534,\n      \"paybillEnabled\": false,\n      \"payoffAmount\": -97099660.44773002,\n      \"personalBankerName\": \"est id commodo consequat\",\n      \"personalBankerContact\": {\n        \"email\": \"qui Duis\",\n        \"mobileNumber\": \"enim et tempor id ullamco\"\n      },\n      \"phone\": 40710545.22963208,\n      \"postedBalance\": -35254846.10746692,\n      \"principalBalance\": \"ut dolore eu reprehenderit\",\n      \"productCode\": \"sunt do dolor\",\n      \"productName\": \"dolore consectetur id\",\n      \"propertyAddress\": \"officia\",\n      \"rewardPoints\": \"est Excepteur laborum\",\n      \"routingNumber\": \"enim do magna et\",\n      \"statementDate\": \"exercitation\",\n      \"status\": \"consequat nulla\",\n      \"swiftCode\": \"sint do ut culpa\",\n      \"totalBalance\": 1971944.2092555314,\n      \"unbilledAmount\": -33014143.72343614,\n      \"valueAtMaturity\": 11658572.307923526,\n      \"holdAmount\": -69186072.73060787,\n      \"unclearFundsAmount\": 20042202.796162605,\n      \"averageMonthlyBalance\": -82234562.66255021,\n      \"netWithdrawableBalance\": 58945306.55682492,\n      \"totalTenure\": \"dolor eiusmod\",\n      \"remainingTenure\": \"mollit nostrud\",\n      \"debitAccountNumber\": \"ut occaecat ad\",\n      \"lateFee\": -38618423.15413555,\n      \"bounceCharge\": -70887291.28186588,\n      \"totalCharges\": -83239203.35708168,\n      \"overDueAmount\": -71250041.4830088,\n      \"cardDetails\": [\n        {\n          \"cardName\": \"elit cillum aute dolor officia\",\n          \"cardNumber\": \"quis id\",\n          \"cardStatus\": \"ut Lorem voluptate Duis\",\n          \"cardImage\": \"ut elit pariatur eiusmod\",\n          \"cardType\": \"cupidatat Excepteur\",\n          \"expDate\": \"ullamco\",\n          \"displayCardStatus\": \"mollit ipsum est\",\n          \"primaryCard\": \"fugiat commodo non amet\",\n          \"cardChannelInfo\": {\n            \"ATM\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"offline\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"international\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"online\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"contactless\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"cardRestrictions\": {\n            \"countries\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"MCC\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"blockReason\": \"nisi aliqua occaecat adipisicing\",\n          \"nameOnCard\": \"Excepteur\",\n          \"cardNetwork\": \"enim cillum pariatur\",\n          \"autopay\": {\n            \"enabled\": true,\n            \"sourceAccountId\": \"exercitation\",\n            \"paymentType\": \"vo\",\n            \"onStatementDate\": true,\n            \"dayOfMonth\": \"id culpa elit magna\"\n          },\n          \"dueAmount\": 40298132.85352448,\n          \"dueDate\": \"laborum pari\",\n          \"minimumPaymentDue\": -86751610.97626,\n          \"partialPaymentPaid\": 44526495.13867962\n        },\n        {\n          \"cardName\": \"\",\n          \"cardNumber\": \"et cillum officia in\",\n          \"cardStatus\": \"tempor laboris\",\n          \"cardImage\": \"occaecat\",\n          \"cardType\": \"aute adipisicing et\",\n          \"expDate\": \"in do id nisi deserunt\",\n          \"displayCardStatus\": \"nisi Ut\",\n          \"primaryCard\": \"velit ad do sint\",\n          \"cardChannelInfo\": {\n            \"ATM\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"offline\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"international\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"online\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"contactless\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"cardRestrictions\": {\n            \"countries\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"MCC\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"blockReason\": \"consectetur\",\n          \"nameOnCard\": \"veniam est nostrud\",\n          \"cardNetwork\": \"Lorem dolore\",\n          \"autopay\": {\n            \"enabled\": false,\n            \"sourceAccountId\": \"Duis proident sed\",\n            \"paymentType\": \"do sint\",\n            \"onStatementDate\": false,\n            \"dayOfMonth\": \"proident\"\n          },\n          \"dueAmount\": 12152338.446546689,\n          \"dueDate\": \"occaecat id Ut laboris\",\n          \"minimumPaymentDue\": -7335340.712865442,\n          \"partialPaymentPaid\": -25287198.423650593\n        }\n      ],\n      \"IsCrossAccount\": true\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for GetAccountInfo for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `customerId` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`customerId`)){\n                if(pm.expect(ld.get(responseData, `customerId`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `customerId`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `accounts` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accounts`)){\n                if(pm.expect(ld.get(pm.response.json(), `accounts`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `accounts`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the accounts field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`accounts`);\n            let accountsArray = ld.get(pm.response.json(), `accounts`, \"\");\n            for (let accounts_it = 0; accounts_it < accountsArray.length; accounts_it++) {\n                let iterator = accounts_it;\n                \t\n        pm.test(`${iterator} element of array 'accountsArray'has 'customerId' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].customerId`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].customerId`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].accountName' has 'accountName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].accountName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].accountName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].accountNickname' has 'accountNickname' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].accountNickname`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].accountNickname`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].accountNumber' has 'accountNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].accountNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].accountNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].accountType' has 'accountType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].accountType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].accountType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].activatedDate' has 'activatedDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].activatedDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].activatedDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'availableBalance' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].availableBalance`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].availableBalance`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'availableCash' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].availableCash`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].availableCash`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'availableCashLimit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].availableCashLimit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].availableCashLimit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'availableCredit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].availableCredit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].availableCredit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].bankName' has 'bankName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].bankName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].bankName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].branchName' has 'branchName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].branchName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].branchName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardName' has 'cardName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardNumber' has 'cardNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardStatus' has 'cardStatus' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardStatus`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardStatus`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardType' has 'cardType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'creditLimit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].creditLimit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].creditLimit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].currency' has 'currency' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].currency`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].currency`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'currentBalance' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].currentBalance`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].currentBalance`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].deactivatedDate' has 'deactivatedDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].deactivatedDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].deactivatedDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'dueAmount' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].dueAmount`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].dueAmount`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].dueDate' has 'dueDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].dueDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].dueDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'earlyWithdrawalPenalty' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].earlyWithdrawalPenalty`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].earlyWithdrawalPenalty`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].email' has 'email' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].email`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].email`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].expDate' has 'expDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].expDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].expDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].fdType' has 'fdType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].fdType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].fdType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].image' has 'image' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].image`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].image`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'interestRate' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].interestRate`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].interestRate`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].internalTransferFromEnabled' has 'internalTransferFromEnabled' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].internalTransferFromEnabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].internalTransferFromEnabled`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].internalTransferToEnabled' has 'internalTransferToEnabled' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].internalTransferToEnabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].internalTransferToEnabled`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].isPrimaryMobile' has 'isPrimaryMobile' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].isPrimaryMobile`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].isPrimaryMobile`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].isAlternateMobileNumber' has 'isAlternateMobileNumber' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].isAlternateMobileNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].isAlternateMobileNumber`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].isStatement' has 'isStatement' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].isStatement`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].isStatement`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].lastDrawDate' has 'lastDrawDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].lastDrawDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].lastDrawDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].loanMaturityDate' has 'loanMaturityDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].loanMaturityDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].loanMaturityDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].loanOriginationDate' has 'loanOriginationDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].loanOriginationDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].loanOriginationDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].location' has 'location' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].location`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].location`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].lastUpdated' has 'lastUpdated' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].lastUpdated`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].lastUpdated`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].maxTransactionLimit' has 'maxTransactionLimit' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].maxTransactionLimit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].maxTransactionLimit`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].maturityDate' has 'maturityDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].maturityDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].maturityDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].minimumPaymentDue' has 'minimumPaymentDue' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].minimumPaymentDue`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].minimumPaymentDue`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].minimumBalance' has 'minimumBalance' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].minimumBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].minimumBalance`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'monthlyPayment' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].monthlyPayment`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].monthlyPayment`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'openingBalance' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].openingBalance`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].openingBalance`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'originalLoanAmount' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].originalLoanAmount`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].originalLoanAmount`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'P2PLimit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].P2PLimit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].P2PLimit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'p2pEnabled' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].p2pEnabled`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].p2pEnabled`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].paybillEnabled' has 'paybillEnabled' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].paybillEnabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].paybillEnabled`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'payoffAmount' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].payoffAmount`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].payoffAmount`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].personalBankerName' has 'personalBankerName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].personalBankerName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].personalBankerName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].personalBankerContact' has 'personalBankerContact' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].personalBankerContact`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].personalBankerContact`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].personalBankerContact.email' has 'email' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].personalBankerContact.email`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].personalBankerContact.email`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].personalBankerContact.mobileNumber' has 'mobileNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].personalBankerContact.mobileNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].personalBankerContact.mobileNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'phone' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].phone`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].phone`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'postedBalance' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].postedBalance`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].postedBalance`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].principalBalance' has 'principalBalance' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].principalBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].principalBalance`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].productCode' has 'productCode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].productCode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].productCode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].productName' has 'productName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].productName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].productName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].propertyAddress' has 'propertyAddress' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].propertyAddress`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].propertyAddress`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].rewardPoints' has 'rewardPoints' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].rewardPoints`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].rewardPoints`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].routingNumber' has 'routingNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].routingNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].routingNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].statementDate' has 'statementDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].statementDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].statementDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].status' has 'status' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].status`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].status`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].swiftCode' has 'swiftCode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].swiftCode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].swiftCode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'totalBalance' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].totalBalance`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].totalBalance`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'unbilledAmount' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].unbilledAmount`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].unbilledAmount`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'valueAtMaturity' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].valueAtMaturity`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].valueAtMaturity`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'holdAmount' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].holdAmount`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].holdAmount`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'unclearFundsAmount' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].unclearFundsAmount`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].unclearFundsAmount`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'averageMonthlyBalance' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].averageMonthlyBalance`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].averageMonthlyBalance`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'netWithdrawableBalance' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].netWithdrawableBalance`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].netWithdrawableBalance`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].totalTenure' has 'totalTenure' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].totalTenure`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].totalTenure`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].remainingTenure' has 'remainingTenure' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].remainingTenure`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].remainingTenure`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].debitAccountNumber' has 'debitAccountNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].debitAccountNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].debitAccountNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'lateFee' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].lateFee`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].lateFee`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'bounceCharge' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].bounceCharge`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].bounceCharge`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'totalCharges' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].totalCharges`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].totalCharges`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray'has 'overDueAmount' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].overDueAmount`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].overDueAmount`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accountsArray' has 'cardDetails' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the accounts[${accounts_it}].cardDetails field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`accounts[${accounts_it}].cardDetails`);\n            let cardDetailsArray = ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails`, \"\");\n            for (let cardDetails_it = 0; cardDetails_it < cardDetailsArray.length; cardDetails_it++) {\n                let iterator = cardDetails_it;\n                \t\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardName' has 'cardName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNumber' has 'cardNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardStatus' has 'cardStatus' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardStatus`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardStatus`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardImage' has 'cardImage' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardImage`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardImage`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardType' has 'cardType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].expDate' has 'expDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].expDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].expDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].displayCardStatus' has 'displayCardStatus' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].displayCardStatus`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].displayCardStatus`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].primaryCard' has 'primaryCard' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].primaryCard`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].primaryCard`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo' has 'cardChannelInfo' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM' has 'ATM' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'limit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.limit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.limit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline' has 'offline' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'limit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.limit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.limit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international' has 'international' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'limit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.limit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.limit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online' has 'online' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'limit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.limit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.limit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless' has 'contactless' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'limit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.limit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.limit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions' has 'cardRestrictions' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray' has 'countries' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries`);\n            let countriesArray = ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries`, \"\");\n            for (let countries_it = 0; countries_it < countriesArray.length; countries_it++) {\n                let iterator = countries_it;\n                \t\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries[${countries_it}].countrycode' has 'countrycode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries[${countries_it}].countrycode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries[${countries_it}].countrycode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'cardDetailsArray' has 'MCC' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC`);\n            let MCCArray = ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC`, \"\");\n            for (let MCC_it = 0; MCC_it < MCCArray.length; MCC_it++) {\n                let iterator = MCC_it;\n                \t\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].name`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].description' has 'description' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].description`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].description`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].blockReason' has 'blockReason' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].blockReason`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].blockReason`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].nameOnCard' has 'nameOnCard' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].nameOnCard`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].nameOnCard`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNetwork' has 'cardNetwork' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNetwork`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNetwork`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay' has 'autopay' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.enabled' has 'enabled' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.enabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.enabled`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.sourceAccountId' has 'sourceAccountId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.sourceAccountId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.sourceAccountId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.paymentType' has 'paymentType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.paymentType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.paymentType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.onStatementDate' has 'onStatementDate' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.onStatementDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.onStatementDate`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.dayOfMonth' has 'dayOfMonth' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.dayOfMonth`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.dayOfMonth`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'dueAmount' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueAmount`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueAmount`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueDate' has 'dueDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'minimumPaymentDue' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].cardDetails[${cardDetails_it}].minimumPaymentDue`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].cardDetails[${cardDetails_it}].minimumPaymentDue`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'partialPaymentPaid' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `accounts[${accounts_it}].cardDetails[${cardDetails_it}].partialPaymentPaid`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`accounts[${accounts_it}].cardDetails[${cardDetails_it}].partialPaymentPaid`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].IsCrossAccount' has 'IsCrossAccount' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].IsCrossAccount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].IsCrossAccount`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "to get the details of the mentioned customer account",
      "request": {
        "name": "to get the details of the mentioned customer account",
        "description": {
          "content": "fetch customer account details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetAccountDetails"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"accountInfo\": [\n        {\n            \"accountType\": \"{{accountInfo_0.accountType_*string}}\",\n            \"accountNumber\": \"{{accountInfo_0.accountNumber_*string}}\",\n            \"cardNumber\": \"{{accountInfo_0.cardNumber_*string}}\"\n        },\n        {\n            \"accountType\": \"{{accountInfo_1.accountType_*string}}\",\n            \"accountNumber\": \"{{accountInfo_1.accountNumber_*string}}\",\n            \"cardNumber\": \"{{accountInfo_1.cardNumber_*string}}\"\n        }\n    ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountDetails"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"accountInfo\": [\n        {\n            \"accountType\": \"{{accountInfo_0.accountType_*string}}\",\n            \"accountNumber\": \"{{accountInfo_0.accountNumber_*number}}\",\n            \"cardNumber\": \"{{accountInfo_0.cardNumber_*number}}\"\n        },\n        {\n            \"accountType\": \"{{accountInfo_1.accountType_*string}}\",\n            \"accountNumber\": \"{{accountInfo_1.accountNumber_*number}}\",\n            \"cardNumber\": \"{{accountInfo_1.cardNumber_*number}}\"\n        }\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"customerId\": -88138517.85867563,\n    \"accountName\": \"laboris nisi\",\n    \"accountNickname\": \"exercitation aliqua velit ad\",\n    \"accountNumber\": \"eu et\",\n    \"accountType\": \"elit consequat voluptate\",\n    \"activatedDate\": \"anim cupidatat ad qui\",\n    \"availableBalance\": -8292880.2293433845,\n    \"availableCash\": 60976729.94952324,\n    \"availableCashLimit\": -30551763.452511072,\n    \"availableCredit\": -20508675.99978532,\n    \"bankName\": \"amet nulla in proident\",\n    \"branchName\": \"adipisicing occaecat\",\n    \"cardName\": \"et in amet ullamco\",\n    \"cardNumber\": \"deseru\",\n    \"cardStatus\": \"reprehenderit sed occaecat non\",\n    \"cardType\": \"officia\",\n    \"creditLimit\": 81630099.03709733,\n    \"currency\": \"ad consectet\",\n    \"currentBalance\": -8603246.194835365,\n    \"deactivatedDate\": \"in officia sed\",\n    \"dueAmount\": -16214648.279655248,\n    \"dueDate\": \"labore aute occaecat\",\n    \"earlyWithdrawalPenalty\": -77112580.84830216,\n    \"email\": \"est nisi\",\n    \"expDate\": \"dolore id\",\n    \"fdType\": \"amet i\",\n    \"image\": \"ipsum nulla\",\n    \"interestRate\": 46975583.40666741,\n    \"internalTransferFromEnabled\": true,\n    \"internalTransferToEnabled\": true,\n    \"isPrimaryMobile\": true,\n    \"isAlternateMobileNumber\": false,\n    \"isStatement\": false,\n    \"lastDrawDate\": \"elit occaecat sunt dolor\",\n    \"loanMaturityDate\": \"adipisicing voluptate do Lorem\",\n    \"loanOriginationDate\": \"magna commodo proident\",\n    \"location\": \"in id et\",\n    \"lastUpdated\": \"elit et\",\n    \"maxTransactionLimit\": \"commodo\",\n    \"maturityDate\": \"occaecat magna\",\n    \"minimumPaymentDue\": \"eu Excepteur\",\n    \"minimumBalance\": \"elit\",\n    \"monthlyPayment\": 2377281.0231568664,\n    \"openingBalance\": -79212286.34222057,\n    \"originalLoanAmount\": -74105252.21516854,\n    \"P2PLimit\": 62209013.603729516,\n    \"p2pEnabled\": 22814877.950368613,\n    \"paybillEnabled\": false,\n    \"payoffAmount\": 53597421.822828114,\n    \"personalBankerName\": \"eu magna incididunt\",\n    \"personalBankerContact\": {\n      \"email\": \"dolor dolore ut qu\",\n      \"mobileNumber\": \"dolore qui consequat\"\n    },\n    \"phone\": -99037727.14746633,\n    \"postedBalance\": -23472012.111858293,\n    \"principalBalance\": \"in laboris cillum\",\n    \"productCode\": \"nulla mollit\",\n    \"productName\": \"occaecat aute eu minim\",\n    \"propertyAddress\": \"incididunt\",\n    \"rewardPoints\": \"do elit nostrud occaecat\",\n    \"routingNumber\": \"eiusmod dolore ullamco labore\",\n    \"statementDate\": \"aute est id in ad\",\n    \"status\": \"dolore tempor\",\n    \"swiftCode\": \"Ut nostr\",\n    \"totalBalance\": 39914233.70616695,\n    \"unbilledAmount\": -39919265.45678468,\n    \"valueAtMaturity\": -79526508.76634416,\n    \"holdAmount\": -71693112.62061822,\n    \"unclearFundsAmount\": 27544154.93812315,\n    \"averageMonthlyBalance\": 11188617.55241482,\n    \"netWithdrawableBalance\": 98163992.68105686,\n    \"totalTenure\": \"Ut officia do esse\",\n    \"remainingTenure\": \"dolore ad\",\n    \"debitAccountNumber\": \"sed incididunt aliquip\",\n    \"lateFee\": 89859539.00904465,\n    \"bounceCharge\": -88254504.7487349,\n    \"totalCharges\": -49315063.260492444,\n    \"overDueAmount\": -11317794.396656737,\n    \"cardDetails\": [\n      {\n        \"cardName\": \"esse\",\n        \"cardNumber\": \"sunt in\",\n        \"cardStatus\": \"Excepteur Ut exercitation ut in\",\n        \"cardImage\": \"aliquip enim veniam voluptate\",\n        \"cardType\": \"Excepteur\",\n        \"expDate\": \"labore pariatur velit est esse\",\n        \"displayCardStatus\": \"mollit tempor\",\n        \"primaryCard\": \"ut non nisi\",\n        \"cardChannelInfo\": {\n          \"ATM\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"offline\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"international\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"online\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"contactless\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        \"cardRestrictions\": {\n          \"countries\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"MCC\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"blockReason\": \"elit cupidatat volupt\",\n        \"nameOnCard\": \"incididunt\",\n        \"cardNetwork\": \"ad nisi sit dolore qui\",\n        \"autopay\": {\n          \"enabled\": true,\n          \"sourceAccountId\": \"mollit ea\",\n          \"paymentType\": \"ipsum et anim\",\n          \"onStatementDate\": false,\n          \"dayOfMonth\": \"tempor ut aute sit labore\"\n        },\n        \"dueAmount\": -74037848.42779979,\n        \"dueDate\": \"ad aute deserunt Ut\",\n        \"minimumPaymentDue\": -80025897.13708606,\n        \"partialPaymentPaid\": 91079672.5868693\n      },\n      {\n        \"cardName\": \"veniam Duis nostrud\",\n        \"cardNumber\": \"Lorem mollit\",\n        \"cardStatus\": \"esse Excepteur ut\",\n        \"cardImage\": \"dolore \",\n        \"cardType\": \"quis\",\n        \"expDate\": \"aliqua est\",\n        \"displayCardStatus\": \"labore nisi in\",\n        \"primaryCard\": \"sit\",\n        \"cardChannelInfo\": {\n          \"ATM\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"offline\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"international\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"online\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"contactless\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        \"cardRestrictions\": {\n          \"countries\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"MCC\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"blockReason\": \"eu commodo qui cillum anim\",\n        \"nameOnCard\": \"cupidatat culpa in\",\n        \"cardNetwork\": \"non elit ess\",\n        \"autopay\": {\n          \"enabled\": true,\n          \"sourceAccountId\": \"labore esse culpa dolore do\",\n          \"paymentType\": \"Lorem cupidatat dolore in\",\n          \"onStatementDate\": false,\n          \"dayOfMonth\": \"consectetur et pariatur\"\n        },\n        \"dueAmount\": 76856416.00176853,\n        \"dueDate\": \"minim dolor occaecat\",\n        \"minimumPaymentDue\": 93752567.80188125,\n        \"partialPaymentPaid\": -92349552.95354123\n      }\n    ],\n    \"IsCrossAccount\": false\n  },\n  {\n    \"customerId\": -31717396.340490118,\n    \"accountName\": \"sint ullamco velit id\",\n    \"accountNickname\": \"ad exercita\",\n    \"accountNumber\": \"\",\n    \"accountType\": \"tempor occaecat\",\n    \"activatedDate\": \"reprehenderit culpa esse sunt\",\n    \"availableBalance\": 89797265.8028788,\n    \"availableCash\": -63455313.83203382,\n    \"availableCashLimit\": 90225410.05210787,\n    \"availableCredit\": -71266928.69539645,\n    \"bankName\": \"veniam minim\",\n    \"branchName\": \"deserunt magna\",\n    \"cardName\": \"elit ipsum\",\n    \"cardNumber\": \"aliqua aute ad officia\",\n    \"cardStatus\": \"reprehenderit incididunt q\",\n    \"cardType\": \"mollit esse\",\n    \"creditLimit\": 53351183.65828383,\n    \"currency\": \"dolore\",\n    \"currentBalance\": -34486328.462346986,\n    \"deactivatedDate\": \"sit\",\n    \"dueAmount\": 24896501.201935098,\n    \"dueDate\": \"irure eu magna deserunt\",\n    \"earlyWithdrawalPenalty\": -56659971.054780245,\n    \"email\": \"eu enim commodo dolore in\",\n    \"expDate\": \"esse irur\",\n    \"fdType\": \"eu Duis cupidatat\",\n    \"image\": \"in\",\n    \"interestRate\": 1432722.3634173125,\n    \"internalTransferFromEnabled\": false,\n    \"internalTransferToEnabled\": false,\n    \"isPrimaryMobile\": true,\n    \"isAlternateMobileNumber\": false,\n    \"isStatement\": true,\n    \"lastDrawDate\": \"voluptate\",\n    \"loanMaturityDate\": \"in anim laborum adipisicing\",\n    \"loanOriginationDate\": \"laboris officia\",\n    \"location\": \"in sed Excepteur\",\n    \"lastUpdated\": \"in\",\n    \"maxTransactionLimit\": \"dolore cupidatat\",\n    \"maturityDate\": \"voluptate\",\n    \"minimumPaymentDue\": \"enim nisi do dolore\",\n    \"minimumBalance\": \"ut magna ea non occaecat\",\n    \"monthlyPayment\": 6155034.81610395,\n    \"openingBalance\": 64911451.7411339,\n    \"originalLoanAmount\": -28363276.086305916,\n    \"P2PLimit\": -87936809.15538502,\n    \"p2pEnabled\": 58851722.38931018,\n    \"paybillEnabled\": true,\n    \"payoffAmount\": 4130381.4015661627,\n    \"personalBankerName\": \"fugiat proident \",\n    \"personalBankerContact\": {\n      \"email\": \"est commodo deserunt consequat\",\n      \"mobileNumber\": \"anim eu occaecat\"\n    },\n    \"phone\": 69677919.89175454,\n    \"postedBalance\": -37628171.32077703,\n    \"principalBalance\": \"fugiat ex\",\n    \"productCode\": \"Excepteur reprehenderit aliqua\",\n    \"productName\": \"Ut est tempor\",\n    \"propertyAddress\": \"dolore irure ad\",\n    \"rewardPoints\": \"sint tempor consectetur\",\n    \"routingNumber\": \"nisi qui dolore est\",\n    \"statementDate\": \"esse consectetur fugiat\",\n    \"status\": \"sed nulla amet aute\",\n    \"swiftCode\": \"cupidatat sint ut\",\n    \"totalBalance\": -24943444.524668083,\n    \"unbilledAmount\": -54214147.76873337,\n    \"valueAtMaturity\": -98998342.27588715,\n    \"holdAmount\": 9862596.65422371,\n    \"unclearFundsAmount\": -97862782.7639431,\n    \"averageMonthlyBalance\": 79696663.56980759,\n    \"netWithdrawableBalance\": 12846646.328463286,\n    \"totalTenure\": \"laboris nostrud proident eiusmod labore\",\n    \"remainingTenure\": \"eiusmod in\",\n    \"debitAccountNumber\": \"voluptate\",\n    \"lateFee\": 186255.396918118,\n    \"bounceCharge\": -62239787.64780105,\n    \"totalCharges\": -49086656.06461029,\n    \"overDueAmount\": 52275972.09168109,\n    \"cardDetails\": [\n      {\n        \"cardName\": \"deserunt qui anim laborum adipisicing\",\n        \"cardNumber\": \"qui magna\",\n        \"cardStatus\": \"sed in eu elit\",\n        \"cardImage\": \"eu nostrud\",\n        \"cardType\": \"ad velit\",\n        \"expDate\": \"proident incididunt id\",\n        \"displayCardStatus\": \"velit sed esse mi\",\n        \"primaryCard\": \"irure aliqua ex\",\n        \"cardChannelInfo\": {\n          \"ATM\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"offline\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"international\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"online\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"contactless\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        \"cardRestrictions\": {\n          \"countries\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"MCC\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"blockReason\": \"consequat fugiat dolor\",\n        \"nameOnCard\": \"sunt nisi sint est sed\",\n        \"cardNetwork\": \"quis nostrud laboris nisi deserunt\",\n        \"autopay\": {\n          \"enabled\": true,\n          \"sourceAccountId\": \"labore enim\",\n          \"paymentType\": \"esse adipisicing qui\",\n          \"onStatementDate\": false,\n          \"dayOfMonth\": \"sunt in eiusmod\"\n        },\n        \"dueAmount\": -52749710.80399702,\n        \"dueDate\": \"id Duis ullamco\",\n        \"minimumPaymentDue\": -96947320.13949849,\n        \"partialPaymentPaid\": -85205963.44926497\n      },\n      {\n        \"cardName\": \"dolore dolo\",\n        \"cardNumber\": \"aute Lorem\",\n        \"cardStatus\": \"consectetur id sunt se\",\n        \"cardImage\": \"voluptate laboris\",\n        \"cardType\": \"voluptate ea nisi in\",\n        \"expDate\": \"irure consectetur quis veniam\",\n        \"displayCardStatus\": \"nostrud sed\",\n        \"primaryCard\": \"exercitation aliqua\",\n        \"cardChannelInfo\": {\n          \"ATM\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"offline\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"international\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"online\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"contactless\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        \"cardRestrictions\": {\n          \"countries\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"MCC\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"blockReason\": \"dolore ex deserunt\",\n        \"nameOnCard\": \"anim\",\n        \"cardNetwork\": \"enim cupidatat\",\n        \"autopay\": {\n          \"enabled\": false,\n          \"sourceAccountId\": \"Ut quis\",\n          \"paymentType\": \"ullamco qui\",\n          \"onStatementDate\": false,\n          \"dayOfMonth\": \"ea irure enim incididunt eu\"\n        },\n        \"dueAmount\": -99747500.11402915,\n        \"dueDate\": \"aliqua id proident\",\n        \"minimumPaymentDue\": 95439607.61083198,\n        \"partialPaymentPaid\": -39560691.17427434\n      }\n    ],\n    \"IsCrossAccount\": true\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountDetails"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"accountInfo\": [\n        {\n            \"accountType\": \"{{accountInfo_0.accountType_*string}}\",\n            \"accountNumber\": \"{{accountInfo_0.accountNumber_*number}}\",\n            \"cardNumber\": \"{{accountInfo_0.cardNumber_*number}}\"\n        },\n        {\n            \"accountType\": \"{{accountInfo_1.accountType_*string}}\",\n            \"accountNumber\": \"{{accountInfo_1.accountNumber_*number}}\",\n            \"cardNumber\": \"{{accountInfo_1.cardNumber_*number}}\"\n        }\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountDetails"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"accountInfo\": [\n        {\n            \"accountType\": \"{{accountInfo_0.accountType_*string}}\",\n            \"accountNumber\": \"{{accountInfo_0.accountNumber_*number}}\",\n            \"cardNumber\": \"{{accountInfo_0.cardNumber_*number}}\"\n        },\n        {\n            \"accountType\": \"{{accountInfo_1.accountType_*string}}\",\n            \"accountNumber\": \"{{accountInfo_1.accountNumber_*number}}\",\n            \"cardNumber\": \"{{accountInfo_1.cardNumber_*number}}\"\n        }\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for GetAccountDetails for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n        pm.test('Response has the `customerId` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`customerId`)){\n                if(pm.expect(ld.get(responseData, `customerId`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `customerId`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `accountName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accountName`)){\n                if(pm.expect(ld.get(pm.response.json(), `accountName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `accountName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `accountNickname` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accountNickname`)){\n                if(pm.expect(ld.get(pm.response.json(), `accountNickname`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `accountNickname`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `accountNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accountNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `accountNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `accountNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `accountType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accountType`)){\n                if(pm.expect(ld.get(pm.response.json(), `accountType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `accountType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `activatedDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`activatedDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `activatedDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `activatedDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `availableBalance` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`availableBalance`)){\n                if(pm.expect(ld.get(responseData, `availableBalance`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `availableBalance`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `availableCash` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`availableCash`)){\n                if(pm.expect(ld.get(responseData, `availableCash`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `availableCash`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `availableCashLimit` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`availableCashLimit`)){\n                if(pm.expect(ld.get(responseData, `availableCashLimit`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `availableCashLimit`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `availableCredit` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`availableCredit`)){\n                if(pm.expect(ld.get(responseData, `availableCredit`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `availableCredit`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `bankName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`bankName`)){\n                if(pm.expect(ld.get(pm.response.json(), `bankName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `bankName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `branchName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branchName`)){\n                if(pm.expect(ld.get(pm.response.json(), `branchName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `branchName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardName`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardStatus` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardStatus`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardStatus`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardStatus`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardType`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `creditLimit` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`creditLimit`)){\n                if(pm.expect(ld.get(responseData, `creditLimit`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `creditLimit`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `currency` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currency`)){\n                if(pm.expect(ld.get(pm.response.json(), `currency`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currency`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `currentBalance` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`currentBalance`)){\n                if(pm.expect(ld.get(responseData, `currentBalance`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `currentBalance`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `deactivatedDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`deactivatedDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `deactivatedDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `deactivatedDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `dueAmount` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`dueAmount`)){\n                if(pm.expect(ld.get(responseData, `dueAmount`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `dueAmount`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `dueDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`dueDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `dueDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `dueDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `earlyWithdrawalPenalty` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`earlyWithdrawalPenalty`)){\n                if(pm.expect(ld.get(responseData, `earlyWithdrawalPenalty`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `earlyWithdrawalPenalty`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `expDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`expDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `expDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `expDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `fdType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`fdType`)){\n                if(pm.expect(ld.get(pm.response.json(), `fdType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `fdType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `image` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n                if(pm.expect(ld.get(pm.response.json(), `image`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `interestRate` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`interestRate`)){\n                if(pm.expect(ld.get(responseData, `interestRate`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `interestRate`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `internalTransferFromEnabled` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`internalTransferFromEnabled`)){\n                if(pm.expect(ld.get(pm.response.json(), `internalTransferFromEnabled`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `internalTransferFromEnabled`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `internalTransferToEnabled` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`internalTransferToEnabled`)){\n                if(pm.expect(ld.get(pm.response.json(), `internalTransferToEnabled`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `internalTransferToEnabled`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isPrimaryMobile` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isPrimaryMobile`)){\n                if(pm.expect(ld.get(pm.response.json(), `isPrimaryMobile`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isPrimaryMobile`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isAlternateMobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isAlternateMobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isStatement` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isStatement`)){\n                if(pm.expect(ld.get(pm.response.json(), `isStatement`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isStatement`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `lastDrawDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`lastDrawDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `lastDrawDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `lastDrawDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `loanMaturityDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`loanMaturityDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `loanMaturityDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `loanMaturityDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `loanOriginationDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`loanOriginationDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `loanOriginationDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `loanOriginationDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `location` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location`)){\n                if(pm.expect(ld.get(pm.response.json(), `location`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `lastUpdated` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`lastUpdated`)){\n                if(pm.expect(ld.get(pm.response.json(), `lastUpdated`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `lastUpdated`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `maxTransactionLimit` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`maxTransactionLimit`)){\n                if(pm.expect(ld.get(pm.response.json(), `maxTransactionLimit`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `maxTransactionLimit`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `maturityDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`maturityDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `maturityDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `maturityDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `minimumPaymentDue` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`minimumPaymentDue`)){\n                if(pm.expect(ld.get(pm.response.json(), `minimumPaymentDue`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `minimumPaymentDue`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `minimumBalance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`minimumBalance`)){\n                if(pm.expect(ld.get(pm.response.json(), `minimumBalance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `minimumBalance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `monthlyPayment` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`monthlyPayment`)){\n                if(pm.expect(ld.get(responseData, `monthlyPayment`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `monthlyPayment`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `openingBalance` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`openingBalance`)){\n                if(pm.expect(ld.get(responseData, `openingBalance`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `openingBalance`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `originalLoanAmount` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`originalLoanAmount`)){\n                if(pm.expect(ld.get(responseData, `originalLoanAmount`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `originalLoanAmount`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `P2PLimit` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`P2PLimit`)){\n                if(pm.expect(ld.get(responseData, `P2PLimit`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `P2PLimit`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `p2pEnabled` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`p2pEnabled`)){\n                if(pm.expect(ld.get(responseData, `p2pEnabled`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `p2pEnabled`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `paybillEnabled` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`paybillEnabled`)){\n                if(pm.expect(ld.get(pm.response.json(), `paybillEnabled`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `paybillEnabled`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `payoffAmount` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`payoffAmount`)){\n                if(pm.expect(ld.get(responseData, `payoffAmount`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `payoffAmount`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBankerName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBankerName`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBankerName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBankerName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBankerContact` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBankerContact`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBankerContact`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBankerContact`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBankerContact.email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBankerContact.email`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBankerContact.email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBankerContact.email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBankerContact.mobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBankerContact.mobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBankerContact.mobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBankerContact.mobileNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(responseData, `phone`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `phone`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `postedBalance` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`postedBalance`)){\n                if(pm.expect(ld.get(responseData, `postedBalance`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `postedBalance`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `principalBalance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`principalBalance`)){\n                if(pm.expect(ld.get(pm.response.json(), `principalBalance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `principalBalance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `productCode` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`productCode`)){\n                if(pm.expect(ld.get(pm.response.json(), `productCode`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `productCode`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `productName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`productName`)){\n                if(pm.expect(ld.get(pm.response.json(), `productName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `productName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `propertyAddress` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`propertyAddress`)){\n                if(pm.expect(ld.get(pm.response.json(), `propertyAddress`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `propertyAddress`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `rewardPoints` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`rewardPoints`)){\n                if(pm.expect(ld.get(pm.response.json(), `rewardPoints`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `rewardPoints`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `routingNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`routingNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `routingNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `routingNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `statementDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`statementDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `statementDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `statementDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `swiftCode` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`swiftCode`)){\n                if(pm.expect(ld.get(pm.response.json(), `swiftCode`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `swiftCode`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `totalBalance` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`totalBalance`)){\n                if(pm.expect(ld.get(responseData, `totalBalance`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `totalBalance`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `unbilledAmount` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`unbilledAmount`)){\n                if(pm.expect(ld.get(responseData, `unbilledAmount`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `unbilledAmount`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `valueAtMaturity` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`valueAtMaturity`)){\n                if(pm.expect(ld.get(responseData, `valueAtMaturity`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `valueAtMaturity`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `holdAmount` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`holdAmount`)){\n                if(pm.expect(ld.get(responseData, `holdAmount`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `holdAmount`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `unclearFundsAmount` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`unclearFundsAmount`)){\n                if(pm.expect(ld.get(responseData, `unclearFundsAmount`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `unclearFundsAmount`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `averageMonthlyBalance` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`averageMonthlyBalance`)){\n                if(pm.expect(ld.get(responseData, `averageMonthlyBalance`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `averageMonthlyBalance`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `netWithdrawableBalance` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`netWithdrawableBalance`)){\n                if(pm.expect(ld.get(responseData, `netWithdrawableBalance`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `netWithdrawableBalance`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `totalTenure` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`totalTenure`)){\n                if(pm.expect(ld.get(pm.response.json(), `totalTenure`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `totalTenure`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `remainingTenure` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`remainingTenure`)){\n                if(pm.expect(ld.get(pm.response.json(), `remainingTenure`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `remainingTenure`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `debitAccountNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`debitAccountNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `debitAccountNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `debitAccountNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `lateFee` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`lateFee`)){\n                if(pm.expect(ld.get(responseData, `lateFee`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `lateFee`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `bounceCharge` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`bounceCharge`)){\n                if(pm.expect(ld.get(responseData, `bounceCharge`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `bounceCharge`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `totalCharges` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`totalCharges`)){\n                if(pm.expect(ld.get(responseData, `totalCharges`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `totalCharges`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `overDueAmount` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`overDueAmount`)){\n                if(pm.expect(ld.get(responseData, `overDueAmount`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `overDueAmount`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `cardDetails`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the cardDetails field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`cardDetails`);\n            let cardDetailsArray = ld.get(pm.response.json(), `cardDetails`, \"\");\n            for (let cardDetails_it = 0; cardDetails_it < cardDetailsArray.length; cardDetails_it++) {\n                let iterator = cardDetails_it;\n                \t\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardName' has 'cardName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardNumber' has 'cardNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardStatus' has 'cardStatus' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardStatus`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardStatus`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardImage' has 'cardImage' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardImage`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardImage`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardType' has 'cardType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].expDate' has 'expDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].expDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].expDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].displayCardStatus' has 'displayCardStatus' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].displayCardStatus`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].displayCardStatus`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].primaryCard' has 'primaryCard' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].primaryCard`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].primaryCard`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardChannelInfo' has 'cardChannelInfo' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardChannelInfo`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardChannelInfo`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardChannelInfo.ATM' has 'ATM' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardChannelInfo.ATM`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardChannelInfo.ATM`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardChannelInfo.ATM.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardChannelInfo.ATM.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardChannelInfo.ATM.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'limit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `cardDetails[${cardDetails_it}].cardChannelInfo.ATM.limit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`cardDetails[${cardDetails_it}].cardChannelInfo.ATM.limit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardChannelInfo.offline' has 'offline' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardChannelInfo.offline`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardChannelInfo.offline`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardChannelInfo.offline.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardChannelInfo.offline.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardChannelInfo.offline.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'limit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `cardDetails[${cardDetails_it}].cardChannelInfo.offline.limit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`cardDetails[${cardDetails_it}].cardChannelInfo.offline.limit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardChannelInfo.international' has 'international' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardChannelInfo.international`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardChannelInfo.international`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardChannelInfo.international.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardChannelInfo.international.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardChannelInfo.international.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'limit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `cardDetails[${cardDetails_it}].cardChannelInfo.international.limit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`cardDetails[${cardDetails_it}].cardChannelInfo.international.limit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardChannelInfo.online' has 'online' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardChannelInfo.online`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardChannelInfo.online`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardChannelInfo.online.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardChannelInfo.online.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardChannelInfo.online.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'limit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `cardDetails[${cardDetails_it}].cardChannelInfo.online.limit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`cardDetails[${cardDetails_it}].cardChannelInfo.online.limit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardChannelInfo.contactless' has 'contactless' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardChannelInfo.contactless`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardChannelInfo.contactless`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardChannelInfo.contactless.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardChannelInfo.contactless.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardChannelInfo.contactless.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'limit' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `cardDetails[${cardDetails_it}].cardChannelInfo.contactless.limit`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`cardDetails[${cardDetails_it}].cardChannelInfo.contactless.limit`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardRestrictions' has 'cardRestrictions' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardRestrictions`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardRestrictions`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray' has 'countries' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardRestrictions.countries`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardRestrictions.countries`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the cardDetails[${cardDetails_it}].cardRestrictions.countries field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`cardDetails[${cardDetails_it}].cardRestrictions.countries`);\n            let countriesArray = ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardRestrictions.countries`, \"\");\n            for (let countries_it = 0; countries_it < countriesArray.length; countries_it++) {\n                let iterator = countries_it;\n                \t\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardRestrictions.countries[${countries_it}].countrycode' has 'countrycode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardRestrictions.countries[${countries_it}].countrycode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardRestrictions.countries[${countries_it}].countrycode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'cardDetailsArray' has 'MCC' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardRestrictions.MCC`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardRestrictions.MCC`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the cardDetails[${cardDetails_it}].cardRestrictions.MCC field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`cardDetails[${cardDetails_it}].cardRestrictions.MCC`);\n            let MCCArray = ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardRestrictions.MCC`, \"\");\n            for (let MCC_it = 0; MCC_it < MCCArray.length; MCC_it++) {\n                let iterator = MCC_it;\n                \t\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].name`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].description' has 'description' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].description`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].description`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].blockReason' has 'blockReason' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].blockReason`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].blockReason`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].nameOnCard' has 'nameOnCard' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].nameOnCard`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].nameOnCard`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].cardNetwork' has 'cardNetwork' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].cardNetwork`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].cardNetwork`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].autopay' has 'autopay' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].autopay`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].autopay`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].autopay.enabled' has 'enabled' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].autopay.enabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].autopay.enabled`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].autopay.sourceAccountId' has 'sourceAccountId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].autopay.sourceAccountId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].autopay.sourceAccountId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].autopay.paymentType' has 'paymentType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].autopay.paymentType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].autopay.paymentType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].autopay.onStatementDate' has 'onStatementDate' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].autopay.onStatementDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].autopay.onStatementDate`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].autopay.dayOfMonth' has 'dayOfMonth' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].autopay.dayOfMonth`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].autopay.dayOfMonth`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'dueAmount' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `cardDetails[${cardDetails_it}].dueAmount`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`cardDetails[${cardDetails_it}].dueAmount`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'cardDetails[${cardDetails_it}].dueDate' has 'dueDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `cardDetails[${cardDetails_it}].dueDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`cardDetails[${cardDetails_it}].dueDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'minimumPaymentDue' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `cardDetails[${cardDetails_it}].minimumPaymentDue`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`cardDetails[${cardDetails_it}].minimumPaymentDue`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'cardDetailsArray'has 'partialPaymentPaid' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `cardDetails[${cardDetails_it}].partialPaymentPaid`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`cardDetails[${cardDetails_it}].partialPaymentPaid`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n            }\n\n        })\n\n        pm.test('Response has the `IsCrossAccount` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`IsCrossAccount`)){\n                if(pm.expect(ld.get(pm.response.json(), `IsCrossAccount`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `IsCrossAccount`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "to get the limits of customer accounts",
      "request": {
        "name": "to get the limits of customer accounts",
        "description": {
          "content": "fetch customer account limits",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetAccountsLimit"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountsLimit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"accountName\": \"sunt qui enim non\",\n    \"accountNickname\": \"esse elit pariatur cill\",\n    \"accountNumber\": \"dolor labore nostrud et\",\n    \"accountType\": \"ea ut\",\n    \"balance\": \"nisi in sint\",\n    \"cardName\": \"laboris consectetur\",\n    \"cardNumber\": \"incididunt pariatur sunt\",\n    \"currency\": \"aliquip\",\n    \"customerId\": 62039142.815512,\n    \"perTxn\": 29240917.812559262,\n    \"status\": \"amet ut tempor sunt\",\n    \"availableCashLimit\": 5981047.796429545,\n    \"creditLimit\": -78867044.12637267,\n    \"availableCredit\": -58327969.80429959,\n    \"purchase\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": -21057955.4766507,\n          \"maximum\": -85579510.0879539,\n          \"spent\": 29678270.0753631\n        },\n        \"daily\": {\n          \"available\": 48616736.30834472,\n          \"maximum\": -36724339.44531788,\n          \"spent\": 2228748.839461893\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": -56644146.10213035,\n          \"maximum\": 92994065.37815341,\n          \"usedup\": -1917721.9585927278\n        },\n        \"daily\": {\n          \"available\": -54094724.103041835,\n          \"maximum\": 52767964.631269544,\n          \"usedup\": -18634792.20732218\n        }\n      }\n    },\n    \"txnsPerDay\": {\n      \"available\": 80260602.06550655,\n      \"maximum\": 84533095.5107558,\n      \"usedup\": -69098601.47357053,\n      \"amountperday\": 11479696.775284335\n    },\n    \"withdrawal\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": -92966634.29534666,\n          \"maximum\": 46684056.69655958,\n          \"spent\": -27483355.428025335\n        },\n        \"daily\": {\n          \"available\": -33348469.09014497,\n          \"maximum\": -34811738.38492157,\n          \"spent\": -98593888.79695699\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": -42952198.42996922,\n          \"maximum\": 32636524.023267508,\n          \"usedup\": -49018103.014420375\n        },\n        \"daily\": {\n          \"available\": -62743550.70192494,\n          \"maximum\": -16418136.503748477,\n          \"usedup\": 71375288.91379085\n        }\n      }\n    }\n  },\n  {\n    \"accountName\": \"dolore in veniam laboris tempor\",\n    \"accountNickname\": \"in dolore sit\",\n    \"accountNumber\": \"non fugiat\",\n    \"accountType\": \"do sed enim aliquip commodo\",\n    \"balance\": \"tempor id dolore consequat\",\n    \"cardName\": \"est in Ut non\",\n    \"cardNumber\": \"sunt in esse\",\n    \"currency\": \"pariatu\",\n    \"customerId\": 18367564.248183712,\n    \"perTxn\": -74005127.51653117,\n    \"status\": \"et\",\n    \"availableCashLimit\": 95518262.08579382,\n    \"creditLimit\": 4093344.2472453713,\n    \"availableCredit\": 5338962.866949484,\n    \"purchase\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": -16431478.390017867,\n          \"maximum\": 24027778.05768101,\n          \"spent\": 28202459.900309667\n        },\n        \"daily\": {\n          \"available\": 61673468.385189,\n          \"maximum\": -23365332.179476276,\n          \"spent\": -53872159.262377605\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": -84391029.28637032,\n          \"maximum\": -84132891.11665691,\n          \"usedup\": 46137146.533248335\n        },\n        \"daily\": {\n          \"available\": -42703467.64525201,\n          \"maximum\": -68850742.07268897,\n          \"usedup\": 58929444.28302398\n        }\n      }\n    },\n    \"txnsPerDay\": {\n      \"available\": -22645948.739568397,\n      \"maximum\": 80341370.15215692,\n      \"usedup\": -60963697.062191755,\n      \"amountperday\": 40421276.70144549\n    },\n    \"withdrawal\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": -7032999.319988638,\n          \"maximum\": -60182017.89212405,\n          \"spent\": -3565841.90804781\n        },\n        \"daily\": {\n          \"available\": -3614526.81712912,\n          \"maximum\": 56696772.429857045,\n          \"spent\": -95731692.42982535\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": -44489960.165609024,\n          \"maximum\": 74259565.1796714,\n          \"usedup\": -82824973.67459087\n        },\n        \"daily\": {\n          \"available\": -60883174.35321322,\n          \"maximum\": 76305367.44596052,\n          \"usedup\": -98694463.23278001\n        }\n      }\n    }\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountsLimit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountsLimit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for GetAccountsLimit for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n        pm.test('Response has the `accountName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accountName`)){\n                if(pm.expect(ld.get(pm.response.json(), `accountName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `accountName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `accountNickname` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accountNickname`)){\n                if(pm.expect(ld.get(pm.response.json(), `accountNickname`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `accountNickname`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `accountNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accountNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `accountNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `accountNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `accountType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accountType`)){\n                if(pm.expect(ld.get(pm.response.json(), `accountType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `accountType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `balance` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`balance`)){\n                if(pm.expect(ld.get(pm.response.json(), `balance`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `balance`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardName`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `currency` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currency`)){\n                if(pm.expect(ld.get(pm.response.json(), `currency`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currency`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customerId` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`customerId`)){\n                if(pm.expect(ld.get(responseData, `customerId`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `customerId`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `perTxn` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`perTxn`)){\n                if(pm.expect(ld.get(responseData, `perTxn`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `perTxn`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `availableCashLimit` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`availableCashLimit`)){\n                if(pm.expect(ld.get(responseData, `availableCashLimit`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `availableCashLimit`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `creditLimit` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`creditLimit`)){\n                if(pm.expect(ld.get(responseData, `creditLimit`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `creditLimit`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `availableCredit` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`availableCredit`)){\n                if(pm.expect(ld.get(responseData, `availableCredit`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `availableCredit`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase.limits` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase.limits`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase.limits`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase.limits`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase.limits.monthly` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase.limits.monthly`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase.limits.monthly`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase.limits.monthly`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase.limits.daily` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase.limits.daily`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase.limits.daily`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase.limits.daily`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase.transactions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase.transactions`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase.transactions`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase.transactions`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase.transactions.monthly` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase.transactions.monthly`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase.transactions.monthly`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase.transactions.monthly`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase.transactions.daily` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase.transactions.daily`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase.transactions.daily`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase.transactions.daily`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `txnsPerDay` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`txnsPerDay`)){\n                if(pm.expect(ld.get(pm.response.json(), `txnsPerDay`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `txnsPerDay`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `txnsPerDay.available` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`txnsPerDay.available`)){\n                if(pm.expect(ld.get(responseData, `txnsPerDay.available`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `txnsPerDay.available`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `txnsPerDay.maximum` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`txnsPerDay.maximum`)){\n                if(pm.expect(ld.get(responseData, `txnsPerDay.maximum`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `txnsPerDay.maximum`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `txnsPerDay.usedup` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`txnsPerDay.usedup`)){\n                if(pm.expect(ld.get(responseData, `txnsPerDay.usedup`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `txnsPerDay.usedup`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `txnsPerDay.amountperday` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`txnsPerDay.amountperday`)){\n                if(pm.expect(ld.get(responseData, `txnsPerDay.amountperday`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `txnsPerDay.amountperday`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal.limits` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal.limits`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal.limits`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal.limits`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal.limits.monthly` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal.limits.monthly`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal.limits.monthly`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal.limits.monthly`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal.limits.daily` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal.limits.daily`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal.limits.daily`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal.limits.daily`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal.transactions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal.transactions`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal.transactions`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal.transactions`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal.transactions.monthly` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal.transactions.monthly`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal.transactions.monthly`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal.transactions.monthly`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal.transactions.daily` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal.transactions.daily`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal.transactions.daily`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal.transactions.daily`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "to get the limits of customer accounts",
      "request": {
        "name": "to get the limits of customer accounts",
        "description": {
          "content": "fetch customer account limits",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetAccountSpecificLimitsInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"accountNumber\": [\n        \"{{accountNumber_0_*string}}\",\n        \"{{accountNumber_1_*string}}\"\n    ],\n    \"cardNumber\": [\n        \"{{cardNumber_0_*string}}\",\n        \"{{cardNumber_1_*string}}\"\n    ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountSpecificLimitsInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"accountNumber\": [\n        \"{{accountNumber_0_*number}}\"\n    ],\n    \"cardNumber\": [\n        \"{{cardNumber_0_*string}}\",\n        \"{{cardNumber_1_*string}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"customerId\": 1045300,\n    \"currency\": \"USD\",\n    \"withdrawal\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": 5000,\n          \"maximum\": 8000,\n          \"spent\": 3000\n        },\n        \"daily\": {\n          \"available\": 500,\n          \"maximum\": 800,\n          \"spent\": 300\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": 20,\n          \"maximum\": 30,\n          \"usedup\": 10\n        },\n        \"daily\": {\n          \"available\": 5,\n          \"maximum\": 8,\n          \"usedup\": 3\n        }\n      }\n    },\n    \"purchase\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": 5000,\n          \"maximum\": 8000,\n          \"spent\": 3000\n        },\n        \"daily\": {\n          \"available\": 500,\n          \"maximum\": 800,\n          \"spent\": 300\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": 20,\n          \"maximum\": 30,\n          \"usedup\": 10\n        },\n        \"daily\": {\n          \"available\": 5,\n          \"maximum\": 8,\n          \"usedup\": 3\n        }\n      }\n    },\n    \"txnsPerDay\": {\n      \"available\": 5,\n      \"maximum\": 8,\n      \"usedup\": 3,\n      \"amount\": 500\n    },\n    \"perTxn\": 500\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountSpecificLimitsInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"accountNumber\": [\n        \"{{accountNumber_0_*number}}\"\n    ],\n    \"cardNumber\": [\n        \"{{cardNumber_0_*string}}\",\n        \"{{cardNumber_1_*string}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountSpecificLimitsInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"accountNumber\": [\n        \"{{accountNumber_0_*number}}\"\n    ],\n    \"cardNumber\": [\n        \"{{cardNumber_0_*string}}\",\n        \"{{cardNumber_1_*string}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for GetAccountSpecificLimitsInfo for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n        pm.test('Response has the `currency` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currency`)){\n                if(pm.expect(ld.get(pm.response.json(), `currency`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currency`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customerId` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`customerId`)){\n                if(pm.expect(ld.get(responseData, `customerId`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `customerId`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `perTxn` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`perTxn`)){\n                if(pm.expect(ld.get(responseData, `perTxn`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `perTxn`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase.limits` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase.limits`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase.limits`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase.limits`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase.limits.monthly` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase.limits.monthly`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase.limits.monthly`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase.limits.monthly`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase.limits.daily` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase.limits.daily`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase.limits.daily`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase.limits.daily`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase.transactions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase.transactions`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase.transactions`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase.transactions`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase.transactions.monthly` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase.transactions.monthly`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase.transactions.monthly`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase.transactions.monthly`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `purchase.transactions.daily` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`purchase.transactions.daily`)){\n                if(pm.expect(ld.get(pm.response.json(), `purchase.transactions.daily`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `purchase.transactions.daily`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `txnsPerDay` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`txnsPerDay`)){\n                if(pm.expect(ld.get(pm.response.json(), `txnsPerDay`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `txnsPerDay`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `txnsPerDay.available` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`txnsPerDay.available`)){\n                if(pm.expect(ld.get(responseData, `txnsPerDay.available`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `txnsPerDay.available`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `txnsPerDay.maximum` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`txnsPerDay.maximum`)){\n                if(pm.expect(ld.get(responseData, `txnsPerDay.maximum`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `txnsPerDay.maximum`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `txnsPerDay.usedup` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`txnsPerDay.usedup`)){\n                if(pm.expect(ld.get(responseData, `txnsPerDay.usedup`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `txnsPerDay.usedup`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `txnsPerDay.amount` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`txnsPerDay.amount`)){\n                if(pm.expect(ld.get(responseData, `txnsPerDay.amount`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `txnsPerDay.amount`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal.limits` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal.limits`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal.limits`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal.limits`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal.limits.monthly` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal.limits.monthly`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal.limits.monthly`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal.limits.monthly`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal.limits.daily` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal.limits.daily`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal.limits.daily`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal.limits.daily`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal.transactions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal.transactions`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal.transactions`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal.transactions`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal.transactions.monthly` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal.transactions.monthly`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal.transactions.monthly`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal.transactions.monthly`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `withdrawal.transactions.daily` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`withdrawal.transactions.daily`)){\n                if(pm.expect(ld.get(pm.response.json(), `withdrawal.transactions.daily`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `withdrawal.transactions.daily`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "UpdateAccountInfo",
      "request": {
        "name": "UpdateAccountInfo",
        "description": {
          "content": "Update customer account details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "UpdateAccountInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountNumber\": \"{{accountNumber_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"email\": \"{{email_*string}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber_*number}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber_*boolean}}\",\n    \"phone\": \"{{phone_*number}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber_*boolean}}\",\n    \"location\": \"{{location_*string}}\",\n    \"isStatement\": \"{{isStatement_*boolean}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber_*number}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"email\": \"{{email_*string}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber_*number}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber_*boolean}}\",\n    \"phone\": \"{{phone_*number}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber_*boolean}}\",\n    \"location\": \"{{location_*string}}\",\n    \"isStatement\": \"{{isStatement_*boolean}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber_*number}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"email\": \"{{email_*string}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber_*number}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber_*boolean}}\",\n    \"phone\": \"{{phone_*number}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber_*boolean}}\",\n    \"location\": \"{{location_*string}}\",\n    \"isStatement\": \"{{isStatement_*boolean}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber_*number}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"email\": \"{{email_*string}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber_*number}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber_*boolean}}\",\n    \"phone\": \"{{phone_*number}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber_*boolean}}\",\n    \"location\": \"{{location_*string}}\",\n    \"isStatement\": \"{{isStatement_*boolean}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for UpdateAccountInfo for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "GetCustomerInfo",
      "request": {
        "name": "GetCustomerInfo",
        "description": {
          "content": "fetch customer information",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetCustomerInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"alternatePhoneNumber\": -33706094.04236875,\n  \"customerId\": \"adipisi\",\n  \"email\": \"reprehenderit quis esse ut adipisicing\",\n  \"identificationNumber\": 76855879.10802299,\n  \"identificationType\": \"magna ipsum\",\n  \"image\": \"Duis nisi exercitation ullamco occaecat\",\n  \"isAlternateMobileNumber\": false,\n  \"isPrimaryMobileNumber\": false,\n  \"location\": \"qui ea occaecat veniam\",\n  \"name\": \"dolore\",\n  \"firstName\": \"sed\",\n  \"lastName\": \"consequat do\",\n  \"personalBanker\": {\n    \"name\": \"consequat est dolore\",\n    \"email\": \"qui deserunt cupidatat in magna\",\n    \"mobileNumber\": \"laborum amet commodo fugiat\"\n  },\n  \"phone\": -94251041.78888617,\n  \"securityQuestions\": [\n    \"sunt laborum\",\n    \"sunt dolor proident\"\n  ],\n  \"segmentId\": -77186768.40268058\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for GetCustomerInfo for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `alternatePhoneNumber` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`alternatePhoneNumber`)){\n                if(pm.expect(ld.get(responseData, `alternatePhoneNumber`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `alternatePhoneNumber`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customerId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customerId`)){\n                if(pm.expect(ld.get(pm.response.json(), `customerId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customerId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `identificationNumber` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`identificationNumber`)){\n                if(pm.expect(ld.get(responseData, `identificationNumber`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `identificationNumber`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `identificationType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`identificationType`)){\n                if(pm.expect(ld.get(pm.response.json(), `identificationType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `identificationType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `image` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n                if(pm.expect(ld.get(pm.response.json(), `image`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isAlternateMobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isAlternateMobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isPrimaryMobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isPrimaryMobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `isPrimaryMobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isPrimaryMobileNumber`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `location` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location`)){\n                if(pm.expect(ld.get(pm.response.json(), `location`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n                if(pm.expect(ld.get(pm.response.json(), `name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `firstName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n                if(pm.expect(ld.get(pm.response.json(), `firstName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `lastName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n                if(pm.expect(ld.get(pm.response.json(), `lastName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.name`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.email`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.mobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.mobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.mobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.mobileNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(responseData, `phone`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `phone`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `securityQuestions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`securityQuestions`)){\n                if(pm.expect(ld.get(pm.response.json(), `securityQuestions`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `securityQuestions`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `segmentId` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`segmentId`)){\n                if(pm.expect(ld.get(responseData, `segmentId`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `segmentId`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "UpdateCustomerInfo",
      "request": {
        "name": "UpdateCustomerInfo",
        "description": {
          "content": "Update customer information",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "UpdateCustomerInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"email\": \"{{email_*string}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber_*number}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber_*boolean}}\",\n    \"phone\": \"{{phone_*number}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber_*boolean}}\",\n    \"location\": \"{{location_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"email\": \"{{email_*string}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber_*number}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber_*boolean}}\",\n    \"phone\": \"{{phone_*number}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber_*boolean}}\",\n    \"location\": \"{{location_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"email\": \"{{email_*string}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber_*number}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber_*boolean}}\",\n    \"phone\": \"{{phone_*number}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber_*boolean}}\",\n    \"location\": \"{{location_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"email\": \"{{email_*string}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber_*number}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber_*boolean}}\",\n    \"phone\": \"{{phone_*number}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber_*boolean}}\",\n    \"location\": \"{{location_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for UpdateCustomerInfo for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "GetTransactions",
      "request": {
        "name": "GetTransactions",
        "description": {
          "content": "Fetch transactions information",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetTransactions"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountNumber\": [\n        \"{{accountNumber_0_*string}}\",\n        \"{{accountNumber_1_*string}}\"\n    ],\n    \"customerId\": \"{{customerId_*string}}\",\n    \"numOfTransactions\": \"{{numOfTransactions_*number}}\",\n    \"status\": \"{{status_*string}}\",\n    \"startDate\": \"{{startDate_*date}}\",\n    \"endDate\": \"{{endDate_*date}}\",\n    \"sort\": {\n        \"type\": \"{{sort.type_*string}}\",\n        \"value\": \"{{sort.value_*string}}\"\n    },\n    \"transactionAmount\": {\n        \"amount1\": \"{{transactionAmount.amount1_*number}}\",\n        \"amount\": {},\n        \"currency\": \"{{transactionAmount.currency_*string}}\"\n    },\n    \"category\": [\n        {\n            \"codeType\": \"{{category_0.codeType_*string}}\",\n            \"value\": [\n                \"{{category_0.value_0_*string}}\",\n                \"{{category_0.value_1_*string}}\"\n            ],\n            \"source\": \"{{category_0.source_*string}}\"\n        },\n        {\n            \"codeType\": \"{{category_1.codeType_*string}}\",\n            \"value\": [\n                \"{{category_1.value_0_*string}}\",\n                \"{{category_1.value_1_*string}}\"\n            ],\n            \"source\": \"{{category_1.source_*string}}\"\n        }\n    ],\n    \"debitOrCredit\": \"{{debitOrCredit_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetTransactions"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": [\n        \"{{accountNumber_0_*string}}\",\n        \"{{accountNumber_1_*string}}\"\n    ],\n    \"customerId\": \"{{customerId_*string}}\",\n    \"numOfTransactions\": \"{{numOfTransactions_*number}}\",\n    \"status\": \"{{status_*string}}\",\n    \"startDate\": \"{{startDate_*date}}\",\n    \"endDate\": \"{{endDate_*date}}\",\n    \"sort\": {\n        \"type\": \"{{sort.type_*string}}\",\n        \"value\": \"{{sort.value_*string}}\"\n    },\n    \"transactionAmount\": {\n        \"amount1\": \"{{transactionAmount.amount1_*number}}\",\n        \"amount\": {},\n        \"currency\": \"{{transactionAmount.currency_*string}}\"\n    },\n    \"category\": [\n        {\n            \"codeType\": \"{{category_0.codeType_*string}}\",\n            \"value\": [\n                \"{{category_0.value_0_*string}}\",\n                \"{{category_0.value_1_*string}}\"\n            ],\n            \"source\": \"{{category_0.source_*string}}\"\n        },\n        {\n            \"codeType\": \"{{category_1.codeType_*string}}\",\n            \"value\": [\n                \"{{category_1.value_0_*string}}\",\n                \"{{category_1.value_1_*string}}\"\n            ],\n            \"source\": \"{{category_1.source_*string}}\"\n        }\n    ],\n    \"debitOrCredit\": \"{{debitOrCredit_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"customerId\": -75242976.60990182,\n    \"transactionId\": -37705309.77479672,\n    \"accountNumber\": \"irure Excepteur dolor dolor cillum\",\n    \"timestamp\": -6032162.514355436,\n    \"amount\": -38655295.07254628,\n    \"currency\": \"nostrud eu velit anim\",\n    \"debitOrCredit\": \"est fugiat tempor\",\n    \"description\": \"nostrud non id do\",\n    \"paymentMode\": \"Lorem dolor ea\",\n    \"DBANames\": \"proident tempor esse\",\n    \"status\": \"do sed ex inc\",\n    \"closingBalance\": -46136097.6120353,\n    \"transacitonType\": \"officia dolore elit\",\n    \"ACHCode\": \"ut qui\",\n    \"MCCCode\": \"Ut Excepteur aliquip sit esse\",\n    \"SICCode\": \"Ut irure\",\n    \"name\": \"cillum laborum\",\n    \"address\": \"ut in tempor\",\n    \"street\": \"officia anim magna\",\n    \"city\": \"sint ut ipsum mollit elit\",\n    \"state\": \"ex ullamco\",\n    \"zip\": \"velit mollit sed\",\n    \"country\": \"tempor aute\",\n    \"phoneNumber\": -40546555.09071803,\n    \"metaInfo\": [\n      {\n        \"name\": \"string\",\n        \"value\": \"string\"\n      },\n      {\n        \"name\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  },\n  {\n    \"customerId\": 13447027.527009279,\n    \"transactionId\": -67373861.54985124,\n    \"accountNumber\": \"ad velit iru\",\n    \"timestamp\": -40972312.96287247,\n    \"amount\": 58179676.0224587,\n    \"currency\": \"do dolor ullamco\",\n    \"debitOrCredit\": \"id velit anim nulla\",\n    \"description\": \"laboris\",\n    \"paymentMode\": \"elit dolor esse\",\n    \"DBANames\": \"quis fugiat sint\",\n    \"status\": \"eu laboris in amet\",\n    \"closingBalance\": -5131074.887376785,\n    \"transacitonType\": \"non in do esse sit\",\n    \"ACHCode\": \"amet no\",\n    \"MCCCode\": \"adipisicing sit aute\",\n    \"SICCode\": \"id proident Ut\",\n    \"name\": \"cupidatat \",\n    \"address\": \"id anim paria\",\n    \"street\": \"deserunt exercitation proident\",\n    \"city\": \"quis dolor\",\n    \"state\": \"ex ut elit\",\n    \"zip\": \"voluptate dolor occaecat adipisicing\",\n    \"country\": \"non consequat commodo\",\n    \"phoneNumber\": -71459640.57297678,\n    \"metaInfo\": [\n      {\n        \"name\": \"string\",\n        \"value\": \"string\"\n      },\n      {\n        \"name\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for GetTransactions for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n        pm.test('Response has the `customerId` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`customerId`)){\n                if(pm.expect(ld.get(responseData, `customerId`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `customerId`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `transactionId` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`transactionId`)){\n                if(pm.expect(ld.get(responseData, `transactionId`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `transactionId`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `accountNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accountNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `accountNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `accountNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `timestamp` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`timestamp`)){\n                if(pm.expect(ld.get(responseData, `timestamp`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `timestamp`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `amount` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`amount`)){\n                if(pm.expect(ld.get(responseData, `amount`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `amount`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `currency` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`currency`)){\n                if(pm.expect(ld.get(pm.response.json(), `currency`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `currency`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `debitOrCredit` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`debitOrCredit`)){\n                if(pm.expect(ld.get(pm.response.json(), `debitOrCredit`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `debitOrCredit`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `description` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`description`)){\n                if(pm.expect(ld.get(pm.response.json(), `description`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `description`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `paymentMode` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`paymentMode`)){\n                if(pm.expect(ld.get(pm.response.json(), `paymentMode`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `paymentMode`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `DBANames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`DBANames`)){\n                if(pm.expect(ld.get(pm.response.json(), `DBANames`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `DBANames`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `closingBalance` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`closingBalance`)){\n                if(pm.expect(ld.get(responseData, `closingBalance`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `closingBalance`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `transacitonType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`transacitonType`)){\n                if(pm.expect(ld.get(pm.response.json(), `transacitonType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `transacitonType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `ACHCode` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`ACHCode`)){\n                if(pm.expect(ld.get(pm.response.json(), `ACHCode`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `ACHCode`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `MCCCode` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`MCCCode`)){\n                if(pm.expect(ld.get(pm.response.json(), `MCCCode`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `MCCCode`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `SICCode` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`SICCode`)){\n                if(pm.expect(ld.get(pm.response.json(), `SICCode`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `SICCode`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n                if(pm.expect(ld.get(pm.response.json(), `name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `address` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`address`)){\n                if(pm.expect(ld.get(pm.response.json(), `address`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `address`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `street` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`street`)){\n                if(pm.expect(ld.get(pm.response.json(), `street`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `street`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `city` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`city`)){\n                if(pm.expect(ld.get(pm.response.json(), `city`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `city`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `state` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`state`)){\n                if(pm.expect(ld.get(pm.response.json(), `state`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `state`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `zip` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`zip`)){\n                if(pm.expect(ld.get(pm.response.json(), `zip`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `zip`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `country` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`country`)){\n                if(pm.expect(ld.get(pm.response.json(), `country`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `country`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `phoneNumber` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`phoneNumber`)){\n                if(pm.expect(ld.get(responseData, `phoneNumber`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `phoneNumber`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metaInfo` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metaInfo`)){\n                if(pm.expect(ld.get(pm.response.json(), `metaInfo`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `metaInfo`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the metaInfo field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`metaInfo`);\n            let metaInfoArray = ld.get(pm.response.json(), `metaInfo`, \"\");\n            for (let metaInfo_it = 0; metaInfo_it < metaInfoArray.length; metaInfo_it++) {\n                let iterator = metaInfo_it;\n                \t\n        pm.test(`${iterator} element of array 'metaInfo[${metaInfo_it}].name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `metaInfo[${metaInfo_it}].name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`metaInfo[${metaInfo_it}].name`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'metaInfo[${metaInfo_it}].value' has 'value' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `metaInfo[${metaInfo_it}].value`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`metaInfo[${metaInfo_it}].value`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n          });\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "TransferFunds",
      "request": {
        "name": "TransferFunds",
        "description": {
          "content": "Transfers funds between accounts",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "TransferFunds"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"amount\": \"{{amount_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"date\": \"{{date_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*string}}\",\n    \"targetAccountId\": \"{{targetAccountId_*string}}\",\n    \"description\": \"{{description_*string}}\",\n    \"TransactionType\": \"{{TransactionType_*string}}\",\n    \"PaymentType\": \"{{PaymentType_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "Transaction success",
          "originalRequest": {
            "url": {
              "path": [
                "TransferFunds"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"date\": \"{{date_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\",\n    \"targetAccountId\": \"{{targetAccountId_*number}}\",\n    \"description\": \"{{description_*string}}\",\n    \"TransactionType\": \"{{TransactionType_*number}}\",\n    \"PaymentType\": \"{{PaymentType_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "TransferFunds"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"date\": \"{{date_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\",\n    \"targetAccountId\": \"{{targetAccountId_*number}}\",\n    \"description\": \"{{description_*string}}\",\n    \"TransactionType\": \"{{TransactionType_*number}}\",\n    \"PaymentType\": \"{{PaymentType_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "TransferFunds"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"date\": \"{{date_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\",\n    \"targetAccountId\": \"{{targetAccountId_*number}}\",\n    \"description\": \"{{description_*string}}\",\n    \"TransactionType\": \"{{TransactionType_*number}}\",\n    \"PaymentType\": \"{{PaymentType_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for TransferFunds for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Transaction success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "GetScheduleTransfers",
      "request": {
        "name": "GetScheduleTransfers",
        "description": {
          "content": "Fetches the scheduled transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetScheduleTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"status\": \"{{status_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "schedule transfer list response",
          "originalRequest": {
            "url": {
              "path": [
                "GetScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"status\": \"{{status_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"Type\": \"et\",\n    \"CustomerId\": 18352281.859954685,\n    \"Amount\": 48333610.94720602,\n    \"SourceAccountNumber\": \"Duis consequat in irure\",\n    \"TargetAccountNumber\": \"enim velit\",\n    \"DueDate\": \"anim sed\",\n    \"InvoiceNumber\": -58740146.04706823,\n    \"Currency\": \"esse ex laboris ad\",\n    \"Status\": \"commodo dolor Lor\",\n    \"ScheduledDate\": 11505050.802675277,\n    \"NextScheduleDate\": 38837526.09567806,\n    \"id\": \"eiusmod sit labore\"\n  },\n  {\n    \"Type\": \"ipsum\",\n    \"CustomerId\": 69103244.5293046,\n    \"Amount\": 37010605.145332724,\n    \"SourceAccountNumber\": \"aliquip\",\n    \"TargetAccountNumber\": \"ma\",\n    \"DueDate\": \"proident\",\n    \"InvoiceNumber\": -79474869.00529075,\n    \"Currency\": \"cupidatat in nostrud in\",\n    \"Status\": \"nostrud\",\n    \"ScheduledDate\": 89183305.705102,\n    \"NextScheduleDate\": 63144612.98093009,\n    \"id\": \"officia\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"status\": \"{{status_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"status\": \"{{status_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for GetScheduleTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"schedule transfer list response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n        pm.test('Response has the `Type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`Type`)){\n                if(pm.expect(ld.get(pm.response.json(), `Type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `Type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `CustomerId` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`CustomerId`)){\n                if(pm.expect(ld.get(responseData, `CustomerId`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `CustomerId`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `Amount` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`Amount`)){\n                if(pm.expect(ld.get(responseData, `Amount`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `Amount`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `SourceAccountNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`SourceAccountNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `SourceAccountNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `SourceAccountNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `TargetAccountNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`TargetAccountNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `TargetAccountNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `TargetAccountNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `DueDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`DueDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `DueDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `DueDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `InvoiceNumber` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`InvoiceNumber`)){\n                if(pm.expect(ld.get(responseData, `InvoiceNumber`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `InvoiceNumber`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `Currency` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`Currency`)){\n                if(pm.expect(ld.get(pm.response.json(), `Currency`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `Currency`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `Status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`Status`)){\n                if(pm.expect(ld.get(pm.response.json(), `Status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `Status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `ScheduledDate` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`ScheduledDate`)){\n                if(pm.expect(ld.get(responseData, `ScheduledDate`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `ScheduledDate`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `NextScheduleDate` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`NextScheduleDate`)){\n                if(pm.expect(ld.get(responseData, `NextScheduleDate`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `NextScheduleDate`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "UpdateScheduleTransfers",
      "request": {
        "name": "UpdateScheduleTransfers",
        "description": {
          "content": "Update the scheduled transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "UpdateScheduleTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*string}}\",\n    \"amount\": \"{{amount_*number}}\",\n    \"scheduledDate\": \"{{scheduledDate_*number}}\",\n    \"targetAccountId\": \"{{targetAccountId_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "Scheduled transfer updated successfully",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"amount\": \"{{amount_*number}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"amount\": \"{{amount_*number}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"amount\": \"{{amount_*number}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for UpdateScheduleTransfers for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Scheduled transfer updated successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "DeleteScheduleTransfers",
      "request": {
        "name": "DeleteScheduleTransfers",
        "description": {
          "content": "Delete the scheduled transfer",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "DeleteScheduleTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"updateTransferType\": \"{{updateTransferType_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "Scheduled transfer deleted successfully",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"updateTransferType\": \"{{updateTransferType_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"updateTransferType\": \"{{updateTransferType_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"updateTransferType\": \"{{updateTransferType_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for DeleteScheduleTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Scheduled transfer deleted successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "AddRecurringTransfers",
      "request": {
        "name": "AddRecurringTransfers",
        "description": {
          "content": "Adds the recurring transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "AddRecurringTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"amount\": \"{{amount_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*string}}\",\n    \"targetAccountId\": \"{{targetAccountId_*string}}\",\n    \"status\": \"{{status_*string}}\",\n    \"scheduledDate\": \"{{scheduledDate_*number}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{recurringOptions.amountType_*string}}\",\n        \"frequency\": {\n            \"iterate\": \"{{recurringOptions.frequency.iterate_*string}}\",\n            \"duration\": {\n                \"untilStop\": \"{{recurringOptions.frequency.duration.untilStop_*string}}\",\n                \"untilDate\": \"{{recurringOptions.frequency.duration.untilDate_*number}}\",\n                \"numberOfTransfers\": \"{{recurringOptions.frequency.duration.numberOfTransfers_*number}}\"\n            }\n        }\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "schedule transfer added successfully",
          "originalRequest": {
            "url": {
              "path": [
                "AddRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"amount\": \"{{amount_*number}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\",\n    \"targetAccountId\": \"{{targetAccountId_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"status\": \"{{status_*string}}\",\n    \"scheduledDate\": \"{{scheduledDate_*number}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{recurringOptions.amountType_*string}}\",\n        \"frequency\": {\n            \"iterate\": \"{{recurringOptions.frequency.iterate_*string}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{recurringOptions.frequency.duration.numberOfTransfers_*number}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "AddRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"amount\": \"{{amount_*number}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\",\n    \"targetAccountId\": \"{{targetAccountId_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"status\": \"{{status_*string}}\",\n    \"scheduledDate\": \"{{scheduledDate_*number}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{recurringOptions.amountType_*string}}\",\n        \"frequency\": {\n            \"iterate\": \"{{recurringOptions.frequency.iterate_*string}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{recurringOptions.frequency.duration.numberOfTransfers_*number}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "AddRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"amount\": \"{{amount_*number}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\",\n    \"targetAccountId\": \"{{targetAccountId_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"status\": \"{{status_*string}}\",\n    \"scheduledDate\": \"{{scheduledDate_*number}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{recurringOptions.amountType_*string}}\",\n        \"frequency\": {\n            \"iterate\": \"{{recurringOptions.frequency.iterate_*string}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{recurringOptions.frequency.duration.numberOfTransfers_*number}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for AddRecurringTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"schedule transfer added successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "GetRecurringTransfers",
      "request": {
        "name": "GetRecurringTransfers",
        "description": {
          "content": "Fetches all the recurring transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetRecurringTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"status\": \"{{status_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "schedule transfer list response",
          "originalRequest": {
            "url": {
              "path": [
                "GetRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"status\": \"{{status_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"Type\": \"do\",\n    \"CustomerId\": 55199176.56487644,\n    \"Amount\": 20612097.763904512,\n    \"SourceAccountNumber\": \"ut proident pariatur ad\",\n    \"TargetAccountNumber\": \"aute\",\n    \"DueDate\": \"aliqua esse culpa anim cons\",\n    \"Currency\": \"velit\",\n    \"Status\": \"adipisicing proident sit qui\",\n    \"ScheduledDate\": -21031585.40177405,\n    \"recurringOptions\": {\n      \"amountType\": \"sit commodo sint ea\",\n      \"frequency\": {\n        \"duration\": {\n          \"untilStop\": \"incididunt aute\",\n          \"untilDate\": \"nulla culpa est Duis cons\",\n          \"numberOfPayments\": \"in dolore ut\"\n        },\n        \"iterate\": \"sunt incididunt occaecat consectetur ullamco\"\n      }\n    },\n    \"id\": \"non commodo\"\n  },\n  {\n    \"Type\": \"\",\n    \"CustomerId\": 20067553.513413653,\n    \"Amount\": 62918043.842481405,\n    \"SourceAccountNumber\": \"pariatur sunt aliqua aute\",\n    \"TargetAccountNumber\": \"eu in voluptate enim\",\n    \"DueDate\": \"mo\",\n    \"Currency\": \"ut proident pariatur\",\n    \"Status\": \"in aliquip\",\n    \"ScheduledDate\": -35613278.28051302,\n    \"recurringOptions\": {\n      \"amountType\": \"Lorem ex ipsum quis dolore\",\n      \"frequency\": {\n        \"duration\": {\n          \"untilStop\": \"in nulla fugiat\",\n          \"untilDate\": \"enim ad fugiat\",\n          \"numberOfPayments\": \"ipsum dolor incididunt\"\n        },\n        \"iterate\": \"ullamco veniam tempor\"\n      }\n    },\n    \"id\": \"deserunt ut aute\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"status\": \"{{status_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"status\": \"{{status_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for GetRecurringTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"schedule transfer list response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n        pm.test('Response has the `Type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`Type`)){\n                if(pm.expect(ld.get(pm.response.json(), `Type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `Type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `CustomerId` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`CustomerId`)){\n                if(pm.expect(ld.get(responseData, `CustomerId`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `CustomerId`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `Amount` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`Amount`)){\n                if(pm.expect(ld.get(responseData, `Amount`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `Amount`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `SourceAccountNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`SourceAccountNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `SourceAccountNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `SourceAccountNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `TargetAccountNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`TargetAccountNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `TargetAccountNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `TargetAccountNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `DueDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`DueDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `DueDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `DueDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `Currency` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`Currency`)){\n                if(pm.expect(ld.get(pm.response.json(), `Currency`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `Currency`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `Status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`Status`)){\n                if(pm.expect(ld.get(pm.response.json(), `Status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `Status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `ScheduledDate` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`ScheduledDate`)){\n                if(pm.expect(ld.get(responseData, `ScheduledDate`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `ScheduledDate`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `recurringOptions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`recurringOptions`)){\n                if(pm.expect(ld.get(pm.response.json(), `recurringOptions`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `recurringOptions`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `recurringOptions.amountType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`recurringOptions.amountType`)){\n                if(pm.expect(ld.get(pm.response.json(), `recurringOptions.amountType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `recurringOptions.amountType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `recurringOptions.frequency` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`recurringOptions.frequency`)){\n                if(pm.expect(ld.get(pm.response.json(), `recurringOptions.frequency`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `recurringOptions.frequency`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `recurringOptions.frequency.duration` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`recurringOptions.frequency.duration`)){\n                if(pm.expect(ld.get(pm.response.json(), `recurringOptions.frequency.duration`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `recurringOptions.frequency.duration`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `recurringOptions.frequency.iterate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`recurringOptions.frequency.iterate`)){\n                if(pm.expect(ld.get(pm.response.json(), `recurringOptions.frequency.iterate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `recurringOptions.frequency.iterate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "UpdateRecurringTransfers",
      "request": {
        "name": "UpdateRecurringTransfers",
        "description": {
          "content": "Update the recurring transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "UpdateRecurringTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*string}}\",\n    \"amount\": \"{{amount_*number}}\",\n    \"scheduledDate\": \"{{scheduledDate_*number}}\",\n    \"targetAccountId\": \"{{targetAccountId_*string}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{recurringOptions.amountType_*string}}\",\n        \"frequency\": {\n            \"duration\": {\n                \"untilStop\": \"{{recurringOptions.frequency.duration.untilStop_*string}}\",\n                \"untilDate\": \"{{recurringOptions.frequency.duration.untilDate_*number}}\",\n                \"numberOfTransfers\": \"{{recurringOptions.frequency.duration.numberOfTransfers_*number}}\"\n            },\n            \"iterate\": \"{{recurringOptions.frequency.iterate_*string}}\"\n        },\n        \"updateTransferType\": \"{{recurringOptions.updateTransferType_*string}}\"\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "Recurring transfer updated successfully",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"recurringOptions\": {\n        \"amountType\": \"{{recurringOptions.amountType_*string}}\",\n        \"frequency\": {\n            \"iterate\": \"{{recurringOptions.frequency.iterate_*string}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{recurringOptions.frequency.duration.numberOfTransfers_*number}}\"\n            }\n        },\n        \"updateTransferType\": \"{{recurringOptions.updateTransferType_*string}}\"\n    },\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\",\n    \"targetAccountId\": \"{{targetAccountId_*number}}\",\n    \"scheduledDate\": \"{{scheduledDate_*number}}\",\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"recurringOptions\": {\n        \"amountType\": \"{{recurringOptions.amountType_*string}}\",\n        \"frequency\": {\n            \"iterate\": \"{{recurringOptions.frequency.iterate_*string}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{recurringOptions.frequency.duration.numberOfTransfers_*number}}\"\n            }\n        },\n        \"updateTransferType\": \"{{recurringOptions.updateTransferType_*string}}\"\n    },\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\",\n    \"targetAccountId\": \"{{targetAccountId_*number}}\",\n    \"scheduledDate\": \"{{scheduledDate_*number}}\",\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"recurringOptions\": {\n        \"amountType\": \"{{recurringOptions.amountType_*string}}\",\n        \"frequency\": {\n            \"iterate\": \"{{recurringOptions.frequency.iterate_*string}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{recurringOptions.frequency.duration.numberOfTransfers_*number}}\"\n            }\n        },\n        \"updateTransferType\": \"{{recurringOptions.updateTransferType_*string}}\"\n    },\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\",\n    \"targetAccountId\": \"{{targetAccountId_*number}}\",\n    \"scheduledDate\": \"{{scheduledDate_*number}}\",\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for UpdateRecurringTransfers for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Recurring transfer updated successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "DeleteRecurringTransfers",
      "request": {
        "name": "DeleteRecurringTransfers",
        "description": {
          "content": "Delete the recurring transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "DeleteRecurringTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"updateTransferType\": \"{{updateTransferType_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "Recurring transfer deleted successfully",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"updateTransferType\": \"{{updateTransferType_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"updateTransferType\": \"{{updateTransferType_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"paymentId\": \"{{paymentId_*string}}\",\n    \"updateTransferType\": \"{{updateTransferType_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for DeleteRecurringTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Recurring transfer deleted successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "resetPassword",
      "request": {
        "name": "resetPassword",
        "description": {
          "content": "It allows to reset the password",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "resetPassword"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"password\": \"{{password_*string}}\",\n    \"username\": \"{{username_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "password has been updated successfully.",
          "originalRequest": {
            "url": {
              "path": [
                "resetPassword"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"{{password_*number}}\",\n    \"username\": \"{{username_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "resetPassword"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"{{password_*number}}\",\n    \"username\": \"{{username_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "resetPassword"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"{{password_*number}}\",\n    \"username\": \"{{username_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for resetPassword for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"password has been updated successfully.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "debitcardInfoValidation",
      "request": {
        "name": "debitcardInfoValidation",
        "description": {
          "content": "for validating card info",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "debitcardInfoValidation"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"cvv\": \"{{cvv_*string}}\",\n    \"debitCardNumber\": \"{{debitCardNumber_*string}}\",\n    \"expiryDate\": \"{{expiryDate_*string}}\",\n    \"pin\": \"{{pin_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "Validated Successfully",
          "originalRequest": {
            "url": {
              "path": [
                "debitcardInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"cvv\": \"{{cvv_*number}}\",\n    \"debitCardNumber\": \"{{debitCardNumber_*number}}\",\n    \"expiryDate\": \"{{expiryDate_*date}}\",\n    \"pin\": \"{{pin_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "debitcardInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"cvv\": \"{{cvv_*number}}\",\n    \"debitCardNumber\": \"{{debitCardNumber_*number}}\",\n    \"expiryDate\": \"{{expiryDate_*date}}\",\n    \"pin\": \"{{pin_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "debitcardInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"cvv\": \"{{cvv_*number}}\",\n    \"debitCardNumber\": \"{{debitCardNumber_*number}}\",\n    \"expiryDate\": \"{{expiryDate_*date}}\",\n    \"pin\": \"{{pin_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for debitcardInfoValidation for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Validated Successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "personalInfoValidation",
      "request": {
        "name": "personalInfoValidation",
        "description": {
          "content": "for validating personal info",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "personalInfoValidation"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"dob\": \"{{dob_*string}}\",\n    \"ssn\": \"{{ssn_*number}}\",\n    \"secrectPassword\": \"{{secrectPassword_*string}}\",\n    \"AccNumber\": \"{{AccNumber_*string}}\",\n    \"lastDepositAmt\": \"{{lastDepositAmt_*number}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "Validated Successfully",
          "originalRequest": {
            "url": {
              "path": [
                "personalInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"dob\": \"{{dob_*date}}\",\n    \"ssn\": \"{{ssn_*number}}\",\n    \"secrectPassword\": \"{{secrectPassword_*string}}\",\n    \"AccNumber\": \"{{AccNumber_*number}}\",\n    \"lastDepositAmt\": \"{{lastDepositAmt_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "personalInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"dob\": \"{{dob_*date}}\",\n    \"ssn\": \"{{ssn_*number}}\",\n    \"secrectPassword\": \"{{secrectPassword_*string}}\",\n    \"AccNumber\": \"{{AccNumber_*number}}\",\n    \"lastDepositAmt\": \"{{lastDepositAmt_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "personalInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"dob\": \"{{dob_*date}}\",\n    \"ssn\": \"{{ssn_*number}}\",\n    \"secrectPassword\": \"{{secrectPassword_*string}}\",\n    \"AccNumber\": \"{{AccNumber_*number}}\",\n    \"lastDepositAmt\": \"{{lastDepositAmt_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for personalInfoValidation for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Validated Successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "disputeTransaction",
      "request": {
        "name": "disputeTransaction",
        "description": {
          "content": "dispute a transaction",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "disputeTransaction"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"transactionsData\": [\n        {\n            \"reasonCode\": \"{{transactionsData_0.reasonCode_*string}}\",\n            \"transactionId\": \"{{transactionsData_0.transactionId_*number}}\"\n        },\n        {\n            \"reasonCode\": \"{{transactionsData_1.reasonCode_*string}}\",\n            \"transactionId\": \"{{transactionsData_1.transactionId_*number}}\"\n        }\n    ],\n    \"emailId\": \"{{emailId_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "Dispute Transactions reported successfully",
          "originalRequest": {
            "url": {
              "path": [
                "disputeTransaction"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"transactionsData\": [\n        {\n            \"reasonCode\": \"{{transactionsData_0.reasonCode_*string}}\",\n            \"transactionId\": \"{{transactionsData_0.transactionId_*number}}\"\n        },\n        {\n            \"reasonCode\": \"{{transactionsData_1.reasonCode_*string}}\",\n            \"transactionId\": \"{{transactionsData_1.transactionId_*number}}\"\n        }\n    ],\n    \"emailId\": \"{{emailId_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "disputeTransaction"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"transactionsData\": [\n        {\n            \"reasonCode\": \"{{transactionsData_0.reasonCode_*string}}\",\n            \"transactionId\": \"{{transactionsData_0.transactionId_*number}}\"\n        },\n        {\n            \"reasonCode\": \"{{transactionsData_1.reasonCode_*string}}\",\n            \"transactionId\": \"{{transactionsData_1.transactionId_*number}}\"\n        }\n    ],\n    \"emailId\": \"{{emailId_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "disputeTransaction"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"transactionsData\": [\n        {\n            \"reasonCode\": \"{{transactionsData_0.reasonCode_*string}}\",\n            \"transactionId\": \"{{transactionsData_0.transactionId_*number}}\"\n        },\n        {\n            \"reasonCode\": \"{{transactionsData_1.reasonCode_*string}}\",\n            \"transactionId\": \"{{transactionsData_1.transactionId_*number}}\"\n        }\n    ],\n    \"emailId\": \"{{emailId_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for disputeTransaction for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Dispute Transactions reported successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "ccPay",
      "request": {
        "name": "ccPay",
        "description": {
          "content": "to pay cc bill",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "ccPay"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"amount\": \"{{amount_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"dueDate\": \"{{dueDate_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*string}}\",\n    \"targetAccountId\": \"{{targetAccountId_*string}}\",\n    \"transactionType\": \"{{transactionType_*number}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "Credit Card payment scheduled successfully",
          "originalRequest": {
            "url": {
              "path": [
                "ccPay"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"dueDate\": \"{{dueDate_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*string}}\",\n    \"targetAccountId\": \"{{targetAccountId_*string}}\",\n    \"transactionType\": \"{{transactionType_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "ccPay"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"dueDate\": \"{{dueDate_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*string}}\",\n    \"targetAccountId\": \"{{targetAccountId_*string}}\",\n    \"transactionType\": \"{{transactionType_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "ccPay"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount_*number}}\",\n    \"currency\": \"{{currency_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"dueDate\": \"{{dueDate_*string}}\",\n    \"sourceAccountId\": \"{{sourceAccountId_*string}}\",\n    \"targetAccountId\": \"{{targetAccountId_*string}}\",\n    \"transactionType\": \"{{transactionType_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for ccPay for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Credit Card payment scheduled successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "GetCCSchedule",
      "request": {
        "name": "GetCCSchedule",
        "description": {
          "content": "Fetch cc payment list",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetCCSchedule"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"status\": \"{{status_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "schedule transfer list response",
          "originalRequest": {
            "url": {
              "path": [
                "GetCCSchedule"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"status\": \"{{status_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"Type\": \"occaecat consequat ea\",\n    \"CustomerId\": 35510065.266332716,\n    \"Amount\": 10695242.084335327,\n    \"SourceAccountNumber\": \"dolore Duis est nisi\",\n    \"TargetAccountNumber\": \"irure deser\",\n    \"DueDate\": \"nisi lab\",\n    \"Currency\": \"ex aute\",\n    \"Status\": \"proident ip\",\n    \"id\": \"nulla ut\"\n  },\n  {\n    \"Type\": \"magna quis aliquip\",\n    \"CustomerId\": -90378070.05741353,\n    \"Amount\": -70181160.02198882,\n    \"SourceAccountNumber\": \"eu sed\",\n    \"TargetAccountNumber\": \"non ut te\",\n    \"DueDate\": \"est irure incidi\",\n    \"Currency\": \"laborum\",\n    \"Status\": \"sint anim ipsum fugiat pariatur\",\n    \"id\": \"eu exercitation deserunt nulla\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetCCSchedule"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"status\": \"{{status_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetCCSchedule"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"status\": \"{{status_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for GetCCSchedule for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"schedule transfer list response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n        pm.test('Response has the `Type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`Type`)){\n                if(pm.expect(ld.get(pm.response.json(), `Type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `Type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `CustomerId` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`CustomerId`)){\n                if(pm.expect(ld.get(responseData, `CustomerId`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `CustomerId`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `Amount` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`Amount`)){\n                if(pm.expect(ld.get(responseData, `Amount`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `Amount`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `SourceAccountNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`SourceAccountNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `SourceAccountNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `SourceAccountNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `TargetAccountNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`TargetAccountNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `TargetAccountNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `TargetAccountNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `DueDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`DueDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `DueDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `DueDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `Currency` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`Currency`)){\n                if(pm.expect(ld.get(pm.response.json(), `Currency`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `Currency`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `Status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`Status`)){\n                if(pm.expect(ld.get(pm.response.json(), `Status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `Status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "sendsecuremessage",
      "request": {
        "name": "sendsecuremessage",
        "description": {
          "content": "send secure message",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "sendsecuremessage"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"authType\": \"{{authType_*string}}\",\n    \"firstName\": \"{{firstName_*string}}\",\n    \"lastName\": \"{{lastName_*string}}\",\n    \"email\": \"{{email_*string}}\",\n    \"phoneNumber\": \"{{phoneNumber_*number}}\",\n    \"topic\": \"{{topic_*string}}\",\n    \"message\": \"{{message_*string}}\",\n    \"availableTime\": \"{{availableTime_*string}}\",\n    \"chatHistory\": \"{{chatHistory_*string}}\",\n    \"cif\": \"{{cif_*number}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "sendsecuremessage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"authType\": \"{{authType_*string}}\",\n    \"firstName\": \"{{firstName_*string}}\",\n    \"lastName\": \"{{lastName_*string}}\",\n    \"email\": \"{{email_*string}}\",\n    \"phoneNumber\": \"{{phoneNumber_*number}}\",\n    \"topic\": \"{{topic_*string}}\",\n    \"message\": \"{{message_*string}}\",\n    \"availableTime\": \"{{availableTime_*string}}\",\n    \"chatHistory\": \"{{chatHistory_*string}}\",\n    \"cif\": \"{{cif_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "sendsecuremessage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"authType\": \"{{authType_*string}}\",\n    \"firstName\": \"{{firstName_*string}}\",\n    \"lastName\": \"{{lastName_*string}}\",\n    \"email\": \"{{email_*string}}\",\n    \"phoneNumber\": \"{{phoneNumber_*number}}\",\n    \"topic\": \"{{topic_*string}}\",\n    \"message\": \"{{message_*string}}\",\n    \"availableTime\": \"{{availableTime_*string}}\",\n    \"chatHistory\": \"{{chatHistory_*string}}\",\n    \"cif\": \"{{cif_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "sendsecuremessage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"authType\": \"{{authType_*string}}\",\n    \"firstName\": \"{{firstName_*string}}\",\n    \"lastName\": \"{{lastName_*string}}\",\n    \"email\": \"{{email_*string}}\",\n    \"phoneNumber\": \"{{phoneNumber_*number}}\",\n    \"topic\": \"{{topic_*string}}\",\n    \"message\": \"{{message_*string}}\",\n    \"availableTime\": \"{{availableTime_*string}}\",\n    \"chatHistory\": \"{{chatHistory_*string}}\",\n    \"cif\": \"{{cif_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for sendsecuremessage for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "locateProfile",
      "request": {
        "name": "locateProfile",
        "description": {
          "content": "get profile details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "locateProfile"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountNumber\": \"{{accountNumber_*string}}\",\n    \"customerId\": \"{{customerId_*string}}\",\n    \"ssNumber\": \"{{ssNumber_*string}}\",\n    \"ssnShort\": \"{{ssnShort_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "locateProfile"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber_*string}}\",\n    \"customerId\": \"{{customerId_*string}}\",\n    \"ssNumber\": \"{{ssNumber_*string}}\",\n    \"ssnShort\": \"{{ssnShort_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"accountNumber\": \"nisi mollit\",\n  \"cardDetails\": {\n    \"cardNumber\": \"ad ex dolor nulla culpa\",\n    \"expiryDate\": \"id aliqua cupidatat irure officia\",\n    \"cvv\": \"id dolore amet tempor deserunt\",\n    \"pin\": \"ex\"\n  },\n  \"personalQuestions\": {\n    \"DOB\": \"officia sunt exercitation\",\n    \"SSN\": 51025678.39249584,\n    \"SecretPassword\": \"non in est dolore\",\n    \"LDAmount\": -9673671.520879835,\n    \"AccNumber\": \"officia\"\n  },\n  \"ssNumber\": 14619522.097800657,\n  \"ssnShort\": 61107112.23113993,\n  \"alternatePhoneNumber\": 11098398.656771153,\n  \"customerId\": \"mollit fugiat dolor\",\n  \"email\": \"nostrud ad\",\n  \"identificationNumber\": \"aute voluptate tempor est\",\n  \"identificationType\": \"esse\",\n  \"image\": \"elit proident\",\n  \"isAlternateMobileNumber\": true,\n  \"isPrimaryMobileNumber\": true,\n  \"location\": \"dol\",\n  \"name\": \"voluptate laboris proident\",\n  \"personalBanker\": {\n    \"name\": \"sint dolore velit elit\",\n    \"email\": \"nisi do\",\n    \"mobileNumber\": \"Duis\"\n  },\n  \"phone\": -41126036.70071389,\n  \"securityQuestions\": [\n    \"aute reprehenderit\",\n    \"quis adipisicing elit laborum\"\n  ],\n  \"segmentId\": 96539318.25580329,\n  \"multiAccounts\": [\n    {\n      \"accountNumber\": \"dolor et dolor\",\n      \"cardDetails\": {\n        \"cardNumber\": \"nisi mollit quis\",\n        \"expiryDate\": \"i\",\n        \"cvv\": \"elit ea\",\n        \"pin\": \"reprehenderit ut culpa\"\n      },\n      \"personalQuestions\": {\n        \"DOB\": \"in do\",\n        \"SSN\": 54337787.35915777,\n        \"SecretPassword\": \"voluptate nulla\",\n        \"LDAmount\": -79046637.45158592,\n        \"AccNumber\": \"nulla ea exercitation nostrud\"\n      },\n      \"ssNumber\": -36315503.33180882,\n      \"ssnShort\": -95613447.32110481,\n      \"alternatePhoneNumber\": 94345900.7385293,\n      \"customerId\": \"dolor\",\n      \"email\": \"sunt ad esse\",\n      \"identificationNumber\": \"ad adipisicing ut laboris\",\n      \"identificationType\": \"sit cillum fugiat\",\n      \"location\": \"esse ut dolore\",\n      \"name\": \"reprehenderit aliqua ut\",\n      \"phone\": -7787092.044139802\n    },\n    {\n      \"accountNumber\": \"non adipisicing\",\n      \"cardDetails\": {\n        \"cardNumber\": \"eiusmod\",\n        \"expiryDate\": \"eiusmod ex enim\",\n        \"cvv\": \"reprehenderit Lorem\",\n        \"pin\": \"voluptate ea cupid\"\n      },\n      \"personalQuestions\": {\n        \"DOB\": \"ullamco cupidatat sed veniam\",\n        \"SSN\": -34678358.56792764,\n        \"SecretPassword\": \"occaecat qui magna esse\",\n        \"LDAmount\": 14092811.90949358,\n        \"AccNumber\": \"dolor est\"\n      },\n      \"ssNumber\": -34003796.777601816,\n      \"ssnShort\": 78906584.75882736,\n      \"alternatePhoneNumber\": 64743524.46445823,\n      \"customerId\": \"deserunt\",\n      \"email\": \"minim do magna\",\n      \"identificationNumber\": \"cillum Ut\",\n      \"identificationType\": \"adipisicing Duis\",\n      \"location\": \"occaecat\",\n      \"name\": \"dolor\",\n      \"phone\": -63702815.32000499\n    }\n  ],\n  \"warningCodes\": [\n    {\n      \"code\": -99020941.91026948,\n      \"level\": \"laboris do dolore velit\",\n      \"description\": \"tempor dolore Lorem\"\n    },\n    {\n      \"code\": -75845683.90154916,\n      \"level\": \"consequat magna\",\n      \"description\": \"nulla magna esse dolore\"\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "locateProfile"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber_*string}}\",\n    \"customerId\": \"{{customerId_*string}}\",\n    \"ssNumber\": \"{{ssNumber_*string}}\",\n    \"ssnShort\": \"{{ssnShort_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "locateProfile"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber_*string}}\",\n    \"customerId\": \"{{customerId_*string}}\",\n    \"ssNumber\": \"{{ssNumber_*string}}\",\n    \"ssnShort\": \"{{ssnShort_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for locateProfile for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `accountNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accountNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `accountNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `accountNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails.cardNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails.cardNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails.cardNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails.cardNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails.expiryDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails.expiryDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails.expiryDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails.expiryDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails.cvv` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails.cvv`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails.cvv`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails.cvv`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails.pin` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails.pin`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails.pin`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails.pin`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.DOB` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions.DOB`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions.DOB`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions.DOB`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.SSN` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`personalQuestions.SSN`)){\n                if(pm.expect(ld.get(responseData, `personalQuestions.SSN`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `personalQuestions.SSN`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.SecretPassword` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions.SecretPassword`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions.SecretPassword`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions.SecretPassword`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.LDAmount` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`personalQuestions.LDAmount`)){\n                if(pm.expect(ld.get(responseData, `personalQuestions.LDAmount`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `personalQuestions.LDAmount`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.AccNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions.AccNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions.AccNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions.AccNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `ssNumber` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`ssNumber`)){\n                if(pm.expect(ld.get(responseData, `ssNumber`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `ssNumber`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `ssnShort` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`ssnShort`)){\n                if(pm.expect(ld.get(responseData, `ssnShort`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `ssnShort`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `alternatePhoneNumber` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`alternatePhoneNumber`)){\n                if(pm.expect(ld.get(responseData, `alternatePhoneNumber`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `alternatePhoneNumber`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customerId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customerId`)){\n                if(pm.expect(ld.get(pm.response.json(), `customerId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customerId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `identificationNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`identificationNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `identificationNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `identificationNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `identificationType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`identificationType`)){\n                if(pm.expect(ld.get(pm.response.json(), `identificationType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `identificationType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `image` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n                if(pm.expect(ld.get(pm.response.json(), `image`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isAlternateMobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isAlternateMobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isPrimaryMobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isPrimaryMobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `isPrimaryMobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isPrimaryMobileNumber`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `location` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location`)){\n                if(pm.expect(ld.get(pm.response.json(), `location`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n                if(pm.expect(ld.get(pm.response.json(), `name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.name`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.email`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.mobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.mobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.mobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.mobileNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(responseData, `phone`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `phone`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `securityQuestions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`securityQuestions`)){\n                if(pm.expect(ld.get(pm.response.json(), `securityQuestions`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `securityQuestions`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `segmentId` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`segmentId`)){\n                if(pm.expect(ld.get(responseData, `segmentId`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `segmentId`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `multiAccounts` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`multiAccounts`)){\n                if(pm.expect(ld.get(pm.response.json(), `multiAccounts`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `multiAccounts`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the multiAccounts field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`multiAccounts`);\n            let multiAccountsArray = ld.get(pm.response.json(), `multiAccounts`, \"\");\n            for (let multiAccounts_it = 0; multiAccounts_it < multiAccountsArray.length; multiAccounts_it++) {\n                let iterator = multiAccounts_it;\n                \t\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].accountNumber' has 'accountNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].accountNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].accountNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails' has 'cardDetails' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails.cardNumber' has 'cardNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails.cardNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails.cardNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails.expiryDate' has 'expiryDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails.expiryDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails.expiryDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails.cvv' has 'cvv' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails.cvv`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails.cvv`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails.pin' has 'pin' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails.pin`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails.pin`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions' has 'personalQuestions' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions.DOB' has 'DOB' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions.DOB`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions.DOB`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccountsArray'has 'SSN' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `multiAccounts[${multiAccounts_it}].personalQuestions.SSN`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`multiAccounts[${multiAccounts_it}].personalQuestions.SSN`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions.SecretPassword' has 'SecretPassword' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions.SecretPassword`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions.SecretPassword`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccountsArray'has 'LDAmount' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `multiAccounts[${multiAccounts_it}].personalQuestions.LDAmount`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`multiAccounts[${multiAccounts_it}].personalQuestions.LDAmount`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions.AccNumber' has 'AccNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions.AccNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions.AccNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccountsArray'has 'ssNumber' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `multiAccounts[${multiAccounts_it}].ssNumber`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`multiAccounts[${multiAccounts_it}].ssNumber`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'multiAccountsArray'has 'ssnShort' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `multiAccounts[${multiAccounts_it}].ssnShort`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`multiAccounts[${multiAccounts_it}].ssnShort`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'multiAccountsArray'has 'alternatePhoneNumber' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `multiAccounts[${multiAccounts_it}].alternatePhoneNumber`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`multiAccounts[${multiAccounts_it}].alternatePhoneNumber`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].customerId' has 'customerId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].customerId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].customerId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].email' has 'email' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].email`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].email`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].identificationNumber' has 'identificationNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].identificationNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].identificationNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].identificationType' has 'identificationType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].identificationType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].identificationType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].location' has 'location' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].location`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].location`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].name`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccountsArray'has 'phone' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `multiAccounts[${multiAccounts_it}].phone`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`multiAccounts[${multiAccounts_it}].phone`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n            }\n\n        })\n\n        pm.test('Response has the `warningCodes` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`warningCodes`)){\n                if(pm.expect(ld.get(pm.response.json(), `warningCodes`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `warningCodes`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the warningCodes field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`warningCodes`);\n            let warningCodesArray = ld.get(pm.response.json(), `warningCodes`, \"\");\n            for (let warningCodes_it = 0; warningCodes_it < warningCodesArray.length; warningCodes_it++) {\n                let iterator = warningCodes_it;\n                \t\n        pm.test(`${iterator} element of array 'warningCodesArray'has 'code' as number`,function(){ \n            if(pm.expect(ld.get(responseData, `warningCodes[${warningCodes_it}].code`, 200)).to.exist){\n              pm.expect(typeof ld.get(responseData,`warningCodes[${warningCodes_it}].code`, 200)).to.equal(\"number\");\n            }\n      \n        })\n\n        pm.test(`${iterator} element of array 'warningCodes[${warningCodes_it}].level' has 'level' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `warningCodes[${warningCodes_it}].level`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`warningCodes[${warningCodes_it}].level`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'warningCodes[${warningCodes_it}].description' has 'description' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `warningCodes[${warningCodes_it}].description`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`warningCodes[${warningCodes_it}].description`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "to validate the exiting user",
      "request": {
        "name": "to validate the exiting user",
        "description": {
          "content": "to validate the in of existing user",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "validateUser"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"sourcePin\": \"{{sourcePin_*string}}\",\n    \"targetPin\": \"{{targetPin_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "PINs matched",
          "originalRequest": {
            "url": {
              "path": [
                "validateUser"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin_*string}}\",\n    \"targetPin\": \"{{targetPin_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "validateUser"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin_*string}}\",\n    \"targetPin\": \"{{targetPin_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "validateUser"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin_*string}}\",\n    \"targetPin\": \"{{targetPin_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for validateUser for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"PINs matched\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "to validate the pins entered by the new user",
      "request": {
        "name": "to validate the pins entered by the new user",
        "description": {
          "content": "to validate the pins entered by the new user",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "validatePIN"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"sourcePin\": \"{{sourcePin_*string}}\",\n    \"targetPin\": \"{{targetPin_*string}}\",\n    \"profileInfo\": {\n        \"customerId\": \"{{profileInfo.customerId_*string}}\",\n        \"accountNumber\": \"{{profileInfo.accountNumber_*string}}\",\n        \"ssn\": \"{{profileInfo.ssn_*string}}\"\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "PINs matched",
          "originalRequest": {
            "url": {
              "path": [
                "validatePIN"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin_*string}}\",\n    \"targetPin\": \"{{targetPin_*string}}\",\n    \"profileInfo\": {\n        \"customerId\": \"{{profileInfo.customerId_*string}}\",\n        \"accountNumber\": \"{{profileInfo.accountNumber_*string}}\",\n        \"ssn\": \"{{profileInfo.ssn_*string}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "validatePIN"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin_*string}}\",\n    \"targetPin\": \"{{targetPin_*string}}\",\n    \"profileInfo\": {\n        \"customerId\": \"{{profileInfo.customerId_*string}}\",\n        \"accountNumber\": \"{{profileInfo.accountNumber_*string}}\",\n        \"ssn\": \"{{profileInfo.ssn_*string}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "validatePIN"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin_*string}}\",\n    \"targetPin\": \"{{targetPin_*string}}\",\n    \"profileInfo\": {\n        \"customerId\": \"{{profileInfo.customerId_*string}}\",\n        \"accountNumber\": \"{{profileInfo.accountNumber_*string}}\",\n        \"ssn\": \"{{profileInfo.ssn_*string}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for validatePIN for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"PINs matched\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "to validate if pin entered by new user follows pin rules",
      "request": {
        "name": "to validate if pin entered by new user follows pin rules",
        "description": {
          "content": "to validate if pin entered by new user follows pin rules",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "validatePINRules"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"sourcePin\": \"{{sourcePin_*string}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "PIN rules satisfied",
          "originalRequest": {
            "url": {
              "path": [
                "validatePINRules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "validatePINRules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "validatePINRules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin_*string}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for validatePINRules for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"PIN rules satisfied\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "to fetch the account closure status",
      "request": {
        "name": "to fetch the account closure status",
        "description": {
          "content": "to fetch the account closure status",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "getRequestStatus"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "[\n    {\n        \"accountName\": \"{{_0.accountName_*string}}\",\n        \"accountNumber\": \"{{_0.accountNumber_*string}}\",\n        \"customerId\": \"{{_0.customerId_*number}}\",\n        \"description\": \"{{_0.description_*string}}\",\n        \"estimation\": \"{{_0.estimation_*number}}\",\n        \"modifyDate\": \"{{_0.modifyDate_*number}}\",\n        \"requestDate\": \"{{_0.requestDate_*number}}\",\n        \"requestId\": \"{{_0.requestId_*string}}\",\n        \"requestSubType\": \"{{_0.requestSubType_*string}}\",\n        \"requestType\": \"{{_0.requestType_*string}}\",\n        \"status\": \"{{_0.status_*string}}\"\n    },\n    {\n        \"accountName\": \"{{_1.accountName_*string}}\",\n        \"accountNumber\": \"{{_1.accountNumber_*string}}\",\n        \"customerId\": \"{{_1.customerId_*number}}\",\n        \"description\": \"{{_1.description_*string}}\",\n        \"estimation\": \"{{_1.estimation_*number}}\",\n        \"modifyDate\": \"{{_1.modifyDate_*number}}\",\n        \"requestDate\": \"{{_1.requestDate_*number}}\",\n        \"requestId\": \"{{_1.requestId_*string}}\",\n        \"requestSubType\": \"{{_1.requestSubType_*string}}\",\n        \"requestType\": \"{{_1.requestType_*string}}\",\n        \"status\": \"{{_1.status_*string}}\"\n    }\n]",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "getRequestStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"accountName\": \"{{_0.accountName_*string}}\",\n        \"accountNumber\": \"{{_0.accountNumber_*string}}\",\n        \"customerId\": \"{{_0.customerId_*number}}\",\n        \"description\": \"{{_0.description_*string}}\",\n        \"estimation\": \"{{_0.estimation_*number}}\",\n        \"modifyDate\": \"{{_0.modifyDate_*number}}\",\n        \"requestDate\": \"{{_0.requestDate_*number}}\",\n        \"requestId\": \"{{_0.requestId_*string}}\",\n        \"requestSubType\": \"{{_0.requestSubType_*string}}\",\n        \"requestType\": \"{{_0.requestType_*string}}\",\n        \"status\": \"{{_0.status_*string}}\"\n    },\n    {\n        \"accountName\": \"{{_1.accountName_*string}}\",\n        \"accountNumber\": \"{{_1.accountNumber_*string}}\",\n        \"customerId\": \"{{_1.customerId_*number}}\",\n        \"description\": \"{{_1.description_*string}}\",\n        \"estimation\": \"{{_1.estimation_*number}}\",\n        \"modifyDate\": \"{{_1.modifyDate_*number}}\",\n        \"requestDate\": \"{{_1.requestDate_*number}}\",\n        \"requestId\": \"{{_1.requestId_*string}}\",\n        \"requestSubType\": \"{{_1.requestSubType_*string}}\",\n        \"requestType\": \"{{_1.requestType_*string}}\",\n        \"status\": \"{{_1.status_*string}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "getRequestStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"accountName\": \"{{_0.accountName_*string}}\",\n        \"accountNumber\": \"{{_0.accountNumber_*string}}\",\n        \"customerId\": \"{{_0.customerId_*number}}\",\n        \"description\": \"{{_0.description_*string}}\",\n        \"estimation\": \"{{_0.estimation_*number}}\",\n        \"modifyDate\": \"{{_0.modifyDate_*number}}\",\n        \"requestDate\": \"{{_0.requestDate_*number}}\",\n        \"requestId\": \"{{_0.requestId_*string}}\",\n        \"requestSubType\": \"{{_0.requestSubType_*string}}\",\n        \"requestType\": \"{{_0.requestType_*string}}\",\n        \"status\": \"{{_0.status_*string}}\"\n    },\n    {\n        \"accountName\": \"{{_1.accountName_*string}}\",\n        \"accountNumber\": \"{{_1.accountNumber_*string}}\",\n        \"customerId\": \"{{_1.customerId_*number}}\",\n        \"description\": \"{{_1.description_*string}}\",\n        \"estimation\": \"{{_1.estimation_*number}}\",\n        \"modifyDate\": \"{{_1.modifyDate_*number}}\",\n        \"requestDate\": \"{{_1.requestDate_*number}}\",\n        \"requestId\": \"{{_1.requestId_*string}}\",\n        \"requestSubType\": \"{{_1.requestSubType_*string}}\",\n        \"requestType\": \"{{_1.requestType_*string}}\",\n        \"status\": \"{{_1.status_*string}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "getRequestStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"accountName\": \"{{_0.accountName_*string}}\",\n        \"accountNumber\": \"{{_0.accountNumber_*string}}\",\n        \"customerId\": \"{{_0.customerId_*number}}\",\n        \"description\": \"{{_0.description_*string}}\",\n        \"estimation\": \"{{_0.estimation_*number}}\",\n        \"modifyDate\": \"{{_0.modifyDate_*number}}\",\n        \"requestDate\": \"{{_0.requestDate_*number}}\",\n        \"requestId\": \"{{_0.requestId_*string}}\",\n        \"requestSubType\": \"{{_0.requestSubType_*string}}\",\n        \"requestType\": \"{{_0.requestType_*string}}\",\n        \"status\": \"{{_0.status_*string}}\"\n    },\n    {\n        \"accountName\": \"{{_1.accountName_*string}}\",\n        \"accountNumber\": \"{{_1.accountNumber_*string}}\",\n        \"customerId\": \"{{_1.customerId_*number}}\",\n        \"description\": \"{{_1.description_*string}}\",\n        \"estimation\": \"{{_1.estimation_*number}}\",\n        \"modifyDate\": \"{{_1.modifyDate_*number}}\",\n        \"requestDate\": \"{{_1.requestDate_*number}}\",\n        \"requestId\": \"{{_1.requestId_*string}}\",\n        \"requestSubType\": \"{{_1.requestSubType_*string}}\",\n        \"requestType\": \"{{_1.requestType_*string}}\",\n        \"status\": \"{{_1.status_*string}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for getRequestStatus for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "to place the request",
      "request": {
        "name": "to place the request",
        "description": {
          "content": "to place the request",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "request"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountName\": \"{{accountName_*string}}\",\n    \"accountNumber\": \"{{accountNumber_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"cardNumber\": \"{{cardNumber_*string}}\",\n    \"description\": \"{{description_*string}}\",\n    \"requestSubType\": \"{{requestSubType_*string}}\",\n    \"requestType\": \"{{requestType_*string}}\",\n    \"serviceType\": \"{{serviceType_*string}}\",\n    \"meta\": {}\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "request"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountName\": \"{{accountName_*string}}\",\n    \"accountNumber\": \"{{accountNumber_*number}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"cardNumber\": \"{{cardNumber_*number}}\",\n    \"description\": \"{{description_*string}}\",\n    \"requestSubType\": \"{{requestSubType_*string}}\",\n    \"serviceType\": \"{{serviceType_*string}}\",\n    \"requestType\": \"{{requestType_*string}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "request"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountName\": \"{{accountName_*string}}\",\n    \"accountNumber\": \"{{accountNumber_*number}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"cardNumber\": \"{{cardNumber_*number}}\",\n    \"description\": \"{{description_*string}}\",\n    \"requestSubType\": \"{{requestSubType_*string}}\",\n    \"serviceType\": \"{{serviceType_*string}}\",\n    \"requestType\": \"{{requestType_*string}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "request"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountName\": \"{{accountName_*string}}\",\n    \"accountNumber\": \"{{accountNumber_*number}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"cardNumber\": \"{{cardNumber_*number}}\",\n    \"description\": \"{{description_*string}}\",\n    \"requestSubType\": \"{{requestSubType_*string}}\",\n    \"serviceType\": \"{{serviceType_*string}}\",\n    \"requestType\": \"{{requestType_*string}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for request for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "to enable or disable e or paper statements at profile level",
      "request": {
        "name": "to enable or disable e or paper statements at profile level",
        "description": {
          "content": "to enable or disable e or paper statements at profile level",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "enableEStatement"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"email\": \"{{email_*string}}\",\n    \"secondaryEmail\": \"{{secondaryEmail_*string}}\",\n    \"subscribe\": \"{{subscribe_*boolean}}\",\n    \"meta\": {}\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "enableEStatement"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"email\": \"{{email_*string}}\",\n    \"secondaryEmail\": \"{{secondaryEmail_*string}}\",\n    \"subscribe\": \"{{subscribe_*boolean}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "enableEStatement"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"email\": \"{{email_*string}}\",\n    \"secondaryEmail\": \"{{secondaryEmail_*string}}\",\n    \"subscribe\": \"{{subscribe_*boolean}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "enableEStatement"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"email\": \"{{email_*string}}\",\n    \"secondaryEmail\": \"{{secondaryEmail_*string}}\",\n    \"subscribe\": \"{{subscribe_*boolean}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for enableEStatement for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "to update the cheque book details of customer accounts",
      "request": {
        "name": "to update the cheque book details of customer accounts",
        "description": {
          "content": "Update customer cheque book details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "RequestChequeBook"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountNumber\": \"{{accountNumber_*string}}\",\n    \"customerId\": \"{{customerId_*number}}\",\n    \"numberOfChequeBooks\": \"{{numberOfChequeBooks_*number}}\",\n    \"numberOfLeaves\": \"{{numberOfLeaves_*number}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "RequestChequeBook"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"accountNumber\": \"{{accountNumber_*number}}\",\n    \"numberOfChequeBooks\": \"{{numberOfChequeBooks_*number}}\",\n    \"numberOfLeaves\": \"{{numberOfLeaves_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "RequestChequeBook"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"accountNumber\": \"{{accountNumber_*number}}\",\n    \"numberOfChequeBooks\": \"{{numberOfChequeBooks_*number}}\",\n    \"numberOfLeaves\": \"{{numberOfLeaves_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "RequestChequeBook"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\",\n    \"accountNumber\": \"{{accountNumber_*number}}\",\n    \"numberOfChequeBooks\": \"{{numberOfChequeBooks_*number}}\",\n    \"numberOfLeaves\": \"{{numberOfLeaves_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for RequestChequeBook for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "sendOTP",
      "request": {
        "name": "sendOTP",
        "description": {
          "content": "sends OTP for reset password",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "sendOTP"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "verification code has been sent to your mobile number",
          "originalRequest": {
            "url": {
              "path": [
                "sendOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "sendOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "sendOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for sendOTP for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"verification code has been sent to your mobile number\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "verifyOTP",
      "request": {
        "name": "verifyOTP",
        "description": {
          "content": " to verify OTP for reset password",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "verifyOTP"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"code\": \"{{code_*number}}\",\n    \"customerId\": \"{{customerId_*number}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "OTP verifid successfully",
          "originalRequest": {
            "url": {
              "path": [
                "verifyOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"code\": \"{{code_*number}}\",\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "verifyOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"code\": \"{{code_*number}}\",\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "verifyOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"code\": \"{{code_*number}}\",\n    \"customerId\": \"{{customerId_*number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for verifyOTP for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"OTP verifid successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "name": "to fetch the deeplink",
      "request": {
        "name": "to fetch the deeplink",
        "description": {
          "content": "to fetch the deeplink",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "deeplink"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "botId",
            "value": "{{botId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "accountId",
            "value": "{{accountId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "tenantId",
            "value": "{{tenantId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "environment",
            "value": "{{environment}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "channel",
            "value": "{{channel}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"usecase\": [\n        \"{{usecase_0_*string}}\",\n        \"{{usecase_1_*string}}\"\n    ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "deeplink"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "tenantId",
                "value": "{{tenantId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "environment",
                "value": "{{environment}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "channel",
                "value": "{{channel}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"usecase\": [\n        \"{{usecase_0_*string}}\",\n        \"{{usecase_1_*string}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"usecase\": \"addbeneficiary\",\n    \"link\": \"www.google.com\",\n    \"linkType\": \"deeplink\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "deeplink"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "tenantId",
                "value": "{{tenantId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "environment",
                "value": "{{environment}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "channel",
                "value": "{{channel}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"usecase\": [\n        \"{{usecase_0_*string}}\",\n        \"{{usecase_1_*string}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "deeplink"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "tenantId",
                "value": "{{tenantId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "environment",
                "value": "{{environment}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "channel",
                "value": "{{channel}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"usecase\": [\n        \"{{usecase_0_*string}}\",\n        \"{{usecase_1_*string}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"Excepteur qui\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Exi-PW-Postman-OpenAi using AI Type Open AI and AI Model gpt-4o\n\n\nTest generated for deeplink for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n        pm.test('Response has the `usecase` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`usecase`)){\n                if(pm.expect(ld.get(pm.response.json(), `usecase`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `usecase`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `link` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`link`)){\n                if(pm.expect(ld.get(pm.response.json(), `link`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `link`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `linkType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`linkType`)){\n                if(pm.expect(ld.get(pm.response.json(), `linkType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `linkType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://localhost:8080/smt",
      "key": "baseUrl"
    },
    {
      "type": "number",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{bearerToken}}"
      }
    ]
  },
  "info": {
    "_postman_id": "e94f6d4d-8d73-4129-b570-43b3734679e1",
    "name": "BankAssist SMT Core Banking API Specification",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "kore.ai banking bot apis.",
      "type": "text/plain"
    }
  }
}