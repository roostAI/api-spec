{
  "item": [
    {
      "id": "e656ddaf-544f-4fc4-8c66-9e2dcb631809",
      "name": "Submit Request",
      "request": {
        "name": "Submit Request",
        "description": {
          "content": "Meta API request",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "submitRequest"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "botId",
            "value": "{{botId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "accountId",
            "value": "{{accountId}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "aaa9b199-5edc-416c-beec-c9fa6abcfb12",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "submitRequest"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "0ba165e0-65f3-4a17-bf19-7477814fce35",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "submitRequest"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "60c39d0d-7aa1-43a4-b61b-cacf4764691c",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "submitRequest"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /submitRequest for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "be6898a6-7210-4270-85f9-65d2435d61f7",
      "name": "AuthToken",
      "request": {
        "name": "AuthToken",
        "description": {
          "content": "Get authentication token",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "authToken"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "botId",
            "value": "{{botId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "accountId",
            "value": "{{accountId}}",
            "description": ""
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null
      },
      "response": [
        {
          "id": "233b5654-82b4-48b3-99c4-5550bcce3257",
          "name": "successful login",
          "originalRequest": {
            "url": {
              "path": [
                "authToken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"token\": \"token\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ec84b792-a123-4242-8148-cd0c727204df",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "authToken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "2c4e476a-844b-4ea6-95b7-c41690e6a5ea",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "authToken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authToken for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful login\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `token` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`token`)){\n                if(pm.expect(ld.get(pm.response.json(), `token`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `token`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "b3d752d8-c1ac-4b6c-a4b0-4904fb5320fc",
      "name": "Deposit",
      "request": {
        "name": "Deposit",
        "description": {
          "content": "Deposit amount to customer's account",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "deposit"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"image\": {\n        \"frontImage\": \"{{frontImage}}\",\n        \"backImage\": \"{{backImage}}\"\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "2a9965c6-f03d-47c4-a23d-3a30392c3c1b",
          "name": "Deposit success",
          "originalRequest": {
            "url": {
              "path": [
                "deposit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"image\": {\n        \"frontImage\": \"{{frontImage}}\",\n        \"backImage\": \"{{backImage}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "508a9377-0823-4981-b8c2-25b608482d52",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "deposit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"image\": {\n        \"frontImage\": \"{{frontImage}}\",\n        \"backImage\": \"{{backImage}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "14e69175-5dec-460f-aadf-59cc589c007c",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "deposit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"image\": {\n        \"frontImage\": \"{{frontImage}}\",\n        \"backImage\": \"{{backImage}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /deposit for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Deposit success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "e5937322-a27b-48b2-8ba4-7b36600c0826",
      "name": "GetAccountInfo",
      "request": {
        "name": "GetAccountInfo",
        "description": {
          "content": "fetch customer account details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetAccountInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "b07d2ae7-7e70-4858-87fd-66c52c6c3b14",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"customerId\": -48884369.48550723,\n  \"accounts\": [\n    {\n      \"customerId\": -18467637.129267126,\n      \"accountName\": \"pariatur deserunt\",\n      \"accountNickname\": \"dol\",\n      \"accountNumber\": \"amet mollit quis dolor\",\n      \"accountType\": \"minim dolore elit\",\n      \"activatedDate\": \"reprehenderit ex cillum do\",\n      \"availableBalance\": 27997220.558262452,\n      \"availableCash\": -50818944.54789007,\n      \"availableCashLimit\": -40229723.31232717,\n      \"availableCredit\": 73177480.69416213,\n      \"bankName\": \"consequat enim ex in\",\n      \"branchName\": \"occaecat nisi\",\n      \"cardName\": \"non culpa\",\n      \"cardNumber\": \"ullamco proident deserunt dolor\",\n      \"cardStatus\": \"irure culpa\",\n      \"cardType\": \"non id in\",\n      \"creditLimit\": -1496241.217858389,\n      \"currency\": \"pariatur enim velit dolor\",\n      \"currentBalance\": 42895290.12068486,\n      \"deactivatedDate\": \"occaecat in consequat ea laborum\",\n      \"dueAmount\": 30121658.869638205,\n      \"dueDate\": \"voluptate in\",\n      \"earlyWithdrawalPenalty\": 5072659.550323606,\n      \"email\": \"cillum proident e\",\n      \"expDate\": \"ut aliquip exercitation\",\n      \"fdType\": \"Duis exercitation fugiat eiusmod ex\",\n      \"image\": \"voluptate\",\n      \"interestRate\": -72962385.4826829,\n      \"internalTransferFromEnabled\": true,\n      \"internalTransferToEnabled\": true,\n      \"isPrimaryMobile\": false,\n      \"isAlternateMobileNumber\": false,\n      \"isStatement\": true,\n      \"lastDrawDate\": \"commodo\",\n      \"loanMaturityDate\": \"in officia\",\n      \"loanOriginationDate\": \"commodo\",\n      \"location\": \"ut\",\n      \"lastUpdated\": \"do\",\n      \"maxTransactionLimit\": \"ut\",\n      \"maturityDate\": \"magna laboris\",\n      \"minimumPaymentDue\": \"non nisi adipisicing\",\n      \"minimumBalance\": \"in\",\n      \"monthlyPayment\": 70611976.52945092,\n      \"openingBalance\": 38345864.664076895,\n      \"originalLoanAmount\": -49935819.570907384,\n      \"P2PLimit\": -6523977.355880544,\n      \"p2pEnabled\": 51465076.17726967,\n      \"paybillEnabled\": false,\n      \"payoffAmount\": 26913060.296336025,\n      \"personalBankerName\": \"ut exercitation\",\n      \"personalBankerContact\": {\n        \"email\": \"anim minim\",\n        \"mobileNumber\": \"irure u\"\n      },\n      \"phone\": 40322006.61419684,\n      \"postedBalance\": -33338531.04350757,\n      \"principalBalance\": \"nostrud ipsum elit dolor\",\n      \"productCode\": \"laboris\",\n      \"productName\": \"ipsum do eiusmod consectetur aliquip\",\n      \"propertyAddress\": \"velit ullamco Duis\",\n      \"rewardPoints\": \"irure\",\n      \"routingNumber\": \"reprehenderit adipisicing pariatur\",\n      \"statementDate\": \"conse\",\n      \"status\": \"ullamco elit dolor\",\n      \"swiftCode\": \"aute sunt occaecat\",\n      \"totalBalance\": -63878242.045551345,\n      \"unbilledAmount\": -16049916.849794641,\n      \"valueAtMaturity\": -75097760.89423594,\n      \"holdAmount\": -73375807.64017865,\n      \"unclearFundsAmount\": -11166529.839043409,\n      \"averageMonthlyBalance\": -10256528.005570516,\n      \"netWithdrawableBalance\": 93309623.27077416,\n      \"totalTenure\": \"adipisicing sint officia Excepteur\",\n      \"remainingTenure\": \"nostrud occa\",\n      \"debitAccountNumber\": \"aliqua amet ipsum officia\",\n      \"lateFee\": 78347089.87117493,\n      \"bounceCharge\": 13970168.383333534,\n      \"totalCharges\": 93307068.67129111,\n      \"overDueAmount\": 98274742.96768215,\n      \"cardDetails\": [\n        {\n          \"cardName\": \"ad ullamco\",\n          \"cardNumber\": \"cupidatat Excepteur\",\n          \"cardStatus\": \"enim\",\n          \"cardImage\": \"ad sunt occaecat ut\",\n          \"cardType\": \"esse adipisicing ea\",\n          \"expDate\": \"cillum pariatur fugiat\",\n          \"displayCardStatus\": \"proident aliqua sint ea\",\n          \"primaryCard\": \"velit veniam\",\n          \"cardChannelInfo\": {\n            \"ATM\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"offline\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"international\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"online\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"contactless\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"cardRestrictions\": {\n            \"countries\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"MCC\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"blockReason\": \"ut non\",\n          \"nameOnCard\": \"Excepteur in incididunt\",\n          \"cardNetwork\": \"nostrud fugiat exercitation velit\",\n          \"autopay\": {\n            \"enabled\": false,\n            \"sourceAccountId\": \"veniam nostrud consectetur\",\n            \"paymentType\": \"cupidatat Ut pariatur\",\n            \"onStatementDate\": true,\n            \"dayOfMonth\": \"adipisicing sit cillum cupidatat\"\n          },\n          \"dueAmount\": 98630513.43899208,\n          \"dueDate\": \"dolore consequat cupidatat\",\n          \"minimumPaymentDue\": 99633443.97301483,\n          \"partialPaymentPaid\": 13905502.922644481\n        },\n        {\n          \"cardName\": \"in sint minim ut et\",\n          \"cardNumber\": \"culpa veniam laborum\",\n          \"cardStatus\": \"ullamco Ut\",\n          \"cardImage\": \"sed do eiusmod\",\n          \"cardType\": \"sit officia\",\n          \"expDate\": \"dolor exercitation magna deserunt\",\n          \"displayCardStatus\": \"consequat est aliquip\",\n          \"primaryCard\": \"ut velit\",\n          \"cardChannelInfo\": {\n            \"ATM\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"offline\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"international\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"online\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"contactless\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"cardRestrictions\": {\n            \"countries\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"MCC\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"blockReason\": \"cupidatat do ex\",\n          \"nameOnCard\": \"pariatur Lorem\",\n          \"cardNetwork\": \"occaecat Ut ipsum enim\",\n          \"autopay\": {\n            \"enabled\": false,\n            \"sourceAccountId\": \"dolore do\",\n            \"paymentType\": \"cillum\",\n            \"onStatementDate\": false,\n            \"dayOfMonth\": \"eu commodo\"\n          },\n          \"dueAmount\": -13126406.0007485,\n          \"dueDate\": \"quis dolor nu\",\n          \"minimumPaymentDue\": -47191760.36297288,\n          \"partialPaymentPaid\": 46207911.593369246\n        }\n      ],\n      \"IsCrossAccount\": false\n    },\n    {\n      \"customerId\": -90902852.02857351,\n      \"accountName\": \"consectetur\",\n      \"accountNickname\": \"ex enim\",\n      \"accountNumber\": \"dolore fugiat\",\n      \"accountType\": \"id tempor\",\n      \"activatedDate\": \"aute officia\",\n      \"availableBalance\": -66197828.24208467,\n      \"availableCash\": 32489727.842069045,\n      \"availableCashLimit\": 34778165.162189156,\n      \"availableCredit\": -11560480.331207395,\n      \"bankName\": \"nisi sint ea\",\n      \"branchName\": \"laborum dolore ullamco dolore\",\n      \"cardName\": \"occaecat aliqua\",\n      \"cardNumber\": \"cillum eiusmod\",\n      \"cardStatus\": \"Excepteur cillum velit dolor Lorem\",\n      \"cardType\": \"commodo\",\n      \"creditLimit\": 98319717.11833346,\n      \"currency\": \"\",\n      \"currentBalance\": 34775142.20655206,\n      \"deactivatedDate\": \"sunt proident\",\n      \"dueAmount\": -80770598.07165794,\n      \"dueDate\": \"dolore ea\",\n      \"earlyWithdrawalPenalty\": 22275737.786153555,\n      \"email\": \"ullamco sint anim nulla Ut\",\n      \"expDate\": \"amet\",\n      \"fdType\": \"aliqua velit aute\",\n      \"image\": \"eiusmod Duis Ut minim\",\n      \"interestRate\": 33353431.818920627,\n      \"internalTransferFromEnabled\": true,\n      \"internalTransferToEnabled\": true,\n      \"isPrimaryMobile\": true,\n      \"isAlternateMobileNumber\": false,\n      \"isStatement\": false,\n      \"lastDrawDate\": \"non culpa sed ut\",\n      \"loanMaturityDate\": \"ad non consectetur anim\",\n      \"loanOriginationDate\": \"ullamco veniam ut\",\n      \"location\": \"consectetur adipisicing tempor mollit\",\n      \"lastUpdated\": \"cillum cupidatat aliquip officia\",\n      \"maxTransactionLimit\": \"in Ut exercitation\",\n      \"maturityDate\": \"elit laboris quis\",\n      \"minimumPaymentDue\": \"amet exercitation\",\n      \"minimumBalance\": \"ullamco nisi do in incididunt\",\n      \"monthlyPayment\": -76019172.43386684,\n      \"openingBalance\": 9182132.598838732,\n      \"originalLoanAmount\": -59286119.59342289,\n      \"P2PLimit\": -72838330.22113115,\n      \"p2pEnabled\": 74691651.71196419,\n      \"paybillEnabled\": false,\n      \"payoffAmount\": 19593944.01079902,\n      \"personalBankerName\": \"nisi commodo\",\n      \"personalBankerContact\": {\n        \"email\": \"esse voluptate enim pariatur\",\n        \"mobileNumber\": \"tempor occaecat ut cillum\"\n      },\n      \"phone\": 9524295.200984374,\n      \"postedBalance\": 629611.61049366,\n      \"principalBalance\": \"pariatur enim\",\n      \"productCode\": \"Ut ut culpa nisi velit\",\n      \"productName\": \"culpa incididunt laborum eiusmod\",\n      \"propertyAddress\": \"irure est commodo\",\n      \"rewardPoints\": \"magna Ut\",\n      \"routingNumber\": \"exercitation ad\",\n      \"statementDate\": \"sed in offici\",\n      \"status\": \"eiusmod\",\n      \"swiftCode\": \"quis tempor\",\n      \"totalBalance\": 75448102.19215518,\n      \"unbilledAmount\": -98300612.60422185,\n      \"valueAtMaturity\": -8621874.55856356,\n      \"holdAmount\": 48355202.04186103,\n      \"unclearFundsAmount\": -64775953.25204639,\n      \"averageMonthlyBalance\": 22729680.902880967,\n      \"netWithdrawableBalance\": -50209065.32349736,\n      \"totalTenure\": \"tempor dolore aliquip\",\n      \"remainingTenure\": \"sint in dolor qui\",\n      \"debitAccountNumber\": \"eu laborum cillum dolore\",\n      \"lateFee\": 73017494.89952952,\n      \"bounceCharge\": 70281456.782969,\n      \"totalCharges\": -19523978.178317055,\n      \"overDueAmount\": 22294429.310676023,\n      \"cardDetails\": [\n        {\n          \"cardName\": \"labore consequat in\",\n          \"cardNumber\": \"esse\",\n          \"cardStatus\": \"adipisicing \",\n          \"cardImage\": \"dolore laborum esse occaecat pariatur\",\n          \"cardType\": \"fugiat sed enim\",\n          \"expDate\": \"consequat in nulla fugiat\",\n          \"displayCardStatus\": \"in Excepteur nisi amet ex\",\n          \"primaryCard\": \"in pariatur consectetur commodo\",\n          \"cardChannelInfo\": {\n            \"ATM\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"offline\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"international\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"online\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"contactless\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"cardRestrictions\": {\n            \"countries\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"MCC\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"blockReason\": \"ullamco mollit quis min\",\n          \"nameOnCard\": \"in aute id sit enim\",\n          \"cardNetwork\": \"Lorem deserunt\",\n          \"autopay\": {\n            \"enabled\": true,\n            \"sourceAccountId\": \"voluptate laboris\",\n            \"paymentType\": \"culpa veniam n\",\n            \"onStatementDate\": false,\n            \"dayOfMonth\": \"sint enim laboris consectetur cillum\"\n          },\n          \"dueAmount\": -90735263.11010766,\n          \"dueDate\": \"et in id\",\n          \"minimumPaymentDue\": 44531557.78131178,\n          \"partialPaymentPaid\": 87377971.9142831\n        },\n        {\n          \"cardName\": \"exercitation\",\n          \"cardNumber\": \"anim ut cillum in\",\n          \"cardStatus\": \"aliquip ex\",\n          \"cardImage\": \"ut culpa consectetur\",\n          \"cardType\": \"ullamco est ut\",\n          \"expDate\": \"sint irure aliquip mollit consectetur\",\n          \"displayCardStatus\": \"in sunt non fugiat\",\n          \"primaryCard\": \"quis reprehenderit veniam\",\n          \"cardChannelInfo\": {\n            \"ATM\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"offline\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"international\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"online\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"contactless\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"cardRestrictions\": {\n            \"countries\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"MCC\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"blockReason\": \"Duis voluptate Excepteur\",\n          \"nameOnCard\": \"Lorem fugiat dolore lab\",\n          \"cardNetwork\": \"dolor ex sunt proident\",\n          \"autopay\": {\n            \"enabled\": true,\n            \"sourceAccountId\": \"proident velit id enim\",\n            \"paymentType\": \"magna est officia cupidatat\",\n            \"onStatementDate\": false,\n            \"dayOfMonth\": \"dolor Ut sint aliquip\"\n          },\n          \"dueAmount\": 59766630.00161496,\n          \"dueDate\": \"aliqua Ut consequat\",\n          \"minimumPaymentDue\": 76424112.25255409,\n          \"partialPaymentPaid\": -23639563.23972705\n        }\n      ],\n      \"IsCrossAccount\": false\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ad306e59-6708-4e7e-9c7e-70e2475dedd0",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "750e5a68-f9df-4848-b256-9dec5571fb73",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetAccountInfo for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `customerId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customerId`)){\n                if(pm.expect(ld.get(pm.response.json(), `customerId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customerId`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `accounts` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accounts`)){\n                if(pm.expect(ld.get(pm.response.json(), `accounts`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `accounts`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the accounts field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`accounts`);\n            let accountsArray = ld.get(pm.response.json(), `accounts`, \"\");\n            for (let accounts_it = 0; accounts_it < accountsArray.length; accounts_it++) {\n                let iterator = accounts_it;\n                \t\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].customerId' has 'customerId' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].customerId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].customerId`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].accountName' has 'accountName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].accountName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].accountName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].accountNickname' has 'accountNickname' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].accountNickname`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].accountNickname`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].accountNumber' has 'accountNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].accountNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].accountNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].accountType' has 'accountType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].accountType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].accountType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].activatedDate' has 'activatedDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].activatedDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].activatedDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].availableBalance' has 'availableBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].availableBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].availableBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].availableCash' has 'availableCash' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].availableCash`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].availableCash`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].availableCashLimit' has 'availableCashLimit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].availableCashLimit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].availableCashLimit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].availableCredit' has 'availableCredit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].availableCredit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].availableCredit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].bankName' has 'bankName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].bankName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].bankName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].branchName' has 'branchName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].branchName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].branchName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardName' has 'cardName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardNumber' has 'cardNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardStatus' has 'cardStatus' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardStatus`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardStatus`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardType' has 'cardType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].creditLimit' has 'creditLimit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].creditLimit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].creditLimit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].currency' has 'currency' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].currency`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].currency`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].currentBalance' has 'currentBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].currentBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].currentBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].deactivatedDate' has 'deactivatedDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].deactivatedDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].deactivatedDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].dueAmount' has 'dueAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].dueAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].dueAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].dueDate' has 'dueDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].dueDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].dueDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].earlyWithdrawalPenalty' has 'earlyWithdrawalPenalty' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].earlyWithdrawalPenalty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].earlyWithdrawalPenalty`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].email' has 'email' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].email`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].email`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].expDate' has 'expDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].expDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].expDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].fdType' has 'fdType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].fdType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].fdType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].image' has 'image' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].image`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].image`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].interestRate' has 'interestRate' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].interestRate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].interestRate`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].internalTransferFromEnabled' has 'internalTransferFromEnabled' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].internalTransferFromEnabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].internalTransferFromEnabled`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].internalTransferToEnabled' has 'internalTransferToEnabled' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].internalTransferToEnabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].internalTransferToEnabled`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].isPrimaryMobile' has 'isPrimaryMobile' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].isPrimaryMobile`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].isPrimaryMobile`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].isAlternateMobileNumber' has 'isAlternateMobileNumber' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].isAlternateMobileNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].isAlternateMobileNumber`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].isStatement' has 'isStatement' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].isStatement`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].isStatement`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].lastDrawDate' has 'lastDrawDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].lastDrawDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].lastDrawDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].loanMaturityDate' has 'loanMaturityDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].loanMaturityDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].loanMaturityDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].loanOriginationDate' has 'loanOriginationDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].loanOriginationDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].loanOriginationDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].location' has 'location' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].location`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].location`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].lastUpdated' has 'lastUpdated' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].lastUpdated`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].lastUpdated`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].maxTransactionLimit' has 'maxTransactionLimit' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].maxTransactionLimit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].maxTransactionLimit`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].maturityDate' has 'maturityDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].maturityDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].maturityDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].minimumPaymentDue' has 'minimumPaymentDue' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].minimumPaymentDue`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].minimumPaymentDue`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].minimumBalance' has 'minimumBalance' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].minimumBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].minimumBalance`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].monthlyPayment' has 'monthlyPayment' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].monthlyPayment`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].monthlyPayment`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].openingBalance' has 'openingBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].openingBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].openingBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].originalLoanAmount' has 'originalLoanAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].originalLoanAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].originalLoanAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].P2PLimit' has 'P2PLimit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].P2PLimit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].P2PLimit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].p2pEnabled' has 'p2pEnabled' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].p2pEnabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].p2pEnabled`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].paybillEnabled' has 'paybillEnabled' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].paybillEnabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].paybillEnabled`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].payoffAmount' has 'payoffAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].payoffAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].payoffAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].personalBankerName' has 'personalBankerName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].personalBankerName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].personalBankerName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].personalBankerContact' has 'personalBankerContact' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].personalBankerContact`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].personalBankerContact`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].personalBankerContact.email' has 'email' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].personalBankerContact.email`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].personalBankerContact.email`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].personalBankerContact.mobileNumber' has 'mobileNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].personalBankerContact.mobileNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].personalBankerContact.mobileNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].phone' has 'phone' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].phone`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].phone`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].postedBalance' has 'postedBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].postedBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].postedBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].principalBalance' has 'principalBalance' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].principalBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].principalBalance`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].productCode' has 'productCode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].productCode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].productCode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].productName' has 'productName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].productName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].productName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].propertyAddress' has 'propertyAddress' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].propertyAddress`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].propertyAddress`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].rewardPoints' has 'rewardPoints' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].rewardPoints`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].rewardPoints`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].routingNumber' has 'routingNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].routingNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].routingNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].statementDate' has 'statementDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].statementDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].statementDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].status' has 'status' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].status`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].status`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].swiftCode' has 'swiftCode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].swiftCode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].swiftCode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].totalBalance' has 'totalBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].totalBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].totalBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].unbilledAmount' has 'unbilledAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].unbilledAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].unbilledAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].valueAtMaturity' has 'valueAtMaturity' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].valueAtMaturity`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].valueAtMaturity`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].holdAmount' has 'holdAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].holdAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].holdAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].unclearFundsAmount' has 'unclearFundsAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].unclearFundsAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].unclearFundsAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].averageMonthlyBalance' has 'averageMonthlyBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].averageMonthlyBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].averageMonthlyBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].netWithdrawableBalance' has 'netWithdrawableBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].netWithdrawableBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].netWithdrawableBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].totalTenure' has 'totalTenure' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].totalTenure`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].totalTenure`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].remainingTenure' has 'remainingTenure' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].remainingTenure`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].remainingTenure`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].debitAccountNumber' has 'debitAccountNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].debitAccountNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].debitAccountNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].lateFee' has 'lateFee' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].lateFee`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].lateFee`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].bounceCharge' has 'bounceCharge' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].bounceCharge`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].bounceCharge`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].totalCharges' has 'totalCharges' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].totalCharges`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].totalCharges`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].overDueAmount' has 'overDueAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].overDueAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].overDueAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accountsArray' has 'cardDetails' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the accounts[${accounts_it}].cardDetails field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`accounts[${accounts_it}].cardDetails`);\n            let cardDetailsArray = ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails`, \"\");\n            for (let cardDetails_it = 0; cardDetails_it < cardDetailsArray.length; cardDetails_it++) {\n                let iterator = cardDetails_it;\n                \t\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardName' has 'cardName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNumber' has 'cardNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardStatus' has 'cardStatus' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardStatus`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardStatus`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardImage' has 'cardImage' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardImage`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardImage`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardType' has 'cardType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].expDate' has 'expDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].expDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].expDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].displayCardStatus' has 'displayCardStatus' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].displayCardStatus`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].displayCardStatus`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].primaryCard' has 'primaryCard' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].primaryCard`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].primaryCard`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo' has 'cardChannelInfo' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM' has 'ATM' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.limit' has 'limit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.limit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.limit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline' has 'offline' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.limit' has 'limit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.limit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.limit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international' has 'international' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.limit' has 'limit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.limit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.limit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online' has 'online' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.limit' has 'limit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.limit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.limit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless' has 'contactless' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.limit' has 'limit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.limit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.limit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions' has 'cardRestrictions' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray' has 'countries' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries`);\n            let countriesArray = ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries`, \"\");\n            for (let countries_it = 0; countries_it < countriesArray.length; countries_it++) {\n                let iterator = countries_it;\n                \t\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries[${countries_it}].countrycode' has 'countrycode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries[${countries_it}].countrycode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries[${countries_it}].countrycode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'cardDetailsArray' has 'MCC' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC`);\n            let MCCArray = ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC`, \"\");\n            for (let MCC_it = 0; MCC_it < MCCArray.length; MCC_it++) {\n                let iterator = MCC_it;\n                \t\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].name`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].description' has 'description' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].description`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].description`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].blockReason' has 'blockReason' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].blockReason`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].blockReason`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].nameOnCard' has 'nameOnCard' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].nameOnCard`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].nameOnCard`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNetwork' has 'cardNetwork' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNetwork`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNetwork`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay' has 'autopay' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.enabled' has 'enabled' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.enabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.enabled`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.sourceAccountId' has 'sourceAccountId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.sourceAccountId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.sourceAccountId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.paymentType' has 'paymentType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.paymentType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.paymentType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.onStatementDate' has 'onStatementDate' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.onStatementDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.onStatementDate`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.dayOfMonth' has 'dayOfMonth' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.dayOfMonth`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.dayOfMonth`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueAmount' has 'dueAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueDate' has 'dueDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].minimumPaymentDue' has 'minimumPaymentDue' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].minimumPaymentDue`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].minimumPaymentDue`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].partialPaymentPaid' has 'partialPaymentPaid' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].partialPaymentPaid`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].partialPaymentPaid`, null)).to.equal(\"number\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].IsCrossAccount' has 'IsCrossAccount' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].IsCrossAccount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].IsCrossAccount`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "1bdc7e60-cb69-4715-a983-7c09e4f7de28",
      "name": "to get the details of the mentioned customer account",
      "request": {
        "name": "to get the details of the mentioned customer account",
        "description": {
          "content": "fetch customer account details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetAccountDetails"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountInfo\": [\n        \"{{accountInfo}}\"\n    ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "e5daef30-56eb-4232-ac58-cf7a352346bd",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountDetails"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountInfo\": [\n        \"{{accountInfo}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"customerId\": 11862984.234260172,\n    \"accountName\": \"veniam\",\n    \"accountNickname\": \"pariatur\",\n    \"accountNumber\": \"laborum dolore\",\n    \"accountType\": \"ea Excepteur occaecat ad\",\n    \"activatedDate\": \"in ex aliquip do\",\n    \"availableBalance\": -75942943.42854524,\n    \"availableCash\": 31848525.747228697,\n    \"availableCashLimit\": -83626649.91317534,\n    \"availableCredit\": -35878519.84067978,\n    \"bankName\": \"deserunt aliquip anim\",\n    \"branchName\": \"esse do\",\n    \"cardName\": \"ali\",\n    \"cardNumber\": \"ut\",\n    \"cardStatus\": \"aute ex qui dolor cillum\",\n    \"cardType\": \"amet anim\",\n    \"creditLimit\": 13966183.435008034,\n    \"currency\": \"mollit ut\",\n    \"currentBalance\": 5137375.31246838,\n    \"deactivatedDate\": \"nulla ullamco aliquip in fugiat\",\n    \"dueAmount\": -72259642.73941994,\n    \"dueDate\": \"in culpa eu\",\n    \"earlyWithdrawalPenalty\": -37076566.41206869,\n    \"email\": \"in occaecat fugiat id ut\",\n    \"expDate\": \"laborum dolore\",\n    \"fdType\": \"dolore minim sunt\",\n    \"image\": \"incididunt\",\n    \"interestRate\": -44175003.28306323,\n    \"internalTransferFromEnabled\": false,\n    \"internalTransferToEnabled\": true,\n    \"isPrimaryMobile\": true,\n    \"isAlternateMobileNumber\": false,\n    \"isStatement\": true,\n    \"lastDrawDate\": \"nisi elit\",\n    \"loanMaturityDate\": \"eiusmod esse\",\n    \"loanOriginationDate\": \"dolor in\",\n    \"location\": \"aliqua commodo Duis Excepteur id\",\n    \"lastUpdated\": \"Duis fugiat proident\",\n    \"maxTransactionLimit\": \"velit\",\n    \"maturityDate\": \"velit tempor dolor non\",\n    \"minimumPaymentDue\": \"tempor est reprehenderit\",\n    \"minimumBalance\": \"consectetur labore officia do sit\",\n    \"monthlyPayment\": -56437987.692415126,\n    \"openingBalance\": 67758119.53421852,\n    \"originalLoanAmount\": 87974914.05324975,\n    \"P2PLimit\": 60376253.200701624,\n    \"p2pEnabled\": 48957833.265728325,\n    \"paybillEnabled\": false,\n    \"payoffAmount\": 50550921.856604934,\n    \"personalBankerName\": \"Ut amet proident\",\n    \"personalBankerContact\": {\n      \"email\": \"officia culpa et\",\n      \"mobileNumber\": \"nulla quis\"\n    },\n    \"phone\": 28714838.677838415,\n    \"postedBalance\": -74541200.90796241,\n    \"principalBalance\": \"velit ut Excepteur do\",\n    \"productCode\": \"culpa est Excepteur\",\n    \"productName\": \"ex aliqua pariatur\",\n    \"propertyAddress\": \"commodo Lorem reprehenderit Duis\",\n    \"rewardPoints\": \"in esse labore\",\n    \"routingNumber\": \"in laboris incididunt veniam\",\n    \"statementDate\": \"ea dolor minim\",\n    \"status\": \"cillum in\",\n    \"swiftCode\": \"eiu\",\n    \"totalBalance\": 14466934.453971535,\n    \"unbilledAmount\": -47250348.058622696,\n    \"valueAtMaturity\": 55872239.316740245,\n    \"holdAmount\": 94304757.93602306,\n    \"unclearFundsAmount\": -5819383.81909883,\n    \"averageMonthlyBalance\": -45135122.52550425,\n    \"netWithdrawableBalance\": -61128339.15859306,\n    \"totalTenure\": \"adipisicing enim ipsum\",\n    \"remainingTenure\": \"qui in consectetur Excepteur sunt\",\n    \"debitAccountNumber\": \"Exce\",\n    \"lateFee\": -88044213.23774347,\n    \"bounceCharge\": -20782175.90043944,\n    \"totalCharges\": -70981523.76698281,\n    \"overDueAmount\": -92857123.23022382,\n    \"cardDetails\": [\n      {\n        \"cardName\": \"aute\",\n        \"cardNumber\": \"eu commodo est consequat culpa\",\n        \"cardStatus\": \"ut reprehenderit sed amet u\",\n        \"cardImage\": \"minim sit incididunt sed exercitation\",\n        \"cardType\": \"nulla\",\n        \"expDate\": \"occaecat enim incididunt dolo\",\n        \"displayCardStatus\": \"enim ad\",\n        \"primaryCard\": \"consectetur fugiat\",\n        \"cardChannelInfo\": {\n          \"ATM\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"offline\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"international\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"online\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"contactless\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        \"cardRestrictions\": {\n          \"countries\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"MCC\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"blockReason\": \"dolore amet sunt\",\n        \"nameOnCard\": \"do velit nisi\",\n        \"cardNetwork\": \"mollit incididunt nulla occaecat\",\n        \"autopay\": {\n          \"enabled\": true,\n          \"sourceAccountId\": \"cillum cupidatat sit ex proident\",\n          \"paymentType\": \"dolore\",\n          \"onStatementDate\": false,\n          \"dayOfMonth\": \"mollit nulla voluptate esse\"\n        },\n        \"dueAmount\": 53390537.62994546,\n        \"dueDate\": \"nisi sed non reprehenderit\",\n        \"minimumPaymentDue\": -54530523.534859434,\n        \"partialPaymentPaid\": -45020849.06243433\n      },\n      {\n        \"cardName\": \"nulla \",\n        \"cardNumber\": \"consequat sint dolor\",\n        \"cardStatus\": \"consequat Lorem\",\n        \"cardImage\": \"in consequat sint velit\",\n        \"cardType\": \"proident ea in\",\n        \"expDate\": \"eu consectetur in\",\n        \"displayCardStatus\": \"qui veniam amet nulla\",\n        \"primaryCard\": \"tempor dolor ad ipsum\",\n        \"cardChannelInfo\": {\n          \"ATM\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"offline\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"international\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"online\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"contactless\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        \"cardRestrictions\": {\n          \"countries\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"MCC\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"blockReason\": \"reprehenderit occaecat laboris dolor\",\n        \"nameOnCard\": \"aute dolore Ut ad\",\n        \"cardNetwork\": \"ad dolor officia\",\n        \"autopay\": {\n          \"enabled\": true,\n          \"sourceAccountId\": \"aliqua eu\",\n          \"paymentType\": \"anim enim Ut Duis\",\n          \"onStatementDate\": true,\n          \"dayOfMonth\": \"nisi dolore occaecat esse\"\n        },\n        \"dueAmount\": 25084703.83380112,\n        \"dueDate\": \"ipsum laborum Lorem\",\n        \"minimumPaymentDue\": 351002.2119912505,\n        \"partialPaymentPaid\": -29564252.090887815\n      }\n    ],\n    \"IsCrossAccount\": true\n  },\n  {\n    \"customerId\": -99381218.64998801,\n    \"accountName\": \"quis deserunt\",\n    \"accountNickname\": \"magna incididunt\",\n    \"accountNumber\": \"minim sit dolor est sed\",\n    \"accountType\": \"nulla esse dolore in\",\n    \"activatedDate\": \"enim magna Duis\",\n    \"availableBalance\": 62939510.850580394,\n    \"availableCash\": -38163413.331969135,\n    \"availableCashLimit\": 89233253.64500761,\n    \"availableCredit\": 79125832.45024845,\n    \"bankName\": \"eiusm\",\n    \"branchName\": \"sit incididunt qui et elit\",\n    \"cardName\": \"irure sed labore ex do\",\n    \"cardNumber\": \"sed culpa aliqua in\",\n    \"cardStatus\": \"nulla elit labore enim\",\n    \"cardType\": \"reprehenderit Duis consequat deserunt aute\",\n    \"creditLimit\": -54921679.208526574,\n    \"currency\": \"reprehenderit voluptate occaecat\",\n    \"currentBalance\": 8481078.468949795,\n    \"deactivatedDate\": \"elit nostrud veniam enim\",\n    \"dueAmount\": 74708244.36520806,\n    \"dueDate\": \"mollit et\",\n    \"earlyWithdrawalPenalty\": 44710173.871052,\n    \"email\": \"cillum\",\n    \"expDate\": \"occaecat non in reprehenderit Ut\",\n    \"fdType\": \"laboris\",\n    \"image\": \"Exc\",\n    \"interestRate\": -70766933.6345858,\n    \"internalTransferFromEnabled\": false,\n    \"internalTransferToEnabled\": false,\n    \"isPrimaryMobile\": false,\n    \"isAlternateMobileNumber\": false,\n    \"isStatement\": true,\n    \"lastDrawDate\": \"deserunt ut cupidatat\",\n    \"loanMaturityDate\": \"dolor officia esse laborum\",\n    \"loanOriginationDate\": \"dolore ad\",\n    \"location\": \"dolor irure\",\n    \"lastUpdated\": \"aute Excepteur voluptate aliquip nisi\",\n    \"maxTransactionLimit\": \"commodo\",\n    \"maturityDate\": \"non ut\",\n    \"minimumPaymentDue\": \"dolore irure exercitation\",\n    \"minimumBalance\": \"ullamco labore ut nulla\",\n    \"monthlyPayment\": -71640220.30231348,\n    \"openingBalance\": 61287806.029699564,\n    \"originalLoanAmount\": 21030379.34252377,\n    \"P2PLimit\": 65627609.270460665,\n    \"p2pEnabled\": -44806124.31648212,\n    \"paybillEnabled\": true,\n    \"payoffAmount\": 88987886.82529867,\n    \"personalBankerName\": \"non ut\",\n    \"personalBankerContact\": {\n      \"email\": \"mollit tempor\",\n      \"mobileNumber\": \"in ad irure in sunt\"\n    },\n    \"phone\": 73311120.12985793,\n    \"postedBalance\": -66903950.82432529,\n    \"principalBalance\": \"non consectetur\",\n    \"productCode\": \"enim exercitation\",\n    \"productName\": \"dolore qui adipisicing dolor cupidatat\",\n    \"propertyAddress\": \"nostrud id elit non\",\n    \"rewardPoints\": \"\",\n    \"routingNumber\": \"aute irure non\",\n    \"statementDate\": \"cupidatat\",\n    \"status\": \"qui id officia pariatur\",\n    \"swiftCode\": \"dolor\",\n    \"totalBalance\": -1333478.210255608,\n    \"unbilledAmount\": -37779484.60698273,\n    \"valueAtMaturity\": -21905619.726796165,\n    \"holdAmount\": 78237163.15302947,\n    \"unclearFundsAmount\": -71232529.96970333,\n    \"averageMonthlyBalance\": 92698601.52434489,\n    \"netWithdrawableBalance\": -8277482.490775064,\n    \"totalTenure\": \"laborum ut\",\n    \"remainingTenure\": \"qui exercitation anim\",\n    \"debitAccountNumber\": \"amet qui dolore nostrud\",\n    \"lateFee\": 83335962.67745063,\n    \"bounceCharge\": -83009443.22442825,\n    \"totalCharges\": 36374464.03791559,\n    \"overDueAmount\": 16339066.283069357,\n    \"cardDetails\": [\n      {\n        \"cardName\": \"fugiat esse\",\n        \"cardNumber\": \"ipsum culpa\",\n        \"cardStatus\": \"voluptate nisi reprehenderit consectetur\",\n        \"cardImage\": \"pariatur labore quis\",\n        \"cardType\": \"dolor reprehenderit exercitation\",\n        \"expDate\": \"culpa dolor labore\",\n        \"displayCardStatus\": \"est adipisicing ut\",\n        \"primaryCard\": \"irure sunt anim dolor aliqua\",\n        \"cardChannelInfo\": {\n          \"ATM\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"offline\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"international\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"online\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"contactless\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        \"cardRestrictions\": {\n          \"countries\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"MCC\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"blockReason\": \"officia cillum exercitation\",\n        \"nameOnCard\": \"esse reprehenderit consectetur\",\n        \"cardNetwork\": \"enim\",\n        \"autopay\": {\n          \"enabled\": true,\n          \"sourceAccountId\": \"mollit ad Lo\",\n          \"paymentType\": \"sit cupidatat ad nostrud\",\n          \"onStatementDate\": false,\n          \"dayOfMonth\": \"non enim ad\"\n        },\n        \"dueAmount\": -77304589.80207704,\n        \"dueDate\": \"velit Duis irure\",\n        \"minimumPaymentDue\": 2446910.063908264,\n        \"partialPaymentPaid\": -40012261.92339122\n      },\n      {\n        \"cardName\": \"non cupidatat\",\n        \"cardNumber\": \"sed\",\n        \"cardStatus\": \"non\",\n        \"cardImage\": \"mollit esse cillum cupidatat\",\n        \"cardType\": \"incididunt Ut in proident\",\n        \"expDate\": \"mollit qui id\",\n        \"displayCardStatus\": \"est aute Duis\",\n        \"primaryCard\": \"et qui est\",\n        \"cardChannelInfo\": {\n          \"ATM\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"offline\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"international\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"online\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"contactless\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        \"cardRestrictions\": {\n          \"countries\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"MCC\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"blockReason\": \"elit consequat eu\",\n        \"nameOnCard\": \"est ipsum officia non\",\n        \"cardNetwork\": \"elit proident Ut ipsum\",\n        \"autopay\": {\n          \"enabled\": true,\n          \"sourceAccountId\": \"tempor deserunt\",\n          \"paymentType\": \"ut \",\n          \"onStatementDate\": false,\n          \"dayOfMonth\": \"commodo quis ut minim\"\n        },\n        \"dueAmount\": 75556188.10442585,\n        \"dueDate\": \"id dolor cupidatat ut Excepteur\",\n        \"minimumPaymentDue\": -40883083.32479724,\n        \"partialPaymentPaid\": -43509518.194360286\n      }\n    ],\n    \"IsCrossAccount\": true\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "8202edab-f0b9-4480-b785-c241e38e14a8",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountDetails"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountInfo\": [\n        \"{{accountInfo}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "24131bca-984d-4377-a07b-a32faceb2198",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountDetails"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountInfo\": [\n        \"{{accountInfo}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetAccountDetails for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "ac220c0b-dddd-41dd-8e39-663e2079145d",
      "name": "to get the limits of customer accounts",
      "request": {
        "name": "to get the limits of customer accounts",
        "description": {
          "content": "fetch customer account limits",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetAccountsLimit"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "df704daa-8c33-4212-8ba0-4368c3fc896a",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountsLimit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"accountName\": \"voluptate proident in occaecat\",\n    \"accountNickname\": \"quis incididunt aliquip non\",\n    \"accountNumber\": \"dolore amet est\",\n    \"accountType\": \"nisi mollit\",\n    \"balance\": \"id incidid\",\n    \"cardName\": \"amet reprehenderit ullamco\",\n    \"cardNumber\": \"irure\",\n    \"currency\": \"ut\",\n    \"customerId\": 96587282.48083776,\n    \"perTxn\": 19581738.002255693,\n    \"status\": \"officia\",\n    \"availableCashLimit\": -29764994.661014393,\n    \"creditLimit\": -40489743.31081716,\n    \"availableCredit\": 96800866.49032784,\n    \"purchase\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": 93226656.60476622,\n          \"maximum\": -88385145.82090582,\n          \"spent\": -95679621.90286003\n        },\n        \"daily\": {\n          \"available\": -17520653.244825006,\n          \"maximum\": -31510521.383745432,\n          \"spent\": 62477537.0490354\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": -36271503.05377178,\n          \"maximum\": 80619883.67891434,\n          \"usedup\": -10979857.7838061\n        },\n        \"daily\": {\n          \"available\": 79564493.69918692,\n          \"maximum\": 14967956.73468791,\n          \"usedup\": 46565535.76578352\n        }\n      }\n    },\n    \"txnsPerDay\": {\n      \"available\": 137132.78936888278,\n      \"maximum\": -72403539.92092091,\n      \"usedup\": 31376225.160082206,\n      \"amountperday\": -74449271.45322073\n    },\n    \"withdrawal\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": 61779884.33509198,\n          \"maximum\": 87971021.03792486,\n          \"spent\": -25678026.375702605\n        },\n        \"daily\": {\n          \"available\": 47180085.640275985,\n          \"maximum\": -84275539.75721906,\n          \"spent\": -87433168.71090382\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": -58378604.46118142,\n          \"maximum\": -46583226.09870527,\n          \"usedup\": -82973158.88611788\n        },\n        \"daily\": {\n          \"available\": 45740234.5253644,\n          \"maximum\": -31267357.79932943,\n          \"usedup\": -77894899.93597329\n        }\n      }\n    }\n  },\n  {\n    \"accountName\": \"consect\",\n    \"accountNickname\": \"veniam incididunt occaecat dolor\",\n    \"accountNumber\": \"Duis consectetur Excepteur\",\n    \"accountType\": \"labore\",\n    \"balance\": \"in anim Lorem magna\",\n    \"cardName\": \"eu in\",\n    \"cardNumber\": \"laboris Duis adipisicing consequat voluptate\",\n    \"currency\": \"cupidatat\",\n    \"customerId\": -5041372.024109185,\n    \"perTxn\": -45338730.01959625,\n    \"status\": \"exercitation mollit aute pari\",\n    \"availableCashLimit\": 31638910.704327166,\n    \"creditLimit\": 54605283.389745235,\n    \"availableCredit\": 60682536.35974079,\n    \"purchase\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": -73406168.78125395,\n          \"maximum\": -57834807.75386902,\n          \"spent\": -88518391.74375345\n        },\n        \"daily\": {\n          \"available\": 82711482.44470745,\n          \"maximum\": 32046303.153032914,\n          \"spent\": -8333867.562152177\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": -23114874.728676856,\n          \"maximum\": -43807600.88952211,\n          \"usedup\": -95190548.0945228\n        },\n        \"daily\": {\n          \"available\": -220522.51304854453,\n          \"maximum\": -19828834.30876474,\n          \"usedup\": -63413357.849170946\n        }\n      }\n    },\n    \"txnsPerDay\": {\n      \"available\": 60866518.84766939,\n      \"maximum\": 47132421.89699921,\n      \"usedup\": 48436229.97244501,\n      \"amountperday\": 73519448.40992749\n    },\n    \"withdrawal\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": -59361539.48090333,\n          \"maximum\": -34595315.09232705,\n          \"spent\": -7657506.714228913\n        },\n        \"daily\": {\n          \"available\": -90675360.50046057,\n          \"maximum\": 62265451.64742592,\n          \"spent\": -54506625.37597002\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": 38139151.43787837,\n          \"maximum\": -6126918.031313807,\n          \"usedup\": -13614212.394375786\n        },\n        \"daily\": {\n          \"available\": 17159938.009002566,\n          \"maximum\": 7681987.928078592,\n          \"usedup\": 68717229.70831448\n        }\n      }\n    }\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "2eba4360-10c6-47e2-b041-28349b28178c",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountsLimit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "c8c661a4-82f8-45f1-a0b3-ad010558d68c",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountsLimit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetAccountsLimit for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "4f5e63e2-af54-4809-8052-a868826d148e",
      "name": "to get the limits of customer accounts",
      "request": {
        "name": "to get the limits of customer accounts",
        "description": {
          "content": "fetch customer account limits",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetAccountSpecificLimitsInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": [\n        \"{{accountNumber}}\"\n    ],\n    \"cardNumber\": [\n        \"{{cardNumber}}\"\n    ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "3f915f3b-69bb-4150-970b-27cdda60bb3b",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountSpecificLimitsInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": [\n        \"{{accountNumber}}\"\n    ],\n    \"cardNumber\": [\n        \"{{cardNumber}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"customerId\": 1045300,\n    \"currency\": \"USD\",\n    \"withdrawal\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": 5000,\n          \"maximum\": 8000,\n          \"spent\": 3000\n        },\n        \"daily\": {\n          \"available\": 500,\n          \"maximum\": 800,\n          \"spent\": 300\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": 20,\n          \"maximum\": 30,\n          \"usedup\": 10\n        },\n        \"daily\": {\n          \"available\": 5,\n          \"maximum\": 8,\n          \"usedup\": 3\n        }\n      }\n    },\n    \"purchase\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": 5000,\n          \"maximum\": 8000,\n          \"spent\": 3000\n        },\n        \"daily\": {\n          \"available\": 500,\n          \"maximum\": 800,\n          \"spent\": 300\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": 20,\n          \"maximum\": 30,\n          \"usedup\": 10\n        },\n        \"daily\": {\n          \"available\": 5,\n          \"maximum\": 8,\n          \"usedup\": 3\n        }\n      }\n    },\n    \"txnsPerDay\": {\n      \"available\": 5,\n      \"maximum\": 8,\n      \"usedup\": 3,\n      \"amount\": 500\n    },\n    \"perTxn\": 500\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "7a0af2ea-5a21-412b-85b8-515a0866b5e2",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountSpecificLimitsInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": [\n        \"{{accountNumber}}\"\n    ],\n    \"cardNumber\": [\n        \"{{cardNumber}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "045d2cc3-6e1f-43d8-acb7-44ec509aa461",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountSpecificLimitsInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": [\n        \"{{accountNumber}}\"\n    ],\n    \"cardNumber\": [\n        \"{{cardNumber}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetAccountSpecificLimitsInfo for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "0cd1fcd7-ceff-48d9-9752-473402c5b09b",
      "name": "UpdateAccountInfo",
      "request": {
        "name": "UpdateAccountInfo",
        "description": {
          "content": "Update customer account details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "UpdateAccountInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\",\n    \"isStatement\": \"{{isStatement}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "aafdce6b-dc99-44cb-9709-8eaafc6a0168",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\",\n    \"isStatement\": \"{{isStatement}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "acd92a1b-5390-408d-9e29-7a867af50d49",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\",\n    \"isStatement\": \"{{isStatement}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "d1ddc805-f03f-4f3e-9463-61bf7754c925",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\",\n    \"isStatement\": \"{{isStatement}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /UpdateAccountInfo for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "348e738d-3e87-431c-b71d-3631f5308e61",
      "name": "GetCustomerInfo",
      "request": {
        "name": "GetCustomerInfo",
        "description": {
          "content": "fetch customer information",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetCustomerInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "15a705a9-efe8-40a8-8c80-ccf7be78368a",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"alternatePhoneNumber\": 91043402.38149121,\n  \"customerId\": \"commodo deserunt\",\n  \"email\": \"mollit velit cupidatat\",\n  \"identificationNumber\": -30655718.9290507,\n  \"identificationType\": \"consequat ea sit ad\",\n  \"image\": \"est occaecat qui\",\n  \"isAlternateMobileNumber\": true,\n  \"isPrimaryMobileNumber\": false,\n  \"location\": \"ut\",\n  \"name\": \"id qui\",\n  \"firstName\": \"exercitation fugiat sit\",\n  \"lastName\": \"occa\",\n  \"personalBanker\": {\n    \"name\": \"anim veniam Duis dese\",\n    \"email\": \"sunt eiusmod cupidatat aliquip\",\n    \"mobileNumber\": \"sit amet nostrud eiusmod proident\"\n  },\n  \"phone\": 24557856.705240592,\n  \"securityQuestions\": [\n    \"commodo sed dolore\",\n    \"incididunt exercitation\"\n  ],\n  \"segmentId\": -43538253.230396815\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "0cb3e3dc-39ae-4a1b-8120-6ae40092f7f5",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "3362224d-49d9-4984-9f38-9863a9d1a979",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetCustomerInfo for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `alternatePhoneNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`alternatePhoneNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `alternatePhoneNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `alternatePhoneNumber`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customerId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customerId`)){\n                if(pm.expect(ld.get(pm.response.json(), `customerId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customerId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `identificationNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`identificationNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `identificationNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `identificationNumber`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `identificationType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`identificationType`)){\n                if(pm.expect(ld.get(pm.response.json(), `identificationType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `identificationType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `image` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n                if(pm.expect(ld.get(pm.response.json(), `image`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isAlternateMobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isAlternateMobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isPrimaryMobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isPrimaryMobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `isPrimaryMobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isPrimaryMobileNumber`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `location` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location`)){\n                if(pm.expect(ld.get(pm.response.json(), `location`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n                if(pm.expect(ld.get(pm.response.json(), `name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `firstName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n                if(pm.expect(ld.get(pm.response.json(), `firstName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `lastName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n                if(pm.expect(ld.get(pm.response.json(), `lastName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.name`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.email`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.mobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.mobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.mobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.mobileNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(pm.response.json(), `phone`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `phone`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `securityQuestions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`securityQuestions`)){\n                if(pm.expect(ld.get(pm.response.json(), `securityQuestions`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `securityQuestions`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `segmentId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`segmentId`)){\n                if(pm.expect(ld.get(pm.response.json(), `segmentId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `segmentId`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "f5706dc0-1521-4fb1-b60c-bf3a5289e213",
      "name": "UpdateCustomerInfo",
      "request": {
        "name": "UpdateCustomerInfo",
        "description": {
          "content": "Update customer information",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "UpdateCustomerInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "ccfa94e3-64d4-4f5e-9879-7dba3d0421b6",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "609ebf29-7738-4373-9983-37803ff91a83",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "2e619018-9690-4b8d-b44f-418e2d82f219",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /UpdateCustomerInfo for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "93e78fbe-be70-442a-ae0f-79711efbe420",
      "name": "GetTransactions",
      "request": {
        "name": "GetTransactions",
        "description": {
          "content": "Fetch transactions information",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetTransactions"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountNumber\": [\n        \"{{accountNumber}}\"\n    ],\n    \"customerId\": \"{{customerId}}\",\n    \"numOfTransactions\": \"{{numOfTransactions}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"sort\": {\n        \"type\": \"{{type}}\",\n        \"value\": \"{{value}}\"\n    },\n    \"transactionAmount\": {\n        \"amount1\": \"{{amount1}}\",\n        \"amount\": {},\n        \"currency\": \"{{currency}}\"\n    },\n    \"category\": [\n        \"{{category}}\"\n    ],\n    \"debitOrCredit\": \"{{debitOrCredit}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "42547105-a7bd-4c66-bcc5-d19045f090f2",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetTransactions"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": [\n        \"{{accountNumber}}\"\n    ],\n    \"customerId\": \"{{customerId}}\",\n    \"numOfTransactions\": \"{{numOfTransactions}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"sort\": {\n        \"type\": \"{{type}}\",\n        \"value\": \"{{value}}\"\n    },\n    \"transactionAmount\": {\n        \"amount1\": \"{{amount1}}\",\n        \"amount\": {},\n        \"currency\": \"{{currency}}\"\n    },\n    \"category\": [\n        \"{{category}}\"\n    ],\n    \"debitOrCredit\": \"{{debitOrCredit}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"customerId\": 6491275.733196035,\n    \"transactionId\": 85959237.4981485,\n    \"accountNumber\": \"ipsum exercitation ex dolore\",\n    \"timestamp\": -59931645.8072662,\n    \"amount\": 8595192.492221981,\n    \"currency\": \"velit esse\",\n    \"debitOrCredit\": \"cillum amet dolore officia\",\n    \"description\": \"elit non ex\",\n    \"paymentMode\": \"anim consequat quis fugiat\",\n    \"DBANames\": \"et Lorem\",\n    \"status\": \"quis laboris deserunt\",\n    \"closingBalance\": -42961408.13679976,\n    \"transacitonType\": \"in in qui\",\n    \"ACHCode\": \"irure enim aliqua dolor\",\n    \"MCCCode\": \"sit velit nostrud Duis\",\n    \"SICCode\": \"et ipsum magna\",\n    \"name\": \"cupidatat ea\",\n    \"address\": \"minim ex sed in\",\n    \"street\": \"et ex\",\n    \"city\": \"labore\",\n    \"state\": \"ea\",\n    \"zip\": \"deserunt in\",\n    \"country\": \"minim deserunt sed ut\",\n    \"phoneNumber\": 1623708.542928487,\n    \"metaInfo\": [\n      {\n        \"name\": \"string\",\n        \"value\": \"string\"\n      },\n      {\n        \"name\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  },\n  {\n    \"customerId\": 66966267.486192554,\n    \"transactionId\": -96469761.67779897,\n    \"accountNumber\": \"Duis volupt\",\n    \"timestamp\": -73760194.12031716,\n    \"amount\": 59445365.32219863,\n    \"currency\": \"deserunt Lorem culpa voluptate\",\n    \"debitOrCredit\": \"laborum nisi et occaecat Excepteur\",\n    \"description\": \"adipisicing nisi ea eiusmod\",\n    \"paymentMode\": \"sit esse\",\n    \"DBANames\": \"Duis\",\n    \"status\": \"proident ut aliqua\",\n    \"closingBalance\": 6965968.758280024,\n    \"transacitonType\": \"reprehenderit\",\n    \"ACHCode\": \"qui c\",\n    \"MCCCode\": \"Lorem laboris nisi\",\n    \"SICCode\": \"Duis ex incididunt cillum\",\n    \"name\": \"labore in aute voluptate\",\n    \"address\": \"enim veniam et occaecat\",\n    \"street\": \"Exce\",\n    \"city\": \"deserunt occaecat\",\n    \"state\": \"commodo nulla voluptate dolore\",\n    \"zip\": \"ut\",\n    \"country\": \"et quis sit occaecat\",\n    \"phoneNumber\": 62412265.29060215,\n    \"metaInfo\": [\n      {\n        \"name\": \"string\",\n        \"value\": \"string\"\n      },\n      {\n        \"name\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetTransactions for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "fab52385-9436-42cb-a6f3-8c3b8ae76de2",
      "name": "TransferFunds",
      "request": {
        "name": "TransferFunds",
        "description": {
          "content": "Transfers funds between accounts",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "TransferFunds"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"date\": \"{{date}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"description\": \"{{description}}\",\n    \"TransactionType\": \"{{TransactionType}}\",\n    \"PaymentType\": \"{{PaymentType}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "b3195fed-d3a8-4635-96ea-cba0c15d51cf",
          "name": "Transaction success",
          "originalRequest": {
            "url": {
              "path": [
                "TransferFunds"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"date\": \"{{date}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"description\": \"{{description}}\",\n    \"TransactionType\": \"{{TransactionType}}\",\n    \"PaymentType\": \"{{PaymentType}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "dd39667c-006f-4113-923a-e7505298f1cd",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "TransferFunds"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"date\": \"{{date}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"description\": \"{{description}}\",\n    \"TransactionType\": \"{{TransactionType}}\",\n    \"PaymentType\": \"{{PaymentType}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "235d826b-5315-4e33-bbc8-ac20f2c2854d",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "TransferFunds"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"date\": \"{{date}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"description\": \"{{description}}\",\n    \"TransactionType\": \"{{TransactionType}}\",\n    \"PaymentType\": \"{{PaymentType}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /TransferFunds for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Transaction success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "105c5958-77d6-4815-8600-e61b1e3cf1d1",
      "name": "GetScheduleTransfers",
      "request": {
        "name": "GetScheduleTransfers",
        "description": {
          "content": "Fetches the scheduled transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetScheduleTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "ef363678-78d9-4209-9426-baadf1a6482d",
          "name": "schedule transfer list response",
          "originalRequest": {
            "url": {
              "path": [
                "GetScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"Type\": \"magna elit\",\n    \"CustomerId\": -7175470.78688474,\n    \"Amount\": 11134562.889662996,\n    \"SourceAccountNumber\": \"laboris proide\",\n    \"TargetAccountNumber\": \"qui exercitation mollit paria\",\n    \"DueDate\": \"amet dolor dolor\",\n    \"InvoiceNumber\": -93783928.09698348,\n    \"Currency\": \"ex pariatur\",\n    \"Status\": \"sint cillum\",\n    \"ScheduledDate\": 93663157.1984241,\n    \"NextScheduleDate\": -48460745.880615175,\n    \"id\": \"officia enim consectetur\"\n  },\n  {\n    \"Type\": \"dolore nostrud\",\n    \"CustomerId\": 91429539.13471228,\n    \"Amount\": 57063694.96330598,\n    \"SourceAccountNumber\": \"aute adipisicing\",\n    \"TargetAccountNumber\": \"eiusmod incididunt culpa et nisi\",\n    \"DueDate\": \"ad sit exercitation adipisicing\",\n    \"InvoiceNumber\": -65966971.98458905,\n    \"Currency\": \"qui laboris deserunt esse\",\n    \"Status\": \"ex qui nulla\",\n    \"ScheduledDate\": -77661636.29760538,\n    \"NextScheduleDate\": -21730508.51892762,\n    \"id\": \"sunt consectetur esse ad\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "6c7c45ad-93a8-41e5-9a65-09f361058207",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "7848e59b-2ddd-4387-9854-cffd15f36d25",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetScheduleTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"schedule transfer list response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "914a9e66-0e0b-43d0-9121-1db4be0dd9a9",
      "name": "UpdateScheduleTransfers",
      "request": {
        "name": "UpdateScheduleTransfers",
        "description": {
          "content": "Update the scheduled transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "UpdateScheduleTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"amount\": \"{{amount}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "bf57c2fb-9a24-43e5-b90a-b5deb94dd880",
          "name": "Scheduled transfer updated successfully",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"paymentId\": \"{{paymentId}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"amount\": \"{{amount}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "3a632838-5eba-455a-bf08-6bfbf48e2768",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"paymentId\": \"{{paymentId}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"amount\": \"{{amount}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ab49e501-2244-4e6c-a108-8394b00c77da",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"paymentId\": \"{{paymentId}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"amount\": \"{{amount}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /UpdateScheduleTransfers for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Scheduled transfer updated successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "fc70dd6d-7b48-44d9-b3ea-8f68c9c7ab81",
      "name": "DeleteScheduleTransfers",
      "request": {
        "name": "DeleteScheduleTransfers",
        "description": {
          "content": "Delete the scheduled transfer",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "DeleteScheduleTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "537facc3-2481-491c-aee0-5a95800e01c4",
          "name": "Scheduled transfer deleted successfully",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "981ad63b-4dec-464f-99ce-07e20aa5b8e0",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "d2acb263-660c-4779-8be4-f2dd739edcb3",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /DeleteScheduleTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Scheduled transfer deleted successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "d352ddd0-6328-490a-84d8-175d672a9fe4",
      "name": "AddRecurringTransfers",
      "request": {
        "name": "AddRecurringTransfers",
        "description": {
          "content": "Adds the recurring transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "AddRecurringTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"status\": \"{{status}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"untilStop\": \"{{untilStop}}\",\n                \"untilDate\": \"{{untilDate}}\",\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        }\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "ecee24e7-eefc-4bfe-b9ed-97b9206e1abc",
          "name": "schedule transfer added successfully",
          "originalRequest": {
            "url": {
              "path": [
                "AddRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"amount\": \"{{amount}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"currency\": \"{{currency}}\",\n    \"status\": \"{{status}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "a327bc20-657d-411f-b4ee-3b75a534bcfd",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "AddRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"amount\": \"{{amount}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"currency\": \"{{currency}}\",\n    \"status\": \"{{status}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "224289b3-7b85-425e-a69d-0c87093f151b",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "AddRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"amount\": \"{{amount}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"currency\": \"{{currency}}\",\n    \"status\": \"{{status}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /AddRecurringTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"schedule transfer added successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "592ae5d1-77c5-4d85-9bd8-8f8ae0c84033",
      "name": "GetRecurringTransfers",
      "request": {
        "name": "GetRecurringTransfers",
        "description": {
          "content": "Fetches all the recurring transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetRecurringTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "aea55447-8f37-4cd9-9f90-9012b271a1a3",
          "name": "schedule transfer list response",
          "originalRequest": {
            "url": {
              "path": [
                "GetRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"Type\": \"ea commodo\",\n    \"CustomerId\": 39784599.9004904,\n    \"Amount\": -76197807.70426257,\n    \"SourceAccountNumber\": \"consectetur aliqua\",\n    \"TargetAccountNumber\": \"ea cupidatat elit minim in\",\n    \"DueDate\": \"quis adipisicing\",\n    \"Currency\": \"dolor incididunt ullamco\",\n    \"Status\": \"do ut\",\n    \"ScheduledDate\": -84849357.68569906,\n    \"recurringOptions\": {\n      \"amountType\": \"Lorem\",\n      \"frequency\": {\n        \"duration\": {\n          \"untilStop\": \"cillum elit sed\",\n          \"untilDate\": \"ea eiusmod\",\n          \"numberOfPayments\": \"deserunt velit\"\n        },\n        \"iterate\": \"ex\"\n      }\n    },\n    \"id\": \"incididunt sit\"\n  },\n  {\n    \"Type\": \"tempor Ut irure ea cillum\",\n    \"CustomerId\": 26448685.747517243,\n    \"Amount\": 90977495.38883385,\n    \"SourceAccountNumber\": \"dolor esse\",\n    \"TargetAccountNumber\": \"tempor non irur\",\n    \"DueDate\": \"pariatur\",\n    \"Currency\": \"ipsum eiusmod\",\n    \"Status\": \"ad ullamco se\",\n    \"ScheduledDate\": 94834808.2024785,\n    \"recurringOptions\": {\n      \"amountType\": \"deserunt et\",\n      \"frequency\": {\n        \"duration\": {\n          \"untilStop\": \"sit cillum aliqua sed\",\n          \"untilDate\": \"ipsum eu\",\n          \"numberOfPayments\": \"sit laboris ea dolore\"\n        },\n        \"iterate\": \"in deserunt et anim\"\n      }\n    },\n    \"id\": \"in\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ea63a995-5017-450e-9662-a1e8a3b68452",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ca961690-5d67-4767-ade4-5212b35e375d",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetRecurringTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"schedule transfer list response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "fcc88a0f-e50b-4b2a-8ae9-d94aaa078bd0",
      "name": "UpdateRecurringTransfers",
      "request": {
        "name": "UpdateRecurringTransfers",
        "description": {
          "content": "Update the recurring transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "UpdateRecurringTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"amount\": \"{{amount}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"duration\": {\n                \"untilStop\": \"{{untilStop}}\",\n                \"untilDate\": \"{{untilDate}}\",\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            },\n            \"iterate\": \"{{iterate}}\"\n        },\n        \"updateTransferType\": \"{{updateTransferType}}\"\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "9abc7160-f261-4082-bfb1-fd072be78ac5",
          "name": "Recurring transfer updated successfully",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        },\n        \"updateTransferType\": \"{{updateTransferType}}\"\n    },\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "a02d01f7-64c1-4062-9c27-857994ec85e3",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        },\n        \"updateTransferType\": \"{{updateTransferType}}\"\n    },\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "4258d004-75d6-4b57-ad8e-00e4e38948bf",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        },\n        \"updateTransferType\": \"{{updateTransferType}}\"\n    },\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /UpdateRecurringTransfers for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Recurring transfer updated successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "cd693252-8510-49f5-8aa8-405061d8670b",
      "name": "DeleteRecurringTransfers",
      "request": {
        "name": "DeleteRecurringTransfers",
        "description": {
          "content": "Delete the recurring transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "DeleteRecurringTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "e77be7fa-7cad-4212-8daa-9eb81a1f253a",
          "name": "Recurring transfer deleted successfully",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "1af1f2f5-6f50-45be-bb4e-b59ceaac0148",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "c212bf84-2c03-4cd4-8363-810984d0dd98",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /DeleteRecurringTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Recurring transfer deleted successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "794659af-cbf0-4b58-b4df-76c846ea1afa",
      "name": "resetPassword",
      "request": {
        "name": "resetPassword",
        "description": {
          "content": "It allows to reset the password",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "resetPassword"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{username}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "d9380873-e434-4dc6-99c6-28d6723d905b",
          "name": "password has been updated successfully.",
          "originalRequest": {
            "url": {
              "path": [
                "resetPassword"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{username}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "eb923b2b-d32d-446a-81c1-176f09917d89",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "resetPassword"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{username}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "c9e32021-9056-4505-a4aa-63176cf5006a",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "resetPassword"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{username}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /resetPassword for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"password has been updated successfully.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "81ed9f89-d93d-4a5c-b645-e68b3742ad99",
      "name": "debitcardInfoValidation",
      "request": {
        "name": "debitcardInfoValidation",
        "description": {
          "content": "for validating card info",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "debitcardInfoValidation"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"cvv\": \"{{cvv}}\",\n    \"debitCardNumber\": \"{{debitCardNumber}}\",\n    \"expiryDate\": \"{{expiryDate}}\",\n    \"pin\": \"{{pin}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "58cd359a-8a01-42f9-b0e8-a5c843667e2b",
          "name": "Validated Successfully",
          "originalRequest": {
            "url": {
              "path": [
                "debitcardInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"cvv\": \"{{cvv}}\",\n    \"debitCardNumber\": \"{{debitCardNumber}}\",\n    \"expiryDate\": \"{{expiryDate}}\",\n    \"pin\": \"{{pin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "725f1164-ca98-479f-b352-e9c6c8993a9b",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "debitcardInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"cvv\": \"{{cvv}}\",\n    \"debitCardNumber\": \"{{debitCardNumber}}\",\n    \"expiryDate\": \"{{expiryDate}}\",\n    \"pin\": \"{{pin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "5280b4ae-4ce7-4e95-8ecd-d0d1a119ecfb",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "debitcardInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"cvv\": \"{{cvv}}\",\n    \"debitCardNumber\": \"{{debitCardNumber}}\",\n    \"expiryDate\": \"{{expiryDate}}\",\n    \"pin\": \"{{pin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /debitcardInfoValidation for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Validated Successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "52afeec6-7ec4-4e6f-b9ca-58942298840f",
      "name": "personalInfoValidation",
      "request": {
        "name": "personalInfoValidation",
        "description": {
          "content": "for validating personal info",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "personalInfoValidation"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"dob\": \"{{dob}}\",\n    \"ssn\": \"{{ssn}}\",\n    \"secrectPassword\": \"{{secrectPassword}}\",\n    \"AccNumber\": \"{{AccNumber}}\",\n    \"lastDepositAmt\": \"{{lastDepositAmt}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "22e2155e-aa5d-4b4c-b93e-899b26bd36bb",
          "name": "Validated Successfully",
          "originalRequest": {
            "url": {
              "path": [
                "personalInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"dob\": \"{{dob}}\",\n    \"ssn\": \"{{ssn}}\",\n    \"secrectPassword\": \"{{secrectPassword}}\",\n    \"AccNumber\": \"{{AccNumber}}\",\n    \"lastDepositAmt\": \"{{lastDepositAmt}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "582b345a-263d-4db4-8a53-7c3d51b84e52",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "personalInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"dob\": \"{{dob}}\",\n    \"ssn\": \"{{ssn}}\",\n    \"secrectPassword\": \"{{secrectPassword}}\",\n    \"AccNumber\": \"{{AccNumber}}\",\n    \"lastDepositAmt\": \"{{lastDepositAmt}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ed5675d5-1c15-447c-971b-048bb75bbd55",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "personalInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"dob\": \"{{dob}}\",\n    \"ssn\": \"{{ssn}}\",\n    \"secrectPassword\": \"{{secrectPassword}}\",\n    \"AccNumber\": \"{{AccNumber}}\",\n    \"lastDepositAmt\": \"{{lastDepositAmt}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /personalInfoValidation for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Validated Successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "1dc84f57-1d70-4cb6-8fbe-7fdcaa636f6d",
      "name": "disputeTransaction",
      "request": {
        "name": "disputeTransaction",
        "description": {
          "content": "dispute a transaction",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "disputeTransaction"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"transactionsData\": [\n        \"{{transactionsData}}\"\n    ],\n    \"emailId\": \"{{emailId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "e5025a12-9b57-44cf-9be1-dc625d18c68e",
          "name": "Dispute Transactions reported successfully",
          "originalRequest": {
            "url": {
              "path": [
                "disputeTransaction"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"transactionsData\": [\n        \"{{transactionsData}}\"\n    ],\n    \"emailId\": \"{{emailId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "4883c356-5c33-41a8-8e1b-5361098495aa",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "disputeTransaction"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"transactionsData\": [\n        \"{{transactionsData}}\"\n    ],\n    \"emailId\": \"{{emailId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ecf224d4-6e47-4f3e-963b-19be3f015aee",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "disputeTransaction"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"transactionsData\": [\n        \"{{transactionsData}}\"\n    ],\n    \"emailId\": \"{{emailId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /disputeTransaction for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Dispute Transactions reported successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "59ba0453-284b-4db1-96d6-f73a2e970ede",
      "name": "ccPay",
      "request": {
        "name": "ccPay",
        "description": {
          "content": "to pay cc bill",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "ccPay"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"dueDate\": \"{{dueDate}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"transactionType\": \"{{transactionType}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "e89813c0-4ca1-4614-a5f7-c4251c192d5d",
          "name": "Credit Card payment scheduled successfully",
          "originalRequest": {
            "url": {
              "path": [
                "ccPay"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"dueDate\": \"{{dueDate}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"transactionType\": \"{{transactionType}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "bed9b553-aeee-443f-a7f8-971a1a011711",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "ccPay"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"dueDate\": \"{{dueDate}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"transactionType\": \"{{transactionType}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "a112a447-f73c-4cf3-a032-08b31517fc95",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "ccPay"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"dueDate\": \"{{dueDate}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"transactionType\": \"{{transactionType}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /ccPay for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Credit Card payment scheduled successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "41ed1922-2466-4ebb-9529-8bb0ae99f1a8",
      "name": "GetCCSchedule",
      "request": {
        "name": "GetCCSchedule",
        "description": {
          "content": "Fetch cc payment list",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetCCSchedule"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "3cf93e7a-1e17-450b-b39d-f4be4f77611b",
          "name": "schedule transfer list response",
          "originalRequest": {
            "url": {
              "path": [
                "GetCCSchedule"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"Type\": \"eiusmod nulla Lorem dolore\",\n    \"CustomerId\": 302396.4694056809,\n    \"Amount\": -70401737.90423504,\n    \"SourceAccountNumber\": \"aliqua\",\n    \"TargetAccountNumber\": \"velit proident fugiat aliqua\",\n    \"DueDate\": \"cupidatat eiusmod aliquip consequat anim\",\n    \"Currency\": \"dolore consectetur officia\",\n    \"Status\": \"mollit\",\n    \"id\": \"tempor dolor\"\n  },\n  {\n    \"Type\": \"pariatur\",\n    \"CustomerId\": -95305536.92068434,\n    \"Amount\": -28079526.796928406,\n    \"SourceAccountNumber\": \"dolor non aute\",\n    \"TargetAccountNumber\": \"voluptate pariatur laborum\",\n    \"DueDate\": \"dolor amet\",\n    \"Currency\": \"dolor eu dolore cupidatat qui\",\n    \"Status\": \"ipsum\",\n    \"id\": \"quis\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "c5798cef-3c20-4ebf-bd00-7a51b104827b",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetCCSchedule"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "73d588ec-6304-4c47-b373-b19053cd1ffe",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetCCSchedule"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetCCSchedule for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"schedule transfer list response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "b367c27b-14fd-4dd9-b332-59f396dba776",
      "name": "sendsecuremessage",
      "request": {
        "name": "sendsecuremessage",
        "description": {
          "content": "send secure message",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "sendsecuremessage"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"authType\": \"{{authType}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"phoneNumber\": \"{{phoneNumber}}\",\n    \"topic\": \"{{topic}}\",\n    \"message\": \"{{message}}\",\n    \"availableTime\": \"{{availableTime}}\",\n    \"chatHistory\": \"{{chatHistory}}\",\n    \"cif\": \"{{cif}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "5925b12d-621b-4677-98c1-460370c12159",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "sendsecuremessage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"authType\": \"{{authType}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"phoneNumber\": \"{{phoneNumber}}\",\n    \"topic\": \"{{topic}}\",\n    \"message\": \"{{message}}\",\n    \"availableTime\": \"{{availableTime}}\",\n    \"chatHistory\": \"{{chatHistory}}\",\n    \"cif\": \"{{cif}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "5752fd32-0032-44d4-8a11-85b4f86cf8b4",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "sendsecuremessage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"authType\": \"{{authType}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"phoneNumber\": \"{{phoneNumber}}\",\n    \"topic\": \"{{topic}}\",\n    \"message\": \"{{message}}\",\n    \"availableTime\": \"{{availableTime}}\",\n    \"chatHistory\": \"{{chatHistory}}\",\n    \"cif\": \"{{cif}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "e9f9cf82-ecc6-45ab-b494-602036272f6e",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "sendsecuremessage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"authType\": \"{{authType}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"phoneNumber\": \"{{phoneNumber}}\",\n    \"topic\": \"{{topic}}\",\n    \"message\": \"{{message}}\",\n    \"availableTime\": \"{{availableTime}}\",\n    \"chatHistory\": \"{{chatHistory}}\",\n    \"cif\": \"{{cif}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /sendsecuremessage for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "c7784e3a-0ab5-464f-86fb-ada6459bcee1",
      "name": "locateProfile",
      "request": {
        "name": "locateProfile",
        "description": {
          "content": "get profile details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "locateProfile"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"ssNumber\": \"{{ssNumber}}\",\n    \"ssnShort\": \"{{ssnShort}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "4563a8ce-186d-42cd-88b4-8721aafc3c04",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "locateProfile"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"ssNumber\": \"{{ssNumber}}\",\n    \"ssnShort\": \"{{ssnShort}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"accountNumber\": \"dolor exercitation e\",\n  \"cardDetails\": {\n    \"cardNumber\": \"ex enim Lorem\",\n    \"expiryDate\": \"aliqua aute n\",\n    \"cvv\": \"commodo in id\",\n    \"pin\": \"do magna\"\n  },\n  \"personalQuestions\": {\n    \"DOB\": \"occaecat nulla\",\n    \"SSN\": 55545709.142816246,\n    \"SecretPassword\": \"Duis Exc\",\n    \"LDAmount\": -78000918.98215005,\n    \"AccNumber\": \"esse exercitation\"\n  },\n  \"ssNumber\": 31907610.034279004,\n  \"ssnShort\": -19413743.86466661,\n  \"alternatePhoneNumber\": -4741203.249373391,\n  \"customerId\": \"ullamco et incididunt dolor\",\n  \"email\": \"occaecat nisi\",\n  \"identificationNumber\": \"ea laborum non nisi\",\n  \"identificationType\": \"dolor id quis\",\n  \"image\": \"sed et sunt\",\n  \"isAlternateMobileNumber\": false,\n  \"isPrimaryMobileNumber\": false,\n  \"location\": \"ea mollit dolor nulla\",\n  \"name\": \"ad do aliquip ut\",\n  \"personalBanker\": {\n    \"name\": \"ut\",\n    \"email\": \"deserunt\",\n    \"mobileNumber\": \"ut do eiusmod sint\"\n  },\n  \"phone\": 26057484.443163097,\n  \"securityQuestions\": [\n    \"est qui enim\",\n    \"magna laboris\"\n  ],\n  \"segmentId\": 23935351.714197665,\n  \"multiAccounts\": [\n    {\n      \"accountNumber\": \"Ut\",\n      \"cardDetails\": {\n        \"cardNumber\": \"laboris\",\n        \"expiryDate\": \"sint cillum\",\n        \"cvv\": \"consectetur fugiat\",\n        \"pin\": \"ipsum dolor eu nulla nostrud\"\n      },\n      \"personalQuestions\": {\n        \"DOB\": \"minim\",\n        \"SSN\": -13121839.670393646,\n        \"SecretPassword\": \"do deserunt Ut\",\n        \"LDAmount\": 89455281.60727164,\n        \"AccNumber\": \"nostrud ut dolore\"\n      },\n      \"ssNumber\": 541552.1409417987,\n      \"ssnShort\": 55438101.25275096,\n      \"alternatePhoneNumber\": 2660178.765702963,\n      \"customerId\": \"Excepteur commodo\",\n      \"email\": \"laboris et\",\n      \"identificationNumber\": \"consectetur nisi et minim\",\n      \"identificationType\": \"voluptate dolore quis\",\n      \"location\": \"minim in\",\n      \"name\": \"non incididunt\",\n      \"phone\": 52150460.21461615\n    },\n    {\n      \"accountNumber\": \"Duis id minim\",\n      \"cardDetails\": {\n        \"cardNumber\": \"minim\",\n        \"expiryDate\": \"Duis minim est do\",\n        \"cvv\": \"Lorem dolore\",\n        \"pin\": \"ut cul\"\n      },\n      \"personalQuestions\": {\n        \"DOB\": \"enim ullamco do minim\",\n        \"SSN\": 37743110.8546364,\n        \"SecretPassword\": \"dolor incididunt\",\n        \"LDAmount\": 98541233.80715048,\n        \"AccNumber\": \"ut id dolor\"\n      },\n      \"ssNumber\": -78612746.92032522,\n      \"ssnShort\": 52218954.33154479,\n      \"alternatePhoneNumber\": -84814307.96619622,\n      \"customerId\": \"Lorem\",\n      \"email\": \"Ut dolor\",\n      \"identificationNumber\": \"magna nostrud aliqua\",\n      \"identificationType\": \"dolor nisi cupidatat proident\",\n      \"location\": \"culpa anim incididunt\",\n      \"name\": \"eiusmod ea\",\n      \"phone\": -9938656.296958908\n    }\n  ],\n  \"warningCodes\": [\n    {\n      \"code\": 83925667.84427267,\n      \"level\": \"Lorem sit ex amet\",\n      \"description\": \"et officia\"\n    },\n    {\n      \"code\": 32922932.531421885,\n      \"level\": \"magna in ut\",\n      \"description\": \"culpa ex Ut eiusmod\"\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "98e0806a-a3a5-4495-97e2-26e7934c43ba",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "locateProfile"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"ssNumber\": \"{{ssNumber}}\",\n    \"ssnShort\": \"{{ssnShort}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "710a88c3-938b-457d-82ab-6eec353ff00e",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "locateProfile"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"ssNumber\": \"{{ssNumber}}\",\n    \"ssnShort\": \"{{ssnShort}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /locateProfile for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `accountNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accountNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `accountNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `accountNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails.cardNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails.cardNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails.cardNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails.cardNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails.expiryDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails.expiryDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails.expiryDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails.expiryDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails.cvv` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails.cvv`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails.cvv`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails.cvv`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails.pin` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails.pin`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails.pin`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails.pin`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.DOB` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions.DOB`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions.DOB`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions.DOB`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.SSN` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions.SSN`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions.SSN`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions.SSN`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.SecretPassword` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions.SecretPassword`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions.SecretPassword`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions.SecretPassword`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.LDAmount` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions.LDAmount`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions.LDAmount`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions.LDAmount`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.AccNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions.AccNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions.AccNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions.AccNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `ssNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`ssNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `ssNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `ssNumber`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `ssnShort` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`ssnShort`)){\n                if(pm.expect(ld.get(pm.response.json(), `ssnShort`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `ssnShort`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `alternatePhoneNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`alternatePhoneNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `alternatePhoneNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `alternatePhoneNumber`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customerId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customerId`)){\n                if(pm.expect(ld.get(pm.response.json(), `customerId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customerId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `identificationNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`identificationNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `identificationNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `identificationNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `identificationType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`identificationType`)){\n                if(pm.expect(ld.get(pm.response.json(), `identificationType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `identificationType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `image` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n                if(pm.expect(ld.get(pm.response.json(), `image`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isAlternateMobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isAlternateMobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isPrimaryMobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isPrimaryMobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `isPrimaryMobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isPrimaryMobileNumber`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `location` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location`)){\n                if(pm.expect(ld.get(pm.response.json(), `location`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n                if(pm.expect(ld.get(pm.response.json(), `name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.name`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.email`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.mobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.mobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.mobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.mobileNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(pm.response.json(), `phone`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `phone`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `securityQuestions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`securityQuestions`)){\n                if(pm.expect(ld.get(pm.response.json(), `securityQuestions`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `securityQuestions`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `segmentId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`segmentId`)){\n                if(pm.expect(ld.get(pm.response.json(), `segmentId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `segmentId`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `multiAccounts` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`multiAccounts`)){\n                if(pm.expect(ld.get(pm.response.json(), `multiAccounts`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `multiAccounts`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the multiAccounts field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`multiAccounts`);\n            let multiAccountsArray = ld.get(pm.response.json(), `multiAccounts`, \"\");\n            for (let multiAccounts_it = 0; multiAccounts_it < multiAccountsArray.length; multiAccounts_it++) {\n                let iterator = multiAccounts_it;\n                \t\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].accountNumber' has 'accountNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].accountNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].accountNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails' has 'cardDetails' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails.cardNumber' has 'cardNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails.cardNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails.cardNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails.expiryDate' has 'expiryDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails.expiryDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails.expiryDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails.cvv' has 'cvv' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails.cvv`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails.cvv`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails.pin' has 'pin' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails.pin`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails.pin`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions' has 'personalQuestions' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions.DOB' has 'DOB' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions.DOB`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions.DOB`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions.SSN' has 'SSN' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions.SSN`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions.SSN`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions.SecretPassword' has 'SecretPassword' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions.SecretPassword`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions.SecretPassword`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions.LDAmount' has 'LDAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions.LDAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions.LDAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions.AccNumber' has 'AccNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions.AccNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions.AccNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].ssNumber' has 'ssNumber' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].ssNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].ssNumber`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].ssnShort' has 'ssnShort' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].ssnShort`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].ssnShort`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].alternatePhoneNumber' has 'alternatePhoneNumber' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].alternatePhoneNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].alternatePhoneNumber`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].customerId' has 'customerId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].customerId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].customerId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].email' has 'email' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].email`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].email`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].identificationNumber' has 'identificationNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].identificationNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].identificationNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].identificationType' has 'identificationType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].identificationType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].identificationType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].location' has 'location' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].location`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].location`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].name`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].phone' has 'phone' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].phone`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].phone`, null)).to.equal(\"number\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `warningCodes` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`warningCodes`)){\n                if(pm.expect(ld.get(pm.response.json(), `warningCodes`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `warningCodes`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the warningCodes field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`warningCodes`);\n            let warningCodesArray = ld.get(pm.response.json(), `warningCodes`, \"\");\n            for (let warningCodes_it = 0; warningCodes_it < warningCodesArray.length; warningCodes_it++) {\n                let iterator = warningCodes_it;\n                \t\n        pm.test(`${iterator} element of array 'warningCodes[${warningCodes_it}].code' has 'code' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `warningCodes[${warningCodes_it}].code`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`warningCodes[${warningCodes_it}].code`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'warningCodes[${warningCodes_it}].level' has 'level' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `warningCodes[${warningCodes_it}].level`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`warningCodes[${warningCodes_it}].level`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'warningCodes[${warningCodes_it}].description' has 'description' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `warningCodes[${warningCodes_it}].description`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`warningCodes[${warningCodes_it}].description`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "d1b06b87-835f-4d77-afdd-50a5ec77d0e9",
      "name": "to validate the exiting user",
      "request": {
        "name": "to validate the exiting user",
        "description": {
          "content": "to validate the in of existing user",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "validateUser"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "5c0401f4-fa8b-457a-b8ed-ec752d8a9313",
          "name": "PINs matched",
          "originalRequest": {
            "url": {
              "path": [
                "validateUser"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "cffdb2eb-ac0a-4a10-9867-8e3c88242775",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "validateUser"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "f1441f7d-7921-4387-aa31-7176bab07bc3",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "validateUser"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /validateUser for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"PINs matched\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "659404bc-df39-4e63-897a-7f6ce6fa66ec",
      "name": "to validate the pins entered by the new user",
      "request": {
        "name": "to validate the pins entered by the new user",
        "description": {
          "content": "to validate the pins entered by the new user",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "validatePIN"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\",\n    \"profileInfo\": {\n        \"customerId\": \"{{customerId}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"ssn\": \"{{ssn}}\"\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "fb4e46b7-11d0-4b21-a27b-f7350d4c78d3",
          "name": "PINs matched",
          "originalRequest": {
            "url": {
              "path": [
                "validatePIN"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\",\n    \"profileInfo\": {\n        \"customerId\": \"{{customerId}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"ssn\": \"{{ssn}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "744db7eb-edae-4e6c-96b8-e4f20184ddb2",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "validatePIN"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\",\n    \"profileInfo\": {\n        \"customerId\": \"{{customerId}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"ssn\": \"{{ssn}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "a63241ce-72c2-4612-8bfe-5164ebb88efc",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "validatePIN"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\",\n    \"profileInfo\": {\n        \"customerId\": \"{{customerId}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"ssn\": \"{{ssn}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /validatePIN for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"PINs matched\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "84f00697-4e72-4abf-a083-af6933f72182",
      "name": "to validate if pin entered by new user follows pin rules",
      "request": {
        "name": "to validate if pin entered by new user follows pin rules",
        "description": {
          "content": "to validate if pin entered by new user follows pin rules",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "validatePINRules"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "d0563b82-92e7-4417-93e8-297917ccddee",
          "name": "PIN rules satisfied",
          "originalRequest": {
            "url": {
              "path": [
                "validatePINRules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "93afab6d-aa37-411c-8b21-2d210ee81133",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "validatePINRules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "da3797e3-4fd6-41cd-8e22-82f77dc395ca",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "validatePINRules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /validatePINRules for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"PIN rules satisfied\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "9433c5c2-0bff-4e5b-9be7-79d1e99f9f5b",
      "name": "to fetch the account closure status",
      "request": {
        "name": "to fetch the account closure status",
        "description": {
          "content": "to fetch the account closure status",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "getRequestStatus"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "[\n    {\n        \"accountName\": \"{{accountName}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"customerId\": \"{{customerId}}\",\n        \"description\": \"{{description}}\",\n        \"estimation\": \"{{estimation}}\",\n        \"modifyDate\": \"{{modifyDate}}\",\n        \"requestDate\": \"{{requestDate}}\",\n        \"requestId\": \"{{requestId}}\",\n        \"requestSubType\": \"{{requestSubType}}\",\n        \"requestType\": \"{{requestType}}\",\n        \"status\": \"{{status}}\"\n    },\n    {\n        \"accountName\": \"{{1.accountName}}\",\n        \"accountNumber\": \"{{1.accountNumber}}\",\n        \"customerId\": \"{{1.customerId}}\",\n        \"description\": \"{{1.description}}\",\n        \"estimation\": \"{{1.estimation}}\",\n        \"modifyDate\": \"{{1.modifyDate}}\",\n        \"requestDate\": \"{{1.requestDate}}\",\n        \"requestId\": \"{{1.requestId}}\",\n        \"requestSubType\": \"{{1.requestSubType}}\",\n        \"requestType\": \"{{1.requestType}}\",\n        \"status\": \"{{1.status}}\"\n    }\n]",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "1596c168-cb34-4482-b42b-c093ae3c68ac",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "getRequestStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"accountName\": \"{{accountName}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"customerId\": \"{{customerId}}\",\n        \"description\": \"{{description}}\",\n        \"estimation\": \"{{estimation}}\",\n        \"modifyDate\": \"{{modifyDate}}\",\n        \"requestDate\": \"{{requestDate}}\",\n        \"requestId\": \"{{requestId}}\",\n        \"requestSubType\": \"{{requestSubType}}\",\n        \"requestType\": \"{{requestType}}\",\n        \"status\": \"{{status}}\"\n    },\n    {\n        \"accountName\": \"{{1.accountName}}\",\n        \"accountNumber\": \"{{1.accountNumber}}\",\n        \"customerId\": \"{{1.customerId}}\",\n        \"description\": \"{{1.description}}\",\n        \"estimation\": \"{{1.estimation}}\",\n        \"modifyDate\": \"{{1.modifyDate}}\",\n        \"requestDate\": \"{{1.requestDate}}\",\n        \"requestId\": \"{{1.requestId}}\",\n        \"requestSubType\": \"{{1.requestSubType}}\",\n        \"requestType\": \"{{1.requestType}}\",\n        \"status\": \"{{1.status}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "024a6175-ed3d-4d0f-97d6-95f590d7be2e",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "getRequestStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"accountName\": \"{{accountName}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"customerId\": \"{{customerId}}\",\n        \"description\": \"{{description}}\",\n        \"estimation\": \"{{estimation}}\",\n        \"modifyDate\": \"{{modifyDate}}\",\n        \"requestDate\": \"{{requestDate}}\",\n        \"requestId\": \"{{requestId}}\",\n        \"requestSubType\": \"{{requestSubType}}\",\n        \"requestType\": \"{{requestType}}\",\n        \"status\": \"{{status}}\"\n    },\n    {\n        \"accountName\": \"{{1.accountName}}\",\n        \"accountNumber\": \"{{1.accountNumber}}\",\n        \"customerId\": \"{{1.customerId}}\",\n        \"description\": \"{{1.description}}\",\n        \"estimation\": \"{{1.estimation}}\",\n        \"modifyDate\": \"{{1.modifyDate}}\",\n        \"requestDate\": \"{{1.requestDate}}\",\n        \"requestId\": \"{{1.requestId}}\",\n        \"requestSubType\": \"{{1.requestSubType}}\",\n        \"requestType\": \"{{1.requestType}}\",\n        \"status\": \"{{1.status}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "4007a3ea-a5d2-4e45-9d53-36ee994dd196",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "getRequestStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"accountName\": \"{{accountName}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"customerId\": \"{{customerId}}\",\n        \"description\": \"{{description}}\",\n        \"estimation\": \"{{estimation}}\",\n        \"modifyDate\": \"{{modifyDate}}\",\n        \"requestDate\": \"{{requestDate}}\",\n        \"requestId\": \"{{requestId}}\",\n        \"requestSubType\": \"{{requestSubType}}\",\n        \"requestType\": \"{{requestType}}\",\n        \"status\": \"{{status}}\"\n    },\n    {\n        \"accountName\": \"{{1.accountName}}\",\n        \"accountNumber\": \"{{1.accountNumber}}\",\n        \"customerId\": \"{{1.customerId}}\",\n        \"description\": \"{{1.description}}\",\n        \"estimation\": \"{{1.estimation}}\",\n        \"modifyDate\": \"{{1.modifyDate}}\",\n        \"requestDate\": \"{{1.requestDate}}\",\n        \"requestId\": \"{{1.requestId}}\",\n        \"requestSubType\": \"{{1.requestSubType}}\",\n        \"requestType\": \"{{1.requestType}}\",\n        \"status\": \"{{1.status}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /getRequestStatus for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "dee0e920-208a-4029-b227-f839244d069d",
      "name": "to place the request",
      "request": {
        "name": "to place the request",
        "description": {
          "content": "to place the request",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "request"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountName\": \"{{accountName}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"cardNumber\": \"{{cardNumber}}\",\n    \"description\": \"{{description}}\",\n    \"requestSubType\": \"{{requestSubType}}\",\n    \"requestType\": \"{{requestType}}\",\n    \"serviceType\": \"{{serviceType}}\",\n    \"meta\": {}\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "c9dd9132-a287-467d-b142-f5857d184d36",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "request"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountName\": \"{{accountName}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"cardNumber\": \"{{cardNumber}}\",\n    \"description\": \"{{description}}\",\n    \"requestSubType\": \"{{requestSubType}}\",\n    \"serviceType\": \"{{serviceType}}\",\n    \"requestType\": \"{{requestType}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "4315ae10-1bba-445c-95d4-c3fcf87e006f",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "request"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountName\": \"{{accountName}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"cardNumber\": \"{{cardNumber}}\",\n    \"description\": \"{{description}}\",\n    \"requestSubType\": \"{{requestSubType}}\",\n    \"serviceType\": \"{{serviceType}}\",\n    \"requestType\": \"{{requestType}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "20975ab7-ead3-4309-a9b5-54c9ea44d293",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "request"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountName\": \"{{accountName}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"cardNumber\": \"{{cardNumber}}\",\n    \"description\": \"{{description}}\",\n    \"requestSubType\": \"{{requestSubType}}\",\n    \"serviceType\": \"{{serviceType}}\",\n    \"requestType\": \"{{requestType}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /request for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "e4259b44-64d8-4774-b718-87c28985725a",
      "name": "to enable or disable e or paper statements at profile level",
      "request": {
        "name": "to enable or disable e or paper statements at profile level",
        "description": {
          "content": "to enable or disable e or paper statements at profile level",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "enableEStatement"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"secondaryEmail\": \"{{secondaryEmail}}\",\n    \"subscribe\": \"{{subscribe}}\",\n    \"meta\": {}\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "8f1310b8-a086-4d67-b6f8-6b785f2d692f",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "enableEStatement"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"secondaryEmail\": \"{{secondaryEmail}}\",\n    \"subscribe\": \"{{subscribe}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "3a0e7ec9-08fd-4daa-8b7f-8c2b01a4fbb6",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "enableEStatement"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"secondaryEmail\": \"{{secondaryEmail}}\",\n    \"subscribe\": \"{{subscribe}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "db5e58f8-e939-4d21-b25d-1724987ef103",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "enableEStatement"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"secondaryEmail\": \"{{secondaryEmail}}\",\n    \"subscribe\": \"{{subscribe}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /enableEStatement for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "2affabc6-1ef4-423c-bedc-43ec156c9436",
      "name": "to update the cheque book details of customer accounts",
      "request": {
        "name": "to update the cheque book details of customer accounts",
        "description": {
          "content": "Update customer cheque book details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "RequestChequeBook"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"numberOfChequeBooks\": \"{{numberOfChequeBooks}}\",\n    \"numberOfLeaves\": \"{{numberOfLeaves}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "e639e221-e54d-4308-a3ba-16475be04379",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "RequestChequeBook"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"numberOfChequeBooks\": \"{{numberOfChequeBooks}}\",\n    \"numberOfLeaves\": \"{{numberOfLeaves}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "ef670eec-b8cb-4464-84d9-caf420ca05be",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "RequestChequeBook"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"numberOfChequeBooks\": \"{{numberOfChequeBooks}}\",\n    \"numberOfLeaves\": \"{{numberOfLeaves}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "c0c24b1b-bb01-40ea-86ae-03a892595e50",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "RequestChequeBook"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"numberOfChequeBooks\": \"{{numberOfChequeBooks}}\",\n    \"numberOfLeaves\": \"{{numberOfLeaves}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /RequestChequeBook for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "8a80f252-5f73-43de-98ec-3dbb97b15e36",
      "name": "sendOTP",
      "request": {
        "name": "sendOTP",
        "description": {
          "content": "sends OTP for reset password",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "sendOTP"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "3c64fd09-2c05-499c-a176-17c4bec15dbd",
          "name": "verification code has been sent to your mobile number",
          "originalRequest": {
            "url": {
              "path": [
                "sendOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "f62443fd-2463-42c1-974f-0bd7f1e87a11",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "sendOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "1adafe70-01fa-49dd-91c7-c89fea42e601",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "sendOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /sendOTP for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"verification code has been sent to your mobile number\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "4f394466-570e-492a-aebd-0ef983c52e47",
      "name": "verifyOTP",
      "request": {
        "name": "verifyOTP",
        "description": {
          "content": " to verify OTP for reset password",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "verifyOTP"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"code\": \"{{code}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "05c392e0-fab1-4aad-8581-a2f1012543ee",
          "name": "OTP verifid successfully",
          "originalRequest": {
            "url": {
              "path": [
                "verifyOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"code\": \"{{code}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "65d628e4-7b0b-42c5-b603-3649831bda25",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "verifyOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"code\": \"{{code}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ff981264-c684-4145-a9ad-434d589ef713",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "verifyOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"code\": \"{{code}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /verifyOTP for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OTP verifid successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "32da1ec9-041e-4d62-8f89-2f8fa353a189",
      "name": "to fetch the deeplink",
      "request": {
        "name": "to fetch the deeplink",
        "description": {
          "content": "to fetch the deeplink",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "deeplink"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "botId",
            "value": "{{botId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "accountId",
            "value": "{{accountId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "tenantId",
            "value": "{{tenantId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "environment",
            "value": "{{environment}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "channel",
            "value": "{{channel}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"usecase\": [\n        \"{{usecase}}\"\n    ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "71e91f11-ebcf-47d4-be01-04d1f9d1e629",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "deeplink"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "tenantId",
                "value": "{{tenantId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "environment",
                "value": "{{environment}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "channel",
                "value": "{{channel}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"usecase\": [\n        \"{{usecase}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"usecase\": \"addbeneficiary\",\n    \"link\": \"www.google.com\",\n    \"linkType\": \"deeplink\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "3f1e885e-296c-4677-a90a-59a9240925c8",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "deeplink"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "tenantId",
                "value": "{{tenantId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "environment",
                "value": "{{environment}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "channel",
                "value": "{{channel}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"usecase\": [\n        \"{{usecase}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ab3b4a86-04ba-4618-a0b2-edc7197b5fab",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "deeplink"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "tenantId",
                "value": "{{tenantId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "environment",
                "value": "{{environment}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "channel",
                "value": "{{channel}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"usecase\": [\n        \"{{usecase}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"tempor sit irure\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1745909744849 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /deeplink for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://localhost:8080/smt",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{bearerToken}}"
      }
    ]
  },
  "info": {
    "_postman_id": "7e8fb72c-71b3-4d3a-8530-61fab3176a99",
    "name": "BankAssist SMT Core Banking API Specification",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "kore.ai banking bot apis.",
      "type": "text/plain"
    }
  }
}