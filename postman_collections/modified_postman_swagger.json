{
  "item": [
    {
      "id": "72f0f434-5eef-4663-9821-8ccc2951426c",
      "name": "Submit Request",
      "request": {
        "name": "Submit Request",
        "description": {
          "content": "Meta API request",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "submitRequest"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "botId",
            "value": "{{botId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "accountId",
            "value": "{{accountId}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "bfd1e74e-7d85-4009-b6a5-eb401e4200a8",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "submitRequest"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "d466dc6b-fb79-4ace-b987-8e093f55acbd",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "submitRequest"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "d8418773-8e99-45a8-9cb9-1f7bd012dff7",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "submitRequest"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /submitRequest for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "a3d593a8-a1d9-4c9c-bcc0-4fe036f06163",
      "name": "AuthToken",
      "request": {
        "name": "AuthToken",
        "description": {
          "content": "Get authentication token",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "authToken"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "botId",
            "value": "{{botId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "accountId",
            "value": "{{accountId}}",
            "description": ""
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null
      },
      "response": [
        {
          "id": "f3bb5560-847c-48e7-ae6a-6b3c3258d872",
          "name": "successful login",
          "originalRequest": {
            "url": {
              "path": [
                "authToken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"token\": \"token\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "40bcfe0b-54e4-4ec6-84f8-928db4dcf924",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "authToken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "c2c319a3-eb17-4333-be19-fdf7f45be286",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "authToken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authToken for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful login\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `token` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`token`)){\n                if(pm.expect(ld.get(pm.response.json(), `token`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `token`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "c3b00e86-1434-4829-a21d-0e217dff031d",
      "name": "Deposit",
      "request": {
        "name": "Deposit",
        "description": {
          "content": "Deposit amount to customer's account",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "deposit"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"image\": {\n        \"frontImage\": \"{{frontImage}}\",\n        \"backImage\": \"{{backImage}}\"\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "2a16d387-f5c7-4619-8959-0f182050adfc",
          "name": "Deposit success",
          "originalRequest": {
            "url": {
              "path": [
                "deposit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"image\": {\n        \"frontImage\": \"{{frontImage}}\",\n        \"backImage\": \"{{backImage}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "c0325006-703c-47f1-897a-77f67020cb84",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "deposit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"image\": {\n        \"frontImage\": \"{{frontImage}}\",\n        \"backImage\": \"{{backImage}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "eada8dba-6e9c-4026-bc1c-48e6204e575c",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "deposit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"image\": {\n        \"frontImage\": \"{{frontImage}}\",\n        \"backImage\": \"{{backImage}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /deposit for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Deposit success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "8586ca9b-55a8-4251-bc39-1747cee8d28c",
      "name": "GetAccountInfo",
      "request": {
        "name": "GetAccountInfo",
        "description": {
          "content": "fetch customer account details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetAccountInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "a88c6e6e-0dee-409b-b646-d5fdbc520ef2",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"customerId\": 35787117.84577328,\n  \"accounts\": [\n    {\n      \"customerId\": -2522975.649783492,\n      \"accountName\": \"aliquip Ut pariatur incididunt cupidatat\",\n      \"accountNickname\": \"adipisic\",\n      \"accountNumber\": \"ut officia fugiat adipisicing\",\n      \"accountType\": \"ve\",\n      \"activatedDate\": \"sint Lorem proident laborum Ut\",\n      \"availableBalance\": -71056656.46429476,\n      \"availableCash\": -14743554.561499745,\n      \"availableCashLimit\": -56262628.21308816,\n      \"availableCredit\": 47988820.67978862,\n      \"bankName\": \"est quis\",\n      \"branchName\": \"sint cillum laborum amet\",\n      \"cardName\": \"Excepteur in pariatur\",\n      \"cardNumber\": \"Excepteur veniam velit consequat\",\n      \"cardStatus\": \"occaecat incididunt eiusmod dolo\",\n      \"cardType\": \"qui officia dolo\",\n      \"creditLimit\": 80219498.70185226,\n      \"currency\": \"ea occaecat\",\n      \"currentBalance\": 69504235.6203154,\n      \"deactivatedDate\": \"nisi in nostrud non\",\n      \"dueAmount\": 59062680.40486288,\n      \"dueDate\": \"fugiat cillum\",\n      \"earlyWithdrawalPenalty\": 41709295.333263606,\n      \"email\": \"aliquip do cillum officia Lorem\",\n      \"expDate\": \"elit veniam\",\n      \"fdType\": \"cupidatat consequat consectetur\",\n      \"image\": \"aliquip cup\",\n      \"interestRate\": -25541263.27724223,\n      \"internalTransferFromEnabled\": false,\n      \"internalTransferToEnabled\": true,\n      \"isPrimaryMobile\": true,\n      \"isAlternateMobileNumber\": true,\n      \"isStatement\": false,\n      \"lastDrawDate\": \"culpa Lorem laborum\",\n      \"loanMaturityDate\": \"voluptate irure magna adipisicing\",\n      \"loanOriginationDate\": \"proident dolore elit sunt\",\n      \"location\": \"nostrud tempor\",\n      \"lastUpdated\": \"dolor adipisicing\",\n      \"maxTransactionLimit\": \"esse\",\n      \"maturityDate\": \"pariatur eu irure\",\n      \"minimumPaymentDue\": \"officia qui sunt ut\",\n      \"minimumBalance\": \"enim\",\n      \"monthlyPayment\": -46494298.93368437,\n      \"openingBalance\": 80572898.28961655,\n      \"originalLoanAmount\": 93978164.07115749,\n      \"P2PLimit\": -86288088.10128917,\n      \"p2pEnabled\": -73859291.97986543,\n      \"paybillEnabled\": false,\n      \"payoffAmount\": -37772116.91063922,\n      \"personalBankerName\": \"mollit magna\",\n      \"personalBankerContact\": {\n        \"email\": \"Excepteur dolor consectetur\",\n        \"mobileNumber\": \"Lorem consectetur\"\n      },\n      \"phone\": -3794809.87130028,\n      \"postedBalance\": 98487835.10527,\n      \"principalBalance\": \"mollit occaecat\",\n      \"productCode\": \"est do\",\n      \"productName\": \"in tempor voluptate id\",\n      \"propertyAddress\": \"Excepteur aute\",\n      \"rewardPoints\": \"ipsum in magna\",\n      \"routingNumber\": \"id irure velit\",\n      \"statementDate\": \"mollit irure laboris\",\n      \"status\": \"consequat\",\n      \"swiftCode\": \"eu et ut occaecat\",\n      \"totalBalance\": 96850159.16027811,\n      \"unbilledAmount\": 83044183.07787853,\n      \"valueAtMaturity\": -10965787.866046295,\n      \"holdAmount\": 23961348.29468833,\n      \"unclearFundsAmount\": -80791215.12913448,\n      \"averageMonthlyBalance\": -86015117.51838893,\n      \"netWithdrawableBalance\": 49939038.50174454,\n      \"totalTenure\": \"adipisicing nisi sit\",\n      \"remainingTenure\": \"ad nisi\",\n      \"debitAccountNumber\": \"aliquip elit pariatur Duis sunt\",\n      \"lateFee\": -25670727.99730061,\n      \"bounceCharge\": -75034980.12042083,\n      \"totalCharges\": 51965186.97699082,\n      \"overDueAmount\": -69894209.25457957,\n      \"cardDetails\": [\n        {\n          \"cardName\": \"Duis\",\n          \"cardNumber\": \"pariatur mollit ipsum\",\n          \"cardStatus\": \"ipsum sunt sint\",\n          \"cardImage\": \"ut\",\n          \"cardType\": \"ea sunt\",\n          \"expDate\": \"aute fu\",\n          \"displayCardStatus\": \"enim amet qui\",\n          \"primaryCard\": \"ullamco\",\n          \"cardChannelInfo\": {\n            \"ATM\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"offline\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"international\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"online\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"contactless\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"cardRestrictions\": {\n            \"countries\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"MCC\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"blockReason\": \"exercitation anim cupidatat voluptate\",\n          \"nameOnCard\": \"est consequat ex\",\n          \"cardNetwork\": \"fugiat dolore exercitation ipsum incididunt\",\n          \"autopay\": {\n            \"enabled\": false,\n            \"sourceAccountId\": \"reprehenderit Lorem anim\",\n            \"paymentType\": \"velit Duis sit veniam\",\n            \"onStatementDate\": true,\n            \"dayOfMonth\": \"dolore sunt in Lorem\"\n          },\n          \"dueAmount\": 47170119.41719842,\n          \"dueDate\": \"incididunt occaecat\",\n          \"minimumPaymentDue\": 60662504.347097754,\n          \"partialPaymentPaid\": 74463017.17975256\n        },\n        {\n          \"cardName\": \"ullamco deserunt\",\n          \"cardNumber\": \"irure quis\",\n          \"cardStatus\": \"e\",\n          \"cardImage\": \"dolore consectetur proident qui\",\n          \"cardType\": \"culpa\",\n          \"expDate\": \"sit\",\n          \"displayCardStatus\": \"in dolore ipsum proident\",\n          \"primaryCard\": \"cons\",\n          \"cardChannelInfo\": {\n            \"ATM\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"offline\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"international\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"online\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"contactless\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"cardRestrictions\": {\n            \"countries\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"MCC\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"blockReason\": \"ipsum dolore sed eiusmod\",\n          \"nameOnCard\": \"elit fugiat\",\n          \"cardNetwork\": \"veniam in ea\",\n          \"autopay\": {\n            \"enabled\": true,\n            \"sourceAccountId\": \"in esse\",\n            \"paymentType\": \"eiusmod pariatur ad incididunt\",\n            \"onStatementDate\": true,\n            \"dayOfMonth\": \"aute quis\"\n          },\n          \"dueAmount\": -72566946.1565619,\n          \"dueDate\": \"dolore ea ad\",\n          \"minimumPaymentDue\": -49437296.82736588,\n          \"partialPaymentPaid\": -96138710.26592928\n        }\n      ],\n      \"IsCrossAccount\": true\n    },\n    {\n      \"customerId\": -45371772.33124074,\n      \"accountName\": \"mollit laborum est sunt in\",\n      \"accountNickname\": \"do\",\n      \"accountNumber\": \"cillum ad deserunt occaecat eiusmod\",\n      \"accountType\": \"Lor\",\n      \"activatedDate\": \"non\",\n      \"availableBalance\": 7230975.924280435,\n      \"availableCash\": 74299707.50258464,\n      \"availableCashLimit\": 55618175.48687217,\n      \"availableCredit\": 70550223.9945082,\n      \"bankName\": \"cupidatat do Ut\",\n      \"branchName\": \"in deserunt\",\n      \"cardName\": \"Duis culpa eiusmod officia\",\n      \"cardNumber\": \"adipisicing nisi eu\",\n      \"cardStatus\": \"deserunt ipsum dolore\",\n      \"cardType\": \"eu sed cillum qui\",\n      \"creditLimit\": 33495859.22394693,\n      \"currency\": \"qui v\",\n      \"currentBalance\": -66152326.46956337,\n      \"deactivatedDate\": \"aute officia\",\n      \"dueAmount\": -63034128.49190728,\n      \"dueDate\": \"consequat nostrud nulla \",\n      \"earlyWithdrawalPenalty\": 54559262.7009584,\n      \"email\": \"non proident nulla dolor\",\n      \"expDate\": \"in culpa quis sed tempor\",\n      \"fdType\": \"anim reprehenderit cillum mollit\",\n      \"image\": \"labore ex\",\n      \"interestRate\": -74883611.61755437,\n      \"internalTransferFromEnabled\": false,\n      \"internalTransferToEnabled\": true,\n      \"isPrimaryMobile\": true,\n      \"isAlternateMobileNumber\": false,\n      \"isStatement\": false,\n      \"lastDrawDate\": \"velit ullamco laborum Duis\",\n      \"loanMaturityDate\": \"minim consectetur cupidatat commodo in\",\n      \"loanOriginationDate\": \"qui Excepteur\",\n      \"location\": \"\",\n      \"lastUpdated\": \"veniam\",\n      \"maxTransactionLimit\": \"incididunt\",\n      \"maturityDate\": \"proident sed\",\n      \"minimumPaymentDue\": \"ul\",\n      \"minimumBalance\": \"irure ipsum\",\n      \"monthlyPayment\": 27188290.881539285,\n      \"openingBalance\": 5360297.850294143,\n      \"originalLoanAmount\": 61487547.9369826,\n      \"P2PLimit\": -27099740.564061254,\n      \"p2pEnabled\": 39689778.57617101,\n      \"paybillEnabled\": true,\n      \"payoffAmount\": -94677204.07983497,\n      \"personalBankerName\": \"ipsum in\",\n      \"personalBankerContact\": {\n        \"email\": \"sunt\",\n        \"mobileNumber\": \"fugiat ea ex dolor\"\n      },\n      \"phone\": -87221394.13932757,\n      \"postedBalance\": 77278105.59342661,\n      \"principalBalance\": \"exercitation sunt\",\n      \"productCode\": \"laboris consequat\",\n      \"productName\": \"in amet cillum\",\n      \"propertyAddress\": \"non dolor\",\n      \"rewardPoints\": \"laborum consectetur exercitation aute\",\n      \"routingNumber\": \"ullamco cillum\",\n      \"statementDate\": \"ut est\",\n      \"status\": \"dolor ut aliquip\",\n      \"swiftCode\": \"laborum anim ut ex sint\",\n      \"totalBalance\": 47775553.08380607,\n      \"unbilledAmount\": -90578918.7121289,\n      \"valueAtMaturity\": -54094818.6509262,\n      \"holdAmount\": 86753168.07816964,\n      \"unclearFundsAmount\": 99782557.44872162,\n      \"averageMonthlyBalance\": 43345267.789437294,\n      \"netWithdrawableBalance\": -84026579.16413645,\n      \"totalTenure\": \"ut esse\",\n      \"remainingTenure\": \"dolor occaecat ullamco\",\n      \"debitAccountNumber\": \"magna sint ad ea amet\",\n      \"lateFee\": 43195081.23269272,\n      \"bounceCharge\": 63558676.70338276,\n      \"totalCharges\": -48181628.15251874,\n      \"overDueAmount\": 72613214.72122529,\n      \"cardDetails\": [\n        {\n          \"cardName\": \"ullamco dolor id Excepteur\",\n          \"cardNumber\": \"eiusmod\",\n          \"cardStatus\": \"sint elit exercitation laborum velit\",\n          \"cardImage\": \"ex officia Excepteur\",\n          \"cardType\": \"sed\",\n          \"expDate\": \"amet tempor Lorem labore consequat\",\n          \"displayCardStatus\": \"aliquip sed Duis incididunt consectetur\",\n          \"primaryCard\": \"in id incididunt dolore\",\n          \"cardChannelInfo\": {\n            \"ATM\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"offline\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"international\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"online\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"contactless\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"cardRestrictions\": {\n            \"countries\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"MCC\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"blockReason\": \"labore\",\n          \"nameOnCard\": \"sed\",\n          \"cardNetwork\": \"est dolor\",\n          \"autopay\": {\n            \"enabled\": true,\n            \"sourceAccountId\": \"eu sed\",\n            \"paymentType\": \"ut dolore proident anim\",\n            \"onStatementDate\": false,\n            \"dayOfMonth\": \"consectetur velit\"\n          },\n          \"dueAmount\": 14749231.57955201,\n          \"dueDate\": \"quis dolore velit fugiat in\",\n          \"minimumPaymentDue\": -9156460.162598819,\n          \"partialPaymentPaid\": -75079980.89888495\n        },\n        {\n          \"cardName\": \"ut laborum\",\n          \"cardNumber\": \"mollit velit nostrud\",\n          \"cardStatus\": \"nulla occaecat\",\n          \"cardImage\": \"in laboris in\",\n          \"cardType\": \"ipsum in\",\n          \"expDate\": \"voluptate minim do aut\",\n          \"displayCardStatus\": \"est magna\",\n          \"primaryCard\": \"dolore ut pariatur non\",\n          \"cardChannelInfo\": {\n            \"ATM\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"offline\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"international\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"online\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"contactless\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"cardRestrictions\": {\n            \"countries\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"MCC\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ]\n          },\n          \"blockReason\": \"irure ad pariatur\",\n          \"nameOnCard\": \"velit et\",\n          \"cardNetwork\": \"cupidatat \",\n          \"autopay\": {\n            \"enabled\": false,\n            \"sourceAccountId\": \"ut\",\n            \"paymentType\": \"reprehenderit cupidatat tempor sit\",\n            \"onStatementDate\": false,\n            \"dayOfMonth\": \"Duis dolore elit in\"\n          },\n          \"dueAmount\": -37929528.64086052,\n          \"dueDate\": \"non incididunt tempor consectetur pariatur\",\n          \"minimumPaymentDue\": -64374742.06780198,\n          \"partialPaymentPaid\": -46368791.329834335\n        }\n      ],\n      \"IsCrossAccount\": false\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "7bc6d9db-fc54-4825-a396-947125d02470",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "92e89a80-f64f-4bf2-9c56-8ee92dff1538",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetAccountInfo for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `customerId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customerId`)){\n                if(pm.expect(ld.get(pm.response.json(), `customerId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customerId`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `accounts` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accounts`)){\n                if(pm.expect(ld.get(pm.response.json(), `accounts`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `accounts`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the accounts field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`accounts`);\n            let accountsArray = ld.get(pm.response.json(), `accounts`, \"\");\n            for (let accounts_it = 0; accounts_it < accountsArray.length; accounts_it++) {\n                let iterator = accounts_it;\n                \t\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].customerId' has 'customerId' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].customerId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].customerId`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].accountName' has 'accountName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].accountName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].accountName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].accountNickname' has 'accountNickname' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].accountNickname`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].accountNickname`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].accountNumber' has 'accountNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].accountNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].accountNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].accountType' has 'accountType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].accountType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].accountType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].activatedDate' has 'activatedDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].activatedDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].activatedDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].availableBalance' has 'availableBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].availableBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].availableBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].availableCash' has 'availableCash' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].availableCash`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].availableCash`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].availableCashLimit' has 'availableCashLimit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].availableCashLimit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].availableCashLimit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].availableCredit' has 'availableCredit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].availableCredit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].availableCredit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].bankName' has 'bankName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].bankName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].bankName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].branchName' has 'branchName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].branchName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].branchName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardName' has 'cardName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardNumber' has 'cardNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardStatus' has 'cardStatus' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardStatus`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardStatus`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardType' has 'cardType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].creditLimit' has 'creditLimit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].creditLimit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].creditLimit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].currency' has 'currency' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].currency`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].currency`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].currentBalance' has 'currentBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].currentBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].currentBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].deactivatedDate' has 'deactivatedDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].deactivatedDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].deactivatedDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].dueAmount' has 'dueAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].dueAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].dueAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].dueDate' has 'dueDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].dueDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].dueDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].earlyWithdrawalPenalty' has 'earlyWithdrawalPenalty' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].earlyWithdrawalPenalty`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].earlyWithdrawalPenalty`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].email' has 'email' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].email`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].email`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].expDate' has 'expDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].expDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].expDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].fdType' has 'fdType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].fdType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].fdType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].image' has 'image' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].image`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].image`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].interestRate' has 'interestRate' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].interestRate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].interestRate`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].internalTransferFromEnabled' has 'internalTransferFromEnabled' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].internalTransferFromEnabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].internalTransferFromEnabled`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].internalTransferToEnabled' has 'internalTransferToEnabled' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].internalTransferToEnabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].internalTransferToEnabled`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].isPrimaryMobile' has 'isPrimaryMobile' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].isPrimaryMobile`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].isPrimaryMobile`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].isAlternateMobileNumber' has 'isAlternateMobileNumber' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].isAlternateMobileNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].isAlternateMobileNumber`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].isStatement' has 'isStatement' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].isStatement`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].isStatement`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].lastDrawDate' has 'lastDrawDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].lastDrawDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].lastDrawDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].loanMaturityDate' has 'loanMaturityDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].loanMaturityDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].loanMaturityDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].loanOriginationDate' has 'loanOriginationDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].loanOriginationDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].loanOriginationDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].location' has 'location' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].location`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].location`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].lastUpdated' has 'lastUpdated' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].lastUpdated`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].lastUpdated`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].maxTransactionLimit' has 'maxTransactionLimit' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].maxTransactionLimit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].maxTransactionLimit`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].maturityDate' has 'maturityDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].maturityDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].maturityDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].minimumPaymentDue' has 'minimumPaymentDue' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].minimumPaymentDue`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].minimumPaymentDue`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].minimumBalance' has 'minimumBalance' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].minimumBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].minimumBalance`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].monthlyPayment' has 'monthlyPayment' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].monthlyPayment`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].monthlyPayment`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].openingBalance' has 'openingBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].openingBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].openingBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].originalLoanAmount' has 'originalLoanAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].originalLoanAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].originalLoanAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].P2PLimit' has 'P2PLimit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].P2PLimit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].P2PLimit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].p2pEnabled' has 'p2pEnabled' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].p2pEnabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].p2pEnabled`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].paybillEnabled' has 'paybillEnabled' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].paybillEnabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].paybillEnabled`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].payoffAmount' has 'payoffAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].payoffAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].payoffAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].personalBankerName' has 'personalBankerName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].personalBankerName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].personalBankerName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].personalBankerContact' has 'personalBankerContact' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].personalBankerContact`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].personalBankerContact`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].personalBankerContact.email' has 'email' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].personalBankerContact.email`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].personalBankerContact.email`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].personalBankerContact.mobileNumber' has 'mobileNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].personalBankerContact.mobileNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].personalBankerContact.mobileNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].phone' has 'phone' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].phone`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].phone`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].postedBalance' has 'postedBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].postedBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].postedBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].principalBalance' has 'principalBalance' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].principalBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].principalBalance`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].productCode' has 'productCode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].productCode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].productCode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].productName' has 'productName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].productName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].productName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].propertyAddress' has 'propertyAddress' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].propertyAddress`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].propertyAddress`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].rewardPoints' has 'rewardPoints' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].rewardPoints`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].rewardPoints`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].routingNumber' has 'routingNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].routingNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].routingNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].statementDate' has 'statementDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].statementDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].statementDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].status' has 'status' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].status`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].status`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].swiftCode' has 'swiftCode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].swiftCode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].swiftCode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].totalBalance' has 'totalBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].totalBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].totalBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].unbilledAmount' has 'unbilledAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].unbilledAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].unbilledAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].valueAtMaturity' has 'valueAtMaturity' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].valueAtMaturity`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].valueAtMaturity`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].holdAmount' has 'holdAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].holdAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].holdAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].unclearFundsAmount' has 'unclearFundsAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].unclearFundsAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].unclearFundsAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].averageMonthlyBalance' has 'averageMonthlyBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].averageMonthlyBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].averageMonthlyBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].netWithdrawableBalance' has 'netWithdrawableBalance' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].netWithdrawableBalance`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].netWithdrawableBalance`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].totalTenure' has 'totalTenure' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].totalTenure`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].totalTenure`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].remainingTenure' has 'remainingTenure' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].remainingTenure`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].remainingTenure`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].debitAccountNumber' has 'debitAccountNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].debitAccountNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].debitAccountNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].lateFee' has 'lateFee' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].lateFee`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].lateFee`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].bounceCharge' has 'bounceCharge' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].bounceCharge`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].bounceCharge`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].totalCharges' has 'totalCharges' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].totalCharges`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].totalCharges`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].overDueAmount' has 'overDueAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].overDueAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].overDueAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accountsArray' has 'cardDetails' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the accounts[${accounts_it}].cardDetails field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`accounts[${accounts_it}].cardDetails`);\n            let cardDetailsArray = ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails`, \"\");\n            for (let cardDetails_it = 0; cardDetails_it < cardDetailsArray.length; cardDetails_it++) {\n                let iterator = cardDetails_it;\n                \t\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardName' has 'cardName' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardName`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardName`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNumber' has 'cardNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardStatus' has 'cardStatus' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardStatus`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardStatus`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardImage' has 'cardImage' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardImage`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardImage`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardType' has 'cardType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].expDate' has 'expDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].expDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].expDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].displayCardStatus' has 'displayCardStatus' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].displayCardStatus`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].displayCardStatus`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].primaryCard' has 'primaryCard' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].primaryCard`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].primaryCard`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo' has 'cardChannelInfo' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM' has 'ATM' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.limit' has 'limit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.limit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.ATM.limit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline' has 'offline' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.limit' has 'limit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.limit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.offline.limit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international' has 'international' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.limit' has 'limit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.limit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.international.limit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online' has 'online' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.limit' has 'limit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.limit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.online.limit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless' has 'contactless' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.enable' has 'enable' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.enable`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.enable`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.limit' has 'limit' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.limit`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardChannelInfo.contactless.limit`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions' has 'cardRestrictions' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'cardDetailsArray' has 'countries' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries`);\n            let countriesArray = ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries`, \"\");\n            for (let countries_it = 0; countries_it < countriesArray.length; countries_it++) {\n                let iterator = countries_it;\n                \t\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries[${countries_it}].countrycode' has 'countrycode' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries[${countries_it}].countrycode`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.countries[${countries_it}].countrycode`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'cardDetailsArray' has 'MCC' as an array`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC`)).to.exist){\n              pm.expect(Array.isArray(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC`))).to.equal(true);\n            }\n\n        })\n\n\n        pm.test(`Each object in the accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC`);\n            let MCCArray = ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC`, \"\");\n            for (let MCC_it = 0; MCC_it < MCCArray.length; MCC_it++) {\n                let iterator = MCC_it;\n                \t\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].name`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].description' has 'description' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].description`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardRestrictions.MCC[${MCC_it}].description`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].blockReason' has 'blockReason' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].blockReason`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].blockReason`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].nameOnCard' has 'nameOnCard' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].nameOnCard`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].nameOnCard`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNetwork' has 'cardNetwork' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNetwork`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].cardNetwork`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay' has 'autopay' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.enabled' has 'enabled' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.enabled`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.enabled`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.sourceAccountId' has 'sourceAccountId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.sourceAccountId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.sourceAccountId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.paymentType' has 'paymentType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.paymentType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.paymentType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.onStatementDate' has 'onStatementDate' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.onStatementDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.onStatementDate`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.dayOfMonth' has 'dayOfMonth' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.dayOfMonth`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].autopay.dayOfMonth`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueAmount' has 'dueAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueDate' has 'dueDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].dueDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].minimumPaymentDue' has 'minimumPaymentDue' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].minimumPaymentDue`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].minimumPaymentDue`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].cardDetails[${cardDetails_it}].partialPaymentPaid' has 'partialPaymentPaid' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].cardDetails[${cardDetails_it}].partialPaymentPaid`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].cardDetails[${cardDetails_it}].partialPaymentPaid`, null)).to.equal(\"number\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test(`${iterator} element of array 'accounts[${accounts_it}].IsCrossAccount' has 'IsCrossAccount' as 'boolean'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `accounts[${accounts_it}].IsCrossAccount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`accounts[${accounts_it}].IsCrossAccount`, null)).to.equal(\"boolean\");\n            }\n        })\n\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "25064713-85bc-438a-b77c-6f499af199ed",
      "name": "to get the details of the mentioned customer account",
      "request": {
        "name": "to get the details of the mentioned customer account",
        "description": {
          "content": "fetch customer account details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetAccountDetails"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountInfo\": [\n        \"{{accountInfo}}\"\n    ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "99466065-23eb-4893-a0f6-0356a33f02ac",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountDetails"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountInfo\": [\n        \"{{accountInfo}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"customerId\": -60830479.13569817,\n    \"accountName\": \"anim esse do incididunt\",\n    \"accountNickname\": \"qui\",\n    \"accountNumber\": \"nisi sed ea enim\",\n    \"accountType\": \"aute\",\n    \"activatedDate\": \"veniam ex labore minim exercitation\",\n    \"availableBalance\": 45556323.89992827,\n    \"availableCash\": 50332273.14876264,\n    \"availableCashLimit\": 13597846.597847462,\n    \"availableCredit\": -79774762.35061878,\n    \"bankName\": \"fugiat id\",\n    \"branchName\": \"qui id pariatur mollit commodo\",\n    \"cardName\": \"exercitation officia fugiat\",\n    \"cardNumber\": \"dolore laboris\",\n    \"cardStatus\": \"officia velit Duis aliqua\",\n    \"cardType\": \"sint minim et mollit eu\",\n    \"creditLimit\": 44556088.01625174,\n    \"currency\": \"sed Duis\",\n    \"currentBalance\": 83371701.4788669,\n    \"deactivatedDate\": \"veniam adipisicing\",\n    \"dueAmount\": -65834556.97643545,\n    \"dueDate\": \"non est\",\n    \"earlyWithdrawalPenalty\": 87018734.92498592,\n    \"email\": \"ven\",\n    \"expDate\": \"consequat sunt exercitation dolor\",\n    \"fdType\": \"laboris\",\n    \"image\": \"\",\n    \"interestRate\": 30213161.695762604,\n    \"internalTransferFromEnabled\": true,\n    \"internalTransferToEnabled\": false,\n    \"isPrimaryMobile\": true,\n    \"isAlternateMobileNumber\": true,\n    \"isStatement\": false,\n    \"lastDrawDate\": \"ullamco elit\",\n    \"loanMaturityDate\": \"esse irure mollit\",\n    \"loanOriginationDate\": \"est ea ad\",\n    \"location\": \"nostrud cillum amet in\",\n    \"lastUpdated\": \"exercitation sit officia eu veniam\",\n    \"maxTransactionLimit\": \"laboris Ut elit\",\n    \"maturityDate\": \"veniam exercitation aute\",\n    \"minimumPaymentDue\": \"dolor\",\n    \"minimumBalance\": \"in ea Ut exercitation\",\n    \"monthlyPayment\": -78510864.79162084,\n    \"openingBalance\": -18072344.45403081,\n    \"originalLoanAmount\": 36268350.84598872,\n    \"P2PLimit\": -16100149.293530881,\n    \"p2pEnabled\": -83102395.6159874,\n    \"paybillEnabled\": true,\n    \"payoffAmount\": -30019939.04473652,\n    \"personalBankerName\": \"cupidatat dolor\",\n    \"personalBankerContact\": {\n      \"email\": \"aute Duis sint proident\",\n      \"mobileNumber\": \"ipsum quis aliqua\"\n    },\n    \"phone\": -16817096.39500588,\n    \"postedBalance\": 86218899.43616736,\n    \"principalBalance\": \"dolor minim culpa quis\",\n    \"productCode\": \"pariatur nisi aute tempor\",\n    \"productName\": \"laboris\",\n    \"propertyAddress\": \"cillum aliqua culpa mollit\",\n    \"rewardPoints\": \"anim laboris ullamco dolor esse\",\n    \"routingNumber\": \"sit minim tempor qui\",\n    \"statementDate\": \"consequat laboris\",\n    \"status\": \"cupidatat\",\n    \"swiftCode\": \"tempor\",\n    \"totalBalance\": 16024852.708214521,\n    \"unbilledAmount\": -9427577.997484088,\n    \"valueAtMaturity\": -37269639.86512461,\n    \"holdAmount\": -55021299.160703175,\n    \"unclearFundsAmount\": -10811703.240626886,\n    \"averageMonthlyBalance\": -98192435.367231,\n    \"netWithdrawableBalance\": 83759824.4163324,\n    \"totalTenure\": \"laboris ut\",\n    \"remainingTenure\": \"do\",\n    \"debitAccountNumber\": \"ipsum\",\n    \"lateFee\": -79198304.36966482,\n    \"bounceCharge\": -49908335.39989819,\n    \"totalCharges\": 96246256.39112398,\n    \"overDueAmount\": 82869903.3624736,\n    \"cardDetails\": [\n      {\n        \"cardName\": \"culpa qui fugiat ut\",\n        \"cardNumber\": \"dolor laboris do\",\n        \"cardStatus\": \"eu laborum\",\n        \"cardImage\": \"cillum sit et\",\n        \"cardType\": \"pariatur laborum velit\",\n        \"expDate\": \"ut non\",\n        \"displayCardStatus\": \"eu aute cillum et\",\n        \"primaryCard\": \"in pariatur incididunt\",\n        \"cardChannelInfo\": {\n          \"ATM\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"offline\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"international\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"online\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"contactless\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        \"cardRestrictions\": {\n          \"countries\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"MCC\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"blockReason\": \"anim enim cupidatat in\",\n        \"nameOnCard\": \"o\",\n        \"cardNetwork\": \"in\",\n        \"autopay\": {\n          \"enabled\": false,\n          \"sourceAccountId\": \"laboris \",\n          \"paymentType\": \"dolor reprehenderit proident anim\",\n          \"onStatementDate\": false,\n          \"dayOfMonth\": \"adipisicing Ut dolore elit culpa\"\n        },\n        \"dueAmount\": -91933692.72813338,\n        \"dueDate\": \"velit est Ut sunt anim\",\n        \"minimumPaymentDue\": -38286855.51398716,\n        \"partialPaymentPaid\": 19001105.64148596\n      },\n      {\n        \"cardName\": \"do elit laborum\",\n        \"cardNumber\": \"exercitation dolore magna\",\n        \"cardStatus\": \"nisi labore sit sed\",\n        \"cardImage\": \"nostrud commodo nulla sit\",\n        \"cardType\": \"id in Excepteur eiusmod\",\n        \"expDate\": \"id aliqua mollit\",\n        \"displayCardStatus\": \"dolor magna tempor\",\n        \"primaryCard\": \"exercitation\",\n        \"cardChannelInfo\": {\n          \"ATM\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"offline\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"international\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"online\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"contactless\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        \"cardRestrictions\": {\n          \"countries\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"MCC\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"blockReason\": \"cul\",\n        \"nameOnCard\": \"nisi in\",\n        \"cardNetwork\": \"velit ad irure dolore\",\n        \"autopay\": {\n          \"enabled\": true,\n          \"sourceAccountId\": \"non cillum\",\n          \"paymentType\": \"id quis dolor mollit\",\n          \"onStatementDate\": true,\n          \"dayOfMonth\": \"amet cillum cupidatat proident esse\"\n        },\n        \"dueAmount\": -42991591.134094164,\n        \"dueDate\": \"in Lorem\",\n        \"minimumPaymentDue\": 31664527.84611869,\n        \"partialPaymentPaid\": 5543221.726585075\n      }\n    ],\n    \"IsCrossAccount\": false\n  },\n  {\n    \"customerId\": 27668891.14971742,\n    \"accountName\": \"cillum Duis sed eiusmod ullamco\",\n    \"accountNickname\": \"eu incididunt velit\",\n    \"accountNumber\": \"nisi ea commodo\",\n    \"accountType\": \"aliquip tempor\",\n    \"activatedDate\": \"ex reprehenderit consecte\",\n    \"availableBalance\": -3295891.0477235615,\n    \"availableCash\": 83465756.67559981,\n    \"availableCashLimit\": -3689413.081681624,\n    \"availableCredit\": 69826445.85313937,\n    \"bankName\": \"et exercitation cupidatat\",\n    \"branchName\": \"ut\",\n    \"cardName\": \"sed adipisicing\",\n    \"cardNumber\": \"id Duis\",\n    \"cardStatus\": \"id nostrud culpa deserunt\",\n    \"cardType\": \"esse adipisicing eu in\",\n    \"creditLimit\": -79150877.69918752,\n    \"currency\": \"sunt amet Duis\",\n    \"currentBalance\": 96469506.6663878,\n    \"deactivatedDate\": \"incididunt occaecat in\",\n    \"dueAmount\": 94259814.40479511,\n    \"dueDate\": \"pariatur irure elit\",\n    \"earlyWithdrawalPenalty\": 30524939.335272267,\n    \"email\": \"culpa adipisicing dolor\",\n    \"expDate\": \"sunt\",\n    \"fdType\": \"ut voluptate irure ut\",\n    \"image\": \"voluptate in aliqua\",\n    \"interestRate\": -50886541.46096791,\n    \"internalTransferFromEnabled\": true,\n    \"internalTransferToEnabled\": false,\n    \"isPrimaryMobile\": false,\n    \"isAlternateMobileNumber\": true,\n    \"isStatement\": true,\n    \"lastDrawDate\": \"dolore non\",\n    \"loanMaturityDate\": \"voluptate dolore\",\n    \"loanOriginationDate\": \"dolore enim\",\n    \"location\": \"ea dolore\",\n    \"lastUpdated\": \"culpa est mollit adipisicing\",\n    \"maxTransactionLimit\": \"ullamco cillum eiusmod laborum dolor\",\n    \"maturityDate\": \"velit ex exercitat\",\n    \"minimumPaymentDue\": \"sint\",\n    \"minimumBalance\": \"do\",\n    \"monthlyPayment\": 79386614.3588779,\n    \"openingBalance\": 96051432.76962441,\n    \"originalLoanAmount\": -4091468.1665098965,\n    \"P2PLimit\": 14766003.6152177,\n    \"p2pEnabled\": -81121525.7966249,\n    \"paybillEnabled\": false,\n    \"payoffAmount\": -98182930.91379516,\n    \"personalBankerName\": \"sint\",\n    \"personalBankerContact\": {\n      \"email\": \"do eiusmod veniam minim\",\n      \"mobileNumber\": \"c\"\n    },\n    \"phone\": -9254329.782815546,\n    \"postedBalance\": -239630.7665963024,\n    \"principalBalance\": \"magna\",\n    \"productCode\": \"sit qui ad exercitation\",\n    \"productName\": \"aliqua ve\",\n    \"propertyAddress\": \"labore dolore irure officia\",\n    \"rewardPoints\": \"adipisicing occaecat\",\n    \"routingNumber\": \"Lorem magna\",\n    \"statementDate\": \"nostrud et occaecat ex\",\n    \"status\": \"ea dolore\",\n    \"swiftCode\": \"Excepteur\",\n    \"totalBalance\": 61258579.946410716,\n    \"unbilledAmount\": 56752261.28809592,\n    \"valueAtMaturity\": 824076.3687437028,\n    \"holdAmount\": 82057243.5947181,\n    \"unclearFundsAmount\": 6432649.570137367,\n    \"averageMonthlyBalance\": -44865694.64381369,\n    \"netWithdrawableBalance\": -393663.8947664499,\n    \"totalTenure\": \"est laboris proident con\",\n    \"remainingTenure\": \"Excepteur\",\n    \"debitAccountNumber\": \"reprehenderit irure\",\n    \"lateFee\": 25069426.306312963,\n    \"bounceCharge\": 26189981.045863718,\n    \"totalCharges\": -86604346.19050044,\n    \"overDueAmount\": 84710797.45302811,\n    \"cardDetails\": [\n      {\n        \"cardName\": \"culpa\",\n        \"cardNumber\": \"laboris\",\n        \"cardStatus\": \"quis sint\",\n        \"cardImage\": \"Ut dolor in\",\n        \"cardType\": \"amet non Excepteur minim\",\n        \"expDate\": \"velit occaecat\",\n        \"displayCardStatus\": \"pariatur in adipisicing cillum\",\n        \"primaryCard\": \"non adipisicing\",\n        \"cardChannelInfo\": {\n          \"ATM\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"offline\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"international\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"online\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"contactless\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        \"cardRestrictions\": {\n          \"countries\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"MCC\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"blockReason\": \"dolor\",\n        \"nameOnCard\": \"labore Duis irure\",\n        \"cardNetwork\": \"proident ex\",\n        \"autopay\": {\n          \"enabled\": true,\n          \"sourceAccountId\": \"dolore Duis venia\",\n          \"paymentType\": \"eiusmod\",\n          \"onStatementDate\": true,\n          \"dayOfMonth\": \"consequat magna\"\n        },\n        \"dueAmount\": 80103370.46824363,\n        \"dueDate\": \"do aliquip ut\",\n        \"minimumPaymentDue\": 308734.99465733767,\n        \"partialPaymentPaid\": 99541543.34689793\n      },\n      {\n        \"cardName\": \"deserunt irure in\",\n        \"cardNumber\": \"dolor irure aliqua anim minim\",\n        \"cardStatus\": \"cupidatat ea\",\n        \"cardImage\": \"consectetur\",\n        \"cardType\": \"dolore reprehenderit\",\n        \"expDate\": \"ea\",\n        \"displayCardStatus\": \"proident occaecat velit\",\n        \"primaryCard\": \"officia reprehenderit\",\n        \"cardChannelInfo\": {\n          \"ATM\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"offline\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"international\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"online\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"contactless\": {\n            \"enable\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"limit\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        \"cardRestrictions\": {\n          \"countries\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"MCC\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ]\n        },\n        \"blockReason\": \"nulla \",\n        \"nameOnCard\": \"laboris consectetur laborum nisi deserunt\",\n        \"cardNetwork\": \"adipisicing id consequat enim\",\n        \"autopay\": {\n          \"enabled\": true,\n          \"sourceAccountId\": \"ipsum laboris minim\",\n          \"paymentType\": \"enim dolor irure aute\",\n          \"onStatementDate\": false,\n          \"dayOfMonth\": \"exercitation officia nostrud sed\"\n        },\n        \"dueAmount\": -73922652.23205197,\n        \"dueDate\": \"qui deserunt\",\n        \"minimumPaymentDue\": -25056765.239795446,\n        \"partialPaymentPaid\": -68469783.00997569\n      }\n    ],\n    \"IsCrossAccount\": false\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "10819497-aaf2-41c6-a15a-f17b99a5696b",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountDetails"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountInfo\": [\n        \"{{accountInfo}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "b17b39d2-3315-4590-b642-fec49174d491",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountDetails"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountInfo\": [\n        \"{{accountInfo}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetAccountDetails for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "6f0cbc8e-841a-4c63-a6fc-3f846c002c79",
      "name": "to get the limits of customer accounts",
      "request": {
        "name": "to get the limits of customer accounts",
        "description": {
          "content": "fetch customer account limits",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetAccountsLimit"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "ffd7e62e-7c0f-4af7-a847-03653ffb42d1",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountsLimit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"accountName\": \"est Duis nulla velit\",\n    \"accountNickname\": \"nulla adipisicing veniam mollit\",\n    \"accountNumber\": \"laborum\",\n    \"accountType\": \"do pariatur Duis minim\",\n    \"balance\": \"consequat dolor culpa\",\n    \"cardName\": \"enim in Duis\",\n    \"cardNumber\": \"culpa eiusmod anim\",\n    \"currency\": \"occaecat commodo in\",\n    \"customerId\": 72085873.57638061,\n    \"perTxn\": -83738750.42741598,\n    \"status\": \"aliquip et commodo nostrud\",\n    \"availableCashLimit\": -58224995.19491715,\n    \"creditLimit\": -24244123.661747262,\n    \"availableCredit\": -67191993.00651382,\n    \"purchase\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": 56872439.065818936,\n          \"maximum\": -90703478.32382098,\n          \"spent\": -90687074.16769879\n        },\n        \"daily\": {\n          \"available\": -36991308.009375915,\n          \"maximum\": 68058331.912893,\n          \"spent\": -93862346.38579652\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": 43484527.4238874,\n          \"maximum\": -79815358.21091872,\n          \"usedup\": -15214923.359389096\n        },\n        \"daily\": {\n          \"available\": 35472911.6381343,\n          \"maximum\": 36351221.053079456,\n          \"usedup\": -88244998.65680586\n        }\n      }\n    },\n    \"txnsPerDay\": {\n      \"available\": 82965826.0257259,\n      \"maximum\": -4175673.7861077487,\n      \"usedup\": -63440349.66231504,\n      \"amountperday\": 71063316.61792704\n    },\n    \"withdrawal\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": 17839130.64377907,\n          \"maximum\": 14811711.032171056,\n          \"spent\": -7977451.134866789\n        },\n        \"daily\": {\n          \"available\": -38240892.48866667,\n          \"maximum\": 71039561.0186024,\n          \"spent\": -86379414.90327878\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": 53179944.49345073,\n          \"maximum\": 44871499.993543684,\n          \"usedup\": -55555483.765685\n        },\n        \"daily\": {\n          \"available\": 76214794.02585578,\n          \"maximum\": -48008908.37638483,\n          \"usedup\": -71321577.04554118\n        }\n      }\n    }\n  },\n  {\n    \"accountName\": \"dolor in ipsum ad\",\n    \"accountNickname\": \"nisi enim voluptate aliquip\",\n    \"accountNumber\": \"Excepteur aute\",\n    \"accountType\": \"quis\",\n    \"balance\": \"non\",\n    \"cardName\": \"cupidatat incididunt qui\",\n    \"cardNumber\": \"et fugiat tempor nisi sit\",\n    \"currency\": \"commodo esse Lorem\",\n    \"customerId\": 20016977.323992163,\n    \"perTxn\": -77448430.53595835,\n    \"status\": \"in nulla irure labore\",\n    \"availableCashLimit\": -16890760.534310937,\n    \"creditLimit\": -3274580.3077830225,\n    \"availableCredit\": 16998219.47871399,\n    \"purchase\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": -61540282.39860061,\n          \"maximum\": -76108523.79936035,\n          \"spent\": 90102165.93800932\n        },\n        \"daily\": {\n          \"available\": 66264563.477711916,\n          \"maximum\": 68893409.35697216,\n          \"spent\": 67785717.35812044\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": -51447326.6391299,\n          \"maximum\": 49056983.19718751,\n          \"usedup\": -9582240.384414524\n        },\n        \"daily\": {\n          \"available\": 56501221.863792926,\n          \"maximum\": 83611200.5194785,\n          \"usedup\": 80245658.89867598\n        }\n      }\n    },\n    \"txnsPerDay\": {\n      \"available\": 74417039.41281065,\n      \"maximum\": 97262755.63266379,\n      \"usedup\": -592323.3753505051,\n      \"amountperday\": 95991462.71322176\n    },\n    \"withdrawal\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": -52498584.54734881,\n          \"maximum\": 55816536.63376191,\n          \"spent\": 67117580.90281421\n        },\n        \"daily\": {\n          \"available\": -56125626.800828464,\n          \"maximum\": -38845238.41588532,\n          \"spent\": 35091130.68329057\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": -4945111.370904878,\n          \"maximum\": -74537884.58393769,\n          \"usedup\": -70291047.94631551\n        },\n        \"daily\": {\n          \"available\": -65082084.55922811,\n          \"maximum\": 64631365.47614533,\n          \"usedup\": -92023671.16583402\n        }\n      }\n    }\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "feaa8a67-65a9-4421-8e92-1449f86ad582",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountsLimit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "939744ef-8604-441f-9ad8-004e7764a0c3",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountsLimit"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetAccountsLimit for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "8d7e434d-b9c1-4fb2-84db-bf6efe4368aa",
      "name": "to get the limits of customer accounts",
      "request": {
        "name": "to get the limits of customer accounts",
        "description": {
          "content": "fetch customer account limits",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetAccountSpecificLimitsInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": [\n        \"{{accountNumber}}\"\n    ],\n    \"cardNumber\": [\n        \"{{cardNumber}}\"\n    ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "d4b9f08c-d78a-4083-a9f3-69126424507d",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountSpecificLimitsInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": [\n        \"{{accountNumber}}\"\n    ],\n    \"cardNumber\": [\n        \"{{cardNumber}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"customerId\": 1045300,\n    \"currency\": \"USD\",\n    \"withdrawal\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": 5000,\n          \"maximum\": 8000,\n          \"spent\": 3000\n        },\n        \"daily\": {\n          \"available\": 500,\n          \"maximum\": 800,\n          \"spent\": 300\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": 20,\n          \"maximum\": 30,\n          \"usedup\": 10\n        },\n        \"daily\": {\n          \"available\": 5,\n          \"maximum\": 8,\n          \"usedup\": 3\n        }\n      }\n    },\n    \"purchase\": {\n      \"limits\": {\n        \"monthly\": {\n          \"available\": 5000,\n          \"maximum\": 8000,\n          \"spent\": 3000\n        },\n        \"daily\": {\n          \"available\": 500,\n          \"maximum\": 800,\n          \"spent\": 300\n        }\n      },\n      \"transactions\": {\n        \"monthly\": {\n          \"available\": 20,\n          \"maximum\": 30,\n          \"usedup\": 10\n        },\n        \"daily\": {\n          \"available\": 5,\n          \"maximum\": 8,\n          \"usedup\": 3\n        }\n      }\n    },\n    \"txnsPerDay\": {\n      \"available\": 5,\n      \"maximum\": 8,\n      \"usedup\": 3,\n      \"amount\": 500\n    },\n    \"perTxn\": 500\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "55cd6873-e225-4be5-bc0e-fc3891d00579",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountSpecificLimitsInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": [\n        \"{{accountNumber}}\"\n    ],\n    \"cardNumber\": [\n        \"{{cardNumber}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ba6edc87-3ec2-4425-9a9c-1cdc91755386",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetAccountSpecificLimitsInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": [\n        \"{{accountNumber}}\"\n    ],\n    \"cardNumber\": [\n        \"{{cardNumber}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetAccountSpecificLimitsInfo for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "fd5f24a2-3a2f-4007-9826-4833c1cd9062",
      "name": "UpdateAccountInfo",
      "request": {
        "name": "UpdateAccountInfo",
        "description": {
          "content": "Update customer account details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "UpdateAccountInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\",\n    \"isStatement\": \"{{isStatement}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "2534d59b-9ef7-4834-b1c5-78f5c087382a",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\",\n    \"isStatement\": \"{{isStatement}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "fde344bc-6233-43e9-8e09-276cb91bb91c",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\",\n    \"isStatement\": \"{{isStatement}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "9e29a28e-3a6c-413a-8025-d41e38737f54",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateAccountInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\",\n    \"isStatement\": \"{{isStatement}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /UpdateAccountInfo for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "30cdcfa5-04f4-470a-85b3-b2bcb576bbd8",
      "name": "GetCustomerInfo",
      "request": {
        "name": "GetCustomerInfo",
        "description": {
          "content": "fetch customer information",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetCustomerInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "03c7b0d7-ee7e-4770-9fb5-0f8c6cc0c238",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"alternatePhoneNumber\": 3875572.68388243,\n  \"customerId\": \"ut pariatur\",\n  \"email\": \"pariatur ut \",\n  \"identificationNumber\": 85495530.63469234,\n  \"identificationType\": \"nostrud fugiat\",\n  \"image\": \"sunt est\",\n  \"isAlternateMobileNumber\": true,\n  \"isPrimaryMobileNumber\": false,\n  \"location\": \"\",\n  \"name\": \"aute\",\n  \"firstName\": \"in velit fugiat nostrud aliqua\",\n  \"lastName\": \"laborum in Excepteur adipisicing dolor\",\n  \"personalBanker\": {\n    \"name\": \"incididunt eiusmod\",\n    \"email\": \"in nulla\",\n    \"mobileNumber\": \"nisi\"\n  },\n  \"phone\": 65983341.57122058,\n  \"securityQuestions\": [\n    \"commodo Lorem sit esse\",\n    \"labore proident irure pariatur\"\n  ],\n  \"segmentId\": 77833401.0129123\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "1ab048fc-c392-4e02-a5a6-6d906720610d",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "9c38d8c3-8fe7-4844-b49d-90fcd58c837e",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetCustomerInfo for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `alternatePhoneNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`alternatePhoneNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `alternatePhoneNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `alternatePhoneNumber`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customerId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customerId`)){\n                if(pm.expect(ld.get(pm.response.json(), `customerId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customerId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `identificationNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`identificationNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `identificationNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `identificationNumber`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `identificationType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`identificationType`)){\n                if(pm.expect(ld.get(pm.response.json(), `identificationType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `identificationType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `image` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n                if(pm.expect(ld.get(pm.response.json(), `image`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isAlternateMobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isAlternateMobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isPrimaryMobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isPrimaryMobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `isPrimaryMobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isPrimaryMobileNumber`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `location` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location`)){\n                if(pm.expect(ld.get(pm.response.json(), `location`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n                if(pm.expect(ld.get(pm.response.json(), `name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `firstName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n                if(pm.expect(ld.get(pm.response.json(), `firstName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `lastName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n                if(pm.expect(ld.get(pm.response.json(), `lastName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.name`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.email`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.mobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.mobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.mobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.mobileNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(pm.response.json(), `phone`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `phone`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `securityQuestions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`securityQuestions`)){\n                if(pm.expect(ld.get(pm.response.json(), `securityQuestions`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `securityQuestions`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `segmentId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`segmentId`)){\n                if(pm.expect(ld.get(pm.response.json(), `segmentId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `segmentId`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "444907bc-0604-4120-a8e4-781e261d13ec",
      "name": "UpdateCustomerInfo",
      "request": {
        "name": "UpdateCustomerInfo",
        "description": {
          "content": "Update customer information",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "UpdateCustomerInfo"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "5959a5c2-b6a7-4179-92d7-2d208349a8d2",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "e73920da-105a-4b30-a9ab-7ab8dee0849c",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "d6c94b29-2aa5-4582-b2eb-39fc116ffaaa",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateCustomerInfo"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"alternatePhoneNumber\": \"{{alternatePhoneNumber}}\",\n    \"isAlternateMobileNumber\": \"{{isAlternateMobileNumber}}\",\n    \"phone\": \"{{phone}}\",\n    \"isPrimaryMobileNumber\": \"{{isPrimaryMobileNumber}}\",\n    \"location\": \"{{location}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /UpdateCustomerInfo for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "03da00b9-31dd-4e58-979d-93f874ae6e00",
      "name": "GetTransactions",
      "request": {
        "name": "GetTransactions",
        "description": {
          "content": "Fetch transactions information",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetTransactions"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "disabled": false,
            "key": "X_Auth_token",
            "value": "{{X_Auth_token}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "X_CORRELATION_ID",
            "value": "{{X_CORRELATION_ID}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountNumber\": [\n        \"{{accountNumber}}\"\n    ],\n    \"customerId\": \"{{customerId}}\",\n    \"numOfTransactions\": \"{{numOfTransactions}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"sort\": {\n        \"type\": \"{{type}}\",\n        \"value\": \"{{value}}\"\n    },\n    \"transactionAmount\": {\n        \"amount1\": \"{{amount1}}\",\n        \"amount\": {},\n        \"currency\": \"{{currency}}\"\n    },\n    \"category\": [\n        \"{{category}}\"\n    ],\n    \"debitOrCredit\": \"{{debitOrCredit}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "5cda98e2-8971-47ee-b63f-8c8a447e05ea",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "GetTransactions"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "X_Auth_token",
                "value": "{{X_Auth_token}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "X_CORRELATION_ID",
                "value": "{{X_CORRELATION_ID}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": [\n        \"{{accountNumber}}\"\n    ],\n    \"customerId\": \"{{customerId}}\",\n    \"numOfTransactions\": \"{{numOfTransactions}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"sort\": {\n        \"type\": \"{{type}}\",\n        \"value\": \"{{value}}\"\n    },\n    \"transactionAmount\": {\n        \"amount1\": \"{{amount1}}\",\n        \"amount\": {},\n        \"currency\": \"{{currency}}\"\n    },\n    \"category\": [\n        \"{{category}}\"\n    ],\n    \"debitOrCredit\": \"{{debitOrCredit}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"customerId\": 73642149.91528252,\n    \"transactionId\": -53265766.29918751,\n    \"accountNumber\": \"commodo laboris\",\n    \"timestamp\": 64572023.292267084,\n    \"amount\": 65366174.72251788,\n    \"currency\": \"Lorem ea ex\",\n    \"debitOrCredit\": \"ex sit in incididunt\",\n    \"description\": \"Ut irure mollit aliquip\",\n    \"paymentMode\": \"aliqua irure exercitation ad ipsum\",\n    \"DBANames\": \"cu\",\n    \"status\": \"irure ullamco\",\n    \"closingBalance\": -78755963.1504929,\n    \"transacitonType\": \"pariatur irure nisi\",\n    \"ACHCode\": \"sunt ea ali\",\n    \"MCCCode\": \"amet cupidatat\",\n    \"SICCode\": \"Excepteur ad\",\n    \"name\": \"in irure eu\",\n    \"address\": \"aliqua commodo dolore\",\n    \"street\": \"amet dolore quis\",\n    \"city\": \"non esse magna quis cillum\",\n    \"state\": \"eu proident laborum\",\n    \"zip\": \"in ad dolore amet\",\n    \"country\": \"eu in\",\n    \"phoneNumber\": -70645565.72243616,\n    \"metaInfo\": [\n      {\n        \"name\": \"string\",\n        \"value\": \"string\"\n      },\n      {\n        \"name\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  },\n  {\n    \"customerId\": -22157466.82737057,\n    \"transactionId\": -82001687.9158862,\n    \"accountNumber\": \"dolore velit Duis in\",\n    \"timestamp\": -36255142.38808738,\n    \"amount\": 6978787.138305664,\n    \"currency\": \"culpa dolore cillum pariatur\",\n    \"debitOrCredit\": \"cillum pariatur esse sit proident\",\n    \"description\": \"enim reprehenderit pariatur exercitation\",\n    \"paymentMode\": \"velit est\",\n    \"DBANames\": \"laborum anim sunt voluptate\",\n    \"status\": \"qu\",\n    \"closingBalance\": -50577140.42257713,\n    \"transacitonType\": \"exerci\",\n    \"ACHCode\": \"qui\",\n    \"MCCCode\": \"ad dolore quis in dolor\",\n    \"SICCode\": \"deserunt enim eu sed\",\n    \"name\": \"anim\",\n    \"address\": \"eu occaecat Duis mollit sint\",\n    \"street\": \"ipsum aute nostrud elit\",\n    \"city\": \"Duis tempor dolor\",\n    \"state\": \"aliqua Excepteur esse in Lorem\",\n    \"zip\": \"in Lorem laboris\",\n    \"country\": \"laboris magna exercitation officia sint\",\n    \"phoneNumber\": 94287122.45694211,\n    \"metaInfo\": [\n      {\n        \"name\": \"string\",\n        \"value\": \"string\"\n      },\n      {\n        \"name\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetTransactions for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "8e6536d4-0146-4ba2-94cb-fcec8b645535",
      "name": "TransferFunds",
      "request": {
        "name": "TransferFunds",
        "description": {
          "content": "Transfers funds between accounts",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "TransferFunds"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"date\": \"{{date}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"description\": \"{{description}}\",\n    \"TransactionType\": \"{{TransactionType}}\",\n    \"PaymentType\": \"{{PaymentType}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "34ee36c7-eb17-4720-aa3e-89b21116fd34",
          "name": "Transaction success",
          "originalRequest": {
            "url": {
              "path": [
                "TransferFunds"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"date\": \"{{date}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"description\": \"{{description}}\",\n    \"TransactionType\": \"{{TransactionType}}\",\n    \"PaymentType\": \"{{PaymentType}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "b5c06df3-5e5c-4b29-b5e5-e96fc9694d63",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "TransferFunds"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"date\": \"{{date}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"description\": \"{{description}}\",\n    \"TransactionType\": \"{{TransactionType}}\",\n    \"PaymentType\": \"{{PaymentType}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "8b069410-5862-4e73-8947-fcdfea7a3f83",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "TransferFunds"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"date\": \"{{date}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"description\": \"{{description}}\",\n    \"TransactionType\": \"{{TransactionType}}\",\n    \"PaymentType\": \"{{PaymentType}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /TransferFunds for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Transaction success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "e9f8902b-7a88-4c1f-b8a2-54603c74bffb",
      "name": "GetScheduleTransfers",
      "request": {
        "name": "GetScheduleTransfers",
        "description": {
          "content": "Fetches the scheduled transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetScheduleTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "0934c958-2bf8-4b24-ac58-b3e649bd425d",
          "name": "schedule transfer list response",
          "originalRequest": {
            "url": {
              "path": [
                "GetScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"Type\": \"aute sint occaecat\",\n    \"CustomerId\": 31659117.09982492,\n    \"Amount\": -92789102.77296175,\n    \"SourceAccountNumber\": \"adipisicing\",\n    \"TargetAccountNumber\": \"ut nostrud esse aute\",\n    \"DueDate\": \"culpa ea veniam\",\n    \"InvoiceNumber\": 24142196.677673817,\n    \"Currency\": \"sunt in voluptate consequat aliquip\",\n    \"Status\": \"exercitation nostrud\",\n    \"ScheduledDate\": 87431956.62055519,\n    \"NextScheduleDate\": -2132707.2950370014,\n    \"id\": \"est Lorem et fugiat magna\"\n  },\n  {\n    \"Type\": \"in laboris\",\n    \"CustomerId\": 38139470.86014572,\n    \"Amount\": 24887097.225998327,\n    \"SourceAccountNumber\": \"nostrud cillum Excepteur\",\n    \"TargetAccountNumber\": \"fugiat\",\n    \"DueDate\": \"voluptate dolor anim pariatur\",\n    \"InvoiceNumber\": 34015261.1456289,\n    \"Currency\": \"exercitation est in commodo sit\",\n    \"Status\": \"eiusmod \",\n    \"ScheduledDate\": -23915335.333120286,\n    \"NextScheduleDate\": 50823292.453335226,\n    \"id\": \"consectetur mollit Lorem occaecat\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ac12c0e7-9df4-4096-801d-1dfdf43354ce",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "2bbaa144-6108-4faa-9335-5a1090f9d52b",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetScheduleTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"schedule transfer list response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "20717c4b-a725-49c7-bd36-2d997fe7021d",
      "name": "UpdateScheduleTransfers",
      "request": {
        "name": "UpdateScheduleTransfers",
        "description": {
          "content": "Update the scheduled transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "UpdateScheduleTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"amount\": \"{{amount}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "8bed4212-0b93-4ad9-be34-7a1d4138c4a2",
          "name": "Scheduled transfer updated successfully",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"paymentId\": \"{{paymentId}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"amount\": \"{{amount}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "3f926df4-d184-4371-a2f6-c8510c7ac31c",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"paymentId\": \"{{paymentId}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"amount\": \"{{amount}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "7a5cf7fe-fa96-4e67-8b40-83fd6df96eec",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"paymentId\": \"{{paymentId}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"amount\": \"{{amount}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /UpdateScheduleTransfers for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Scheduled transfer updated successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "2bd3db2c-8676-49e3-aabb-4e75fa11433b",
      "name": "DeleteScheduleTransfers",
      "request": {
        "name": "DeleteScheduleTransfers",
        "description": {
          "content": "Delete the scheduled transfer",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "DeleteScheduleTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "8bdf6f55-f675-408b-9a1b-029cb5fccd9e",
          "name": "Scheduled transfer deleted successfully",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "5818ff8f-1571-4f7f-9bd3-e72566592c72",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "b1404f32-b861-47cd-8a3f-45e6054c3a2f",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteScheduleTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /DeleteScheduleTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Scheduled transfer deleted successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "75b6dcd6-f953-46c3-9ef4-55b2822ec743",
      "name": "AddRecurringTransfers",
      "request": {
        "name": "AddRecurringTransfers",
        "description": {
          "content": "Adds the recurring transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "AddRecurringTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"status\": \"{{status}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"untilStop\": \"{{untilStop}}\",\n                \"untilDate\": \"{{untilDate}}\",\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        }\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "de7a4c0b-fcc4-4d5d-b95e-116413d81bc4",
          "name": "schedule transfer added successfully",
          "originalRequest": {
            "url": {
              "path": [
                "AddRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"amount\": \"{{amount}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"currency\": \"{{currency}}\",\n    \"status\": \"{{status}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "a6da79c9-8c27-4c95-b6dc-40cf51a6802e",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "AddRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"amount\": \"{{amount}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"currency\": \"{{currency}}\",\n    \"status\": \"{{status}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "1c8ffb4d-06ba-417c-8eee-761626891d12",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "AddRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"amount\": \"{{amount}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"currency\": \"{{currency}}\",\n    \"status\": \"{{status}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /AddRecurringTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"schedule transfer added successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "0797cb29-b28e-4194-9283-05e02f95aabb",
      "name": "GetRecurringTransfers",
      "request": {
        "name": "GetRecurringTransfers",
        "description": {
          "content": "Fetches all the recurring transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetRecurringTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "7696cdff-2f3a-43f4-b560-6532dbe53340",
          "name": "schedule transfer list response",
          "originalRequest": {
            "url": {
              "path": [
                "GetRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"Type\": \"Lorem cupidatat\",\n    \"CustomerId\": 71980428.06870326,\n    \"Amount\": 79418860.30594718,\n    \"SourceAccountNumber\": \"amet\",\n    \"TargetAccountNumber\": \"pariatur cupidatat nisi\",\n    \"DueDate\": \"irure commodo ad\",\n    \"Currency\": \"cillum incididunt minim\",\n    \"Status\": \"ad aliquip ut\",\n    \"ScheduledDate\": 3806390.877232954,\n    \"recurringOptions\": {\n      \"amountType\": \"aliqua proident voluptate eiusmod\",\n      \"frequency\": {\n        \"duration\": {\n          \"untilStop\": \"aute Ut dolore sint\",\n          \"untilDate\": \"labore\",\n          \"numberOfPayments\": \"ut\"\n        },\n        \"iterate\": \"fugiat ve\"\n      }\n    },\n    \"id\": \"dolore in do\"\n  },\n  {\n    \"Type\": \"proident do\",\n    \"CustomerId\": 43582675.54633811,\n    \"Amount\": 57689670.75560805,\n    \"SourceAccountNumber\": \"ea dolore do qui\",\n    \"TargetAccountNumber\": \"occaecat id\",\n    \"DueDate\": \"eiusmod occaecat\",\n    \"Currency\": \"mollit do sunt\",\n    \"Status\": \"dolore ut\",\n    \"ScheduledDate\": -23401398.880245104,\n    \"recurringOptions\": {\n      \"amountType\": \"quis et adipisicing in\",\n      \"frequency\": {\n        \"duration\": {\n          \"untilStop\": \"esse ullamco ut\",\n          \"untilDate\": \"dolor ad ex\",\n          \"numberOfPayments\": \"ex ullamco nostrud\"\n        },\n        \"iterate\": \"dolore est in adipisicin\"\n      }\n    },\n    \"id\": \"Ut ut ullamco\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "9ee5fbd9-a403-45aa-b7ad-6511219ba2ad",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "6a9ff904-f3bd-411b-926f-8a96f0ec2d5b",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetRecurringTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"schedule transfer list response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "dc03d236-0d2b-44e7-bf84-86d4c1399ff4",
      "name": "UpdateRecurringTransfers",
      "request": {
        "name": "UpdateRecurringTransfers",
        "description": {
          "content": "Update the recurring transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "UpdateRecurringTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"amount\": \"{{amount}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"duration\": {\n                \"untilStop\": \"{{untilStop}}\",\n                \"untilDate\": \"{{untilDate}}\",\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            },\n            \"iterate\": \"{{iterate}}\"\n        },\n        \"updateTransferType\": \"{{updateTransferType}}\"\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "e873d04d-b231-4834-a99b-766a1f8b67ca",
          "name": "Recurring transfer updated successfully",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        },\n        \"updateTransferType\": \"{{updateTransferType}}\"\n    },\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "913ec9c8-b538-461a-bcad-3c36895d0aa6",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        },\n        \"updateTransferType\": \"{{updateTransferType}}\"\n    },\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "bbe66de9-fb26-4c26-b3d9-200c465cb175",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "UpdateRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"recurringOptions\": {\n        \"amountType\": \"{{amountType}}\",\n        \"frequency\": {\n            \"iterate\": \"{{iterate}}\",\n            \"duration\": {\n                \"numberOfTransfers\": \"{{numberOfTransfers}}\"\n            }\n        },\n        \"updateTransferType\": \"{{updateTransferType}}\"\n    },\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"scheduledDate\": \"{{scheduledDate}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /UpdateRecurringTransfers for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Recurring transfer updated successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "58c5c7e1-a695-44f5-aeaa-66e4533fb680",
      "name": "DeleteRecurringTransfers",
      "request": {
        "name": "DeleteRecurringTransfers",
        "description": {
          "content": "Delete the recurring transfers",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "DeleteRecurringTransfers"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "key": "userCode",
            "value": "{{userCode}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "2f73046a-8f76-45d2-b578-a0f245f67de4",
          "name": "Recurring transfer deleted successfully",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "3e70fbcf-1235-4465-bb66-8d08c9d55f97",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "fed28e15-5fb7-4373-ae00-f43f22ecc296",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "DeleteRecurringTransfers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "key": "userCode",
                "value": "{{userCode}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"paymentId\": \"{{paymentId}}\",\n    \"updateTransferType\": \"{{updateTransferType}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /DeleteRecurringTransfers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Recurring transfer deleted successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "a4fbd98d-a083-4c60-8b64-ccb94702480a",
      "name": "resetPassword",
      "request": {
        "name": "resetPassword",
        "description": {
          "content": "It allows to reset the password",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "resetPassword"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{username}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "d84758fa-a5a6-4512-89de-e3175d492aae",
          "name": "password has been updated successfully.",
          "originalRequest": {
            "url": {
              "path": [
                "resetPassword"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{username}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "416f687a-ee6b-4090-bb7c-1336459c26a5",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "resetPassword"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{username}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "fb49c660-2d9c-4916-a9ad-7e633bfebee5",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "resetPassword"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"{{password}}\",\n    \"username\": \"{{username}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /resetPassword for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"password has been updated successfully.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "fdd7948b-874f-42e4-bc6a-ecfb2fa61f0b",
      "name": "debitcardInfoValidation",
      "request": {
        "name": "debitcardInfoValidation",
        "description": {
          "content": "for validating card info",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "debitcardInfoValidation"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"cvv\": \"{{cvv}}\",\n    \"debitCardNumber\": \"{{debitCardNumber}}\",\n    \"expiryDate\": \"{{expiryDate}}\",\n    \"pin\": \"{{pin}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "ef6e43cb-6c46-4deb-b903-9769bb3fe9e5",
          "name": "Validated Successfully",
          "originalRequest": {
            "url": {
              "path": [
                "debitcardInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"cvv\": \"{{cvv}}\",\n    \"debitCardNumber\": \"{{debitCardNumber}}\",\n    \"expiryDate\": \"{{expiryDate}}\",\n    \"pin\": \"{{pin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "2d659115-f3fa-4288-882c-dde9ae8d7435",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "debitcardInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"cvv\": \"{{cvv}}\",\n    \"debitCardNumber\": \"{{debitCardNumber}}\",\n    \"expiryDate\": \"{{expiryDate}}\",\n    \"pin\": \"{{pin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "15e0cc59-c6e1-4b11-a7f5-4f9bdbb138a4",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "debitcardInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"cvv\": \"{{cvv}}\",\n    \"debitCardNumber\": \"{{debitCardNumber}}\",\n    \"expiryDate\": \"{{expiryDate}}\",\n    \"pin\": \"{{pin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /debitcardInfoValidation for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Validated Successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "549c3387-b003-4b9e-82e8-24a4a6d18619",
      "name": "personalInfoValidation",
      "request": {
        "name": "personalInfoValidation",
        "description": {
          "content": "for validating personal info",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "personalInfoValidation"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"dob\": \"{{dob}}\",\n    \"ssn\": \"{{ssn}}\",\n    \"secrectPassword\": \"{{secrectPassword}}\",\n    \"AccNumber\": \"{{AccNumber}}\",\n    \"lastDepositAmt\": \"{{lastDepositAmt}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "669d691a-73e8-4c46-8f30-2a8af7c16435",
          "name": "Validated Successfully",
          "originalRequest": {
            "url": {
              "path": [
                "personalInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"dob\": \"{{dob}}\",\n    \"ssn\": \"{{ssn}}\",\n    \"secrectPassword\": \"{{secrectPassword}}\",\n    \"AccNumber\": \"{{AccNumber}}\",\n    \"lastDepositAmt\": \"{{lastDepositAmt}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "970d7bf3-86b8-418c-b6f7-f8a637ba8dc5",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "personalInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"dob\": \"{{dob}}\",\n    \"ssn\": \"{{ssn}}\",\n    \"secrectPassword\": \"{{secrectPassword}}\",\n    \"AccNumber\": \"{{AccNumber}}\",\n    \"lastDepositAmt\": \"{{lastDepositAmt}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "8183bbeb-f62a-4912-ac5b-2bea32d51e5a",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "personalInfoValidation"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"dob\": \"{{dob}}\",\n    \"ssn\": \"{{ssn}}\",\n    \"secrectPassword\": \"{{secrectPassword}}\",\n    \"AccNumber\": \"{{AccNumber}}\",\n    \"lastDepositAmt\": \"{{lastDepositAmt}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /personalInfoValidation for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Validated Successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "963cabaf-fef9-4922-846d-b005f127cb43",
      "name": "disputeTransaction",
      "request": {
        "name": "disputeTransaction",
        "description": {
          "content": "dispute a transaction",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "disputeTransaction"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"transactionsData\": [\n        \"{{transactionsData}}\"\n    ],\n    \"emailId\": \"{{emailId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "e10a79aa-5426-410d-8f02-49392c1f331a",
          "name": "Dispute Transactions reported successfully",
          "originalRequest": {
            "url": {
              "path": [
                "disputeTransaction"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"transactionsData\": [\n        \"{{transactionsData}}\"\n    ],\n    \"emailId\": \"{{emailId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "3773fe51-6fdf-475f-9301-7b07fe9e948c",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "disputeTransaction"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"transactionsData\": [\n        \"{{transactionsData}}\"\n    ],\n    \"emailId\": \"{{emailId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "ef72c3b7-dd8a-4d5c-bed8-c61e01d02626",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "disputeTransaction"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"transactionsData\": [\n        \"{{transactionsData}}\"\n    ],\n    \"emailId\": \"{{emailId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /disputeTransaction for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Dispute Transactions reported successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "49b33cb7-327d-46eb-bf1a-bbdf1e08191f",
      "name": "ccPay",
      "request": {
        "name": "ccPay",
        "description": {
          "content": "to pay cc bill",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "ccPay"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"dueDate\": \"{{dueDate}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"transactionType\": \"{{transactionType}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "461bff76-8dbc-43fe-81d8-5c8ae10b7d9d",
          "name": "Credit Card payment scheduled successfully",
          "originalRequest": {
            "url": {
              "path": [
                "ccPay"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"dueDate\": \"{{dueDate}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"transactionType\": \"{{transactionType}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "34f0ec38-a28f-4673-8049-e706112e6543",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "ccPay"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"dueDate\": \"{{dueDate}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"transactionType\": \"{{transactionType}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "694cfa2e-23cf-42ee-8979-304060eb6568",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "ccPay"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": \"{{amount}}\",\n    \"currency\": \"{{currency}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"dueDate\": \"{{dueDate}}\",\n    \"sourceAccountId\": \"{{sourceAccountId}}\",\n    \"targetAccountId\": \"{{targetAccountId}}\",\n    \"transactionType\": \"{{transactionType}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /ccPay for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Credit Card payment scheduled successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "2bf68432-aa5c-4b99-88c2-07e958816476",
      "name": "GetCCSchedule",
      "request": {
        "name": "GetCCSchedule",
        "description": {
          "content": "Fetch cc payment list",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "GetCCSchedule"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "708a8283-2076-44c8-a4f1-0a48e26c4891",
          "name": "schedule transfer list response",
          "originalRequest": {
            "url": {
              "path": [
                "GetCCSchedule"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"Type\": \"Lorem mollit veniam\",\n    \"CustomerId\": 29027253.741142586,\n    \"Amount\": -94611604.34905027,\n    \"SourceAccountNumber\": \"et Lorem\",\n    \"TargetAccountNumber\": \"officia sint sit ex\",\n    \"DueDate\": \"officia ut\",\n    \"Currency\": \"ex anim\",\n    \"Status\": \"non dolor laborum esse\",\n    \"id\": \"Lorem dolore\"\n  },\n  {\n    \"Type\": \"cupidatat amet aliqua dolore\",\n    \"CustomerId\": -94836593.43341318,\n    \"Amount\": 89088376.76639715,\n    \"SourceAccountNumber\": \"nulla dolor \",\n    \"TargetAccountNumber\": \"mollit\",\n    \"DueDate\": \"amet irure nisi minim\",\n    \"Currency\": \"irure\",\n    \"Status\": \"ea enim consequat\",\n    \"id\": \"adipisicing\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "904bb3cc-a604-4db3-9bbb-2f9f22cf434a",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "GetCCSchedule"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "79058c5d-af1f-40cd-aa84-0045bb080e31",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "GetCCSchedule"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"status\": \"{{status}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /GetCCSchedule for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"schedule transfer list response\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "8df0e303-3952-4db8-a7e8-13399d312af8",
      "name": "sendsecuremessage",
      "request": {
        "name": "sendsecuremessage",
        "description": {
          "content": "send secure message",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "sendsecuremessage"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"authType\": \"{{authType}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"phoneNumber\": \"{{phoneNumber}}\",\n    \"topic\": \"{{topic}}\",\n    \"message\": \"{{message}}\",\n    \"availableTime\": \"{{availableTime}}\",\n    \"chatHistory\": \"{{chatHistory}}\",\n    \"cif\": \"{{cif}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "99b34b58-8375-45a6-9fa0-a7f76e7573fd",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "sendsecuremessage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"authType\": \"{{authType}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"phoneNumber\": \"{{phoneNumber}}\",\n    \"topic\": \"{{topic}}\",\n    \"message\": \"{{message}}\",\n    \"availableTime\": \"{{availableTime}}\",\n    \"chatHistory\": \"{{chatHistory}}\",\n    \"cif\": \"{{cif}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "4fc36a40-64b7-4a04-b953-1f285d157957",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "sendsecuremessage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"authType\": \"{{authType}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"phoneNumber\": \"{{phoneNumber}}\",\n    \"topic\": \"{{topic}}\",\n    \"message\": \"{{message}}\",\n    \"availableTime\": \"{{availableTime}}\",\n    \"chatHistory\": \"{{chatHistory}}\",\n    \"cif\": \"{{cif}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "78943691-85cc-4345-81c6-2e3617ec3361",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "sendsecuremessage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"authType\": \"{{authType}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"phoneNumber\": \"{{phoneNumber}}\",\n    \"topic\": \"{{topic}}\",\n    \"message\": \"{{message}}\",\n    \"availableTime\": \"{{availableTime}}\",\n    \"chatHistory\": \"{{chatHistory}}\",\n    \"cif\": \"{{cif}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /sendsecuremessage for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "bdf67acc-c219-4ed4-84c4-48861deff0f9",
      "name": "locateProfile",
      "request": {
        "name": "locateProfile",
        "description": {
          "content": "get profile details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "locateProfile"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"ssNumber\": \"{{ssNumber}}\",\n    \"ssnShort\": \"{{ssnShort}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "9d387939-8b58-4d4b-ae89-fe6809d7a99c",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "locateProfile"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"ssNumber\": \"{{ssNumber}}\",\n    \"ssnShort\": \"{{ssnShort}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"accountNumber\": \"adipisicing eu consequat mollit\",\n  \"cardDetails\": {\n    \"cardNumber\": \"deserunt eiusmod\",\n    \"expiryDate\": \"eu ullamco\",\n    \"cvv\": \"do sunt dolore aliqua proident\",\n    \"pin\": \"est sint\"\n  },\n  \"personalQuestions\": {\n    \"DOB\": \"minim sed officia\",\n    \"SSN\": 3972350.299579695,\n    \"SecretPassword\": \"in occae\",\n    \"LDAmount\": -48008402.302312,\n    \"AccNumber\": \"Excepteur commodo ut dolore\"\n  },\n  \"ssNumber\": 87321741.97975507,\n  \"ssnShort\": -19682478.646379575,\n  \"alternatePhoneNumber\": -76063874.7647881,\n  \"customerId\": \"dolore\",\n  \"email\": \"fugiat ipsum nisi in\",\n  \"identificationNumber\": \"ut Lorem do amet\",\n  \"identificationType\": \"dolore qui reprehenderit\",\n  \"image\": \"cillum tempor labore\",\n  \"isAlternateMobileNumber\": true,\n  \"isPrimaryMobileNumber\": false,\n  \"location\": \"sit nostrud id\",\n  \"name\": \"elit aute eu in dolor\",\n  \"personalBanker\": {\n    \"name\": \"dolore cillum minim\",\n    \"email\": \"incididunt ullamco consequat\",\n    \"mobileNumber\": \"pariatur veniam do ad\"\n  },\n  \"phone\": -15260789.821489558,\n  \"securityQuestions\": [\n    \"nisi dolore\",\n    \"consequat id laboris\"\n  ],\n  \"segmentId\": 19855456.900112018,\n  \"multiAccounts\": [\n    {\n      \"accountNumber\": \"sunt\",\n      \"cardDetails\": {\n        \"cardNumber\": \"in aliqua anim ut Dui\",\n        \"expiryDate\": \"nulla velit aliqua ad culpa\",\n        \"cvv\": \"amet\",\n        \"pin\": \"dolore\"\n      },\n      \"personalQuestions\": {\n        \"DOB\": \"sed eu nostrud tempor dolore\",\n        \"SSN\": -27332440.87987879,\n        \"SecretPassword\": \"est et ut Duis\",\n        \"LDAmount\": 63441142.07804376,\n        \"AccNumber\": \"velit quis anim est\"\n      },\n      \"ssNumber\": 91687739.76162335,\n      \"ssnShort\": -63043317.065113015,\n      \"alternatePhoneNumber\": 58260136.365464866,\n      \"customerId\": \"id anim reprehenderit\",\n      \"email\": \"labore\",\n      \"identificationNumber\": \"Ut\",\n      \"identificationType\": \"nisi\",\n      \"location\": \"consequat ullamco\",\n      \"name\": \"culpa cillum qui\",\n      \"phone\": -14938625.593257666\n    },\n    {\n      \"accountNumber\": \"id labo\",\n      \"cardDetails\": {\n        \"cardNumber\": \"occaecat adipisicing irure ullamco\",\n        \"expiryDate\": \"labore nulla pariatur\",\n        \"cvv\": \"in aliqua est Lorem\",\n        \"pin\": \"labore id velit\"\n      },\n      \"personalQuestions\": {\n        \"DOB\": \"aliquip in sint in\",\n        \"SSN\": -64850312.36596881,\n        \"SecretPassword\": \"anim officia nisi \",\n        \"LDAmount\": -69420081.51740544,\n        \"AccNumber\": \"et aute\"\n      },\n      \"ssNumber\": 61220575.13173914,\n      \"ssnShort\": 58919379.45707771,\n      \"alternatePhoneNumber\": 31445114.6747794,\n      \"customerId\": \"dolore deserunt\",\n      \"email\": \"voluptate nulla commodo ex aliquip\",\n      \"identificationNumber\": \"deserunt non dolor\",\n      \"identificationType\": \"amet adipisicing ea\",\n      \"location\": \"eiusmod\",\n      \"name\": \"Excepteur pariatur tempor sint\",\n      \"phone\": -80549524.97179006\n    }\n  ],\n  \"warningCodes\": [\n    {\n      \"code\": -7719019.744479954,\n      \"level\": \"dolor Ut ip\",\n      \"description\": \"nostrud anim consequat minim\"\n    },\n    {\n      \"code\": -65630433.91121943,\n      \"level\": \"enim minim proident dolore velit\",\n      \"description\": \"elit Ut\"\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "a9081bdf-1014-4672-9050-8eae35d89356",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "locateProfile"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"ssNumber\": \"{{ssNumber}}\",\n    \"ssnShort\": \"{{ssnShort}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "b74ab7de-2fd6-4774-a9eb-c3365c67e4b1",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "locateProfile"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"ssNumber\": \"{{ssNumber}}\",\n    \"ssnShort\": \"{{ssnShort}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /locateProfile for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `accountNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`accountNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `accountNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `accountNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails.cardNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails.cardNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails.cardNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails.cardNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails.expiryDate` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails.expiryDate`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails.expiryDate`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails.expiryDate`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails.cvv` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails.cvv`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails.cvv`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails.cvv`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cardDetails.pin` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cardDetails.pin`)){\n                if(pm.expect(ld.get(pm.response.json(), `cardDetails.pin`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cardDetails.pin`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.DOB` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions.DOB`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions.DOB`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions.DOB`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.SSN` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions.SSN`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions.SSN`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions.SSN`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.SecretPassword` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions.SecretPassword`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions.SecretPassword`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions.SecretPassword`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.LDAmount` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions.LDAmount`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions.LDAmount`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions.LDAmount`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalQuestions.AccNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalQuestions.AccNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalQuestions.AccNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalQuestions.AccNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `ssNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`ssNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `ssNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `ssNumber`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `ssnShort` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`ssnShort`)){\n                if(pm.expect(ld.get(pm.response.json(), `ssnShort`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `ssnShort`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `alternatePhoneNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`alternatePhoneNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `alternatePhoneNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `alternatePhoneNumber`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `customerId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`customerId`)){\n                if(pm.expect(ld.get(pm.response.json(), `customerId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `customerId`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n                if(pm.expect(ld.get(pm.response.json(), `email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `identificationNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`identificationNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `identificationNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `identificationNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `identificationType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`identificationType`)){\n                if(pm.expect(ld.get(pm.response.json(), `identificationType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `identificationType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `image` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n                if(pm.expect(ld.get(pm.response.json(), `image`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isAlternateMobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isAlternateMobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isAlternateMobileNumber`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `isPrimaryMobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`isPrimaryMobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `isPrimaryMobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `isPrimaryMobileNumber`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `location` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`location`)){\n                if(pm.expect(ld.get(pm.response.json(), `location`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `location`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n                if(pm.expect(ld.get(pm.response.json(), `name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.name`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.email` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.email`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.email`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.email`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `personalBanker.mobileNumber` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`personalBanker.mobileNumber`)){\n                if(pm.expect(ld.get(pm.response.json(), `personalBanker.mobileNumber`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `personalBanker.mobileNumber`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `phone` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n                if(pm.expect(ld.get(pm.response.json(), `phone`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `phone`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `securityQuestions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`securityQuestions`)){\n                if(pm.expect(ld.get(pm.response.json(), `securityQuestions`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `securityQuestions`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `segmentId` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`segmentId`)){\n                if(pm.expect(ld.get(pm.response.json(), `segmentId`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `segmentId`, null)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `multiAccounts` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`multiAccounts`)){\n                if(pm.expect(ld.get(pm.response.json(), `multiAccounts`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `multiAccounts`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the multiAccounts field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`multiAccounts`);\n            let multiAccountsArray = ld.get(pm.response.json(), `multiAccounts`, \"\");\n            for (let multiAccounts_it = 0; multiAccounts_it < multiAccountsArray.length; multiAccounts_it++) {\n                let iterator = multiAccounts_it;\n                \t\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].accountNumber' has 'accountNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].accountNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].accountNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails' has 'cardDetails' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails.cardNumber' has 'cardNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails.cardNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails.cardNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails.expiryDate' has 'expiryDate' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails.expiryDate`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails.expiryDate`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails.cvv' has 'cvv' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails.cvv`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails.cvv`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].cardDetails.pin' has 'pin' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].cardDetails.pin`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].cardDetails.pin`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions' has 'personalQuestions' as 'object'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions`, null)).to.equal(\"object\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions.DOB' has 'DOB' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions.DOB`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions.DOB`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions.SSN' has 'SSN' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions.SSN`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions.SSN`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions.SecretPassword' has 'SecretPassword' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions.SecretPassword`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions.SecretPassword`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions.LDAmount' has 'LDAmount' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions.LDAmount`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions.LDAmount`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].personalQuestions.AccNumber' has 'AccNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].personalQuestions.AccNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].personalQuestions.AccNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].ssNumber' has 'ssNumber' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].ssNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].ssNumber`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].ssnShort' has 'ssnShort' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].ssnShort`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].ssnShort`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].alternatePhoneNumber' has 'alternatePhoneNumber' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].alternatePhoneNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].alternatePhoneNumber`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].customerId' has 'customerId' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].customerId`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].customerId`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].email' has 'email' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].email`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].email`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].identificationNumber' has 'identificationNumber' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].identificationNumber`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].identificationNumber`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].identificationType' has 'identificationType' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].identificationType`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].identificationType`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].location' has 'location' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].location`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].location`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].name' has 'name' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].name`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].name`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'multiAccounts[${multiAccounts_it}].phone' has 'phone' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `multiAccounts[${multiAccounts_it}].phone`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`multiAccounts[${multiAccounts_it}].phone`, null)).to.equal(\"number\");\n            }\n        })\n\n\n            }\n\n        })\n\n        pm.test('Response has the `warningCodes` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`warningCodes`)){\n                if(pm.expect(ld.get(pm.response.json(), `warningCodes`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `warningCodes`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n        pm.test(`Each object in the warningCodes field has all the required fields`,function(){\n            pm.expect(pm.response.json()).to.have.nested.property(`warningCodes`);\n            let warningCodesArray = ld.get(pm.response.json(), `warningCodes`, \"\");\n            for (let warningCodes_it = 0; warningCodes_it < warningCodesArray.length; warningCodes_it++) {\n                let iterator = warningCodes_it;\n                \t\n        pm.test(`${iterator} element of array 'warningCodes[${warningCodes_it}].code' has 'code' as 'number'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `warningCodes[${warningCodes_it}].code`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`warningCodes[${warningCodes_it}].code`, null)).to.equal(\"number\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'warningCodes[${warningCodes_it}].level' has 'level' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `warningCodes[${warningCodes_it}].level`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`warningCodes[${warningCodes_it}].level`, null)).to.equal(\"string\");\n            }\n        })\n\n\n        pm.test(`${iterator} element of array 'warningCodes[${warningCodes_it}].description' has 'description' as 'string'`,function(){ \n            if(pm.expect(ld.get(pm.response.json(), `warningCodes[${warningCodes_it}].description`, null)).to.exist){\n              pm.expect(typeof ld.get(pm.response.json(),`warningCodes[${warningCodes_it}].description`, null)).to.equal(\"string\");\n            }\n        })\n\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "fe1e9c14-a1bb-49b6-861e-5e9d7541012a",
      "name": "to validate the exiting user",
      "request": {
        "name": "to validate the exiting user",
        "description": {
          "content": "to validate the in of existing user",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "validateUser"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "2c6d2bb7-2971-4b59-88cf-3c420f75ab85",
          "name": "PINs matched",
          "originalRequest": {
            "url": {
              "path": [
                "validateUser"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "a88e6f08-6f3a-434e-bae8-26fc03a9f889",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "validateUser"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "f681cfc0-395f-4bcc-b91b-46bd4be30f8a",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "validateUser"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /validateUser for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"PINs matched\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "36d3a5ee-8bed-4726-ab7a-ee533ed84fdf",
      "name": "to validate the pins entered by the new user",
      "request": {
        "name": "to validate the pins entered by the new user",
        "description": {
          "content": "to validate the pins entered by the new user",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "validatePIN"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\",\n    \"profileInfo\": {\n        \"customerId\": \"{{customerId}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"ssn\": \"{{ssn}}\"\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "1a4a41eb-730e-428c-a114-f181649cab87",
          "name": "PINs matched",
          "originalRequest": {
            "url": {
              "path": [
                "validatePIN"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\",\n    \"profileInfo\": {\n        \"customerId\": \"{{customerId}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"ssn\": \"{{ssn}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "b3a7be74-4298-4d43-9368-e0536b3e7288",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "validatePIN"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\",\n    \"profileInfo\": {\n        \"customerId\": \"{{customerId}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"ssn\": \"{{ssn}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "63c246f3-6d5f-4b41-a337-759e97fd5bd6",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "validatePIN"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\",\n    \"targetPin\": \"{{targetPin}}\",\n    \"profileInfo\": {\n        \"customerId\": \"{{customerId}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"ssn\": \"{{ssn}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /validatePIN for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"PINs matched\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "d9f0dce5-2df5-4ede-8b2c-8b4c353eebf9",
      "name": "to validate if pin entered by new user follows pin rules",
      "request": {
        "name": "to validate if pin entered by new user follows pin rules",
        "description": {
          "content": "to validate if pin entered by new user follows pin rules",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "validatePINRules"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "47f8cc61-54d4-4aea-9939-bb1ee703f7b7",
          "name": "PIN rules satisfied",
          "originalRequest": {
            "url": {
              "path": [
                "validatePINRules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "629ca437-05fe-4d7a-b982-f3a802b632f8",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "validatePINRules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "0be08b75-1b12-48aa-be00-ffe1aa9eedc1",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "validatePINRules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourcePin\": \"{{sourcePin}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /validatePINRules for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"PIN rules satisfied\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "3da491b3-5e2c-4a85-b2fa-fe278b1debb1",
      "name": "to fetch the account closure status",
      "request": {
        "name": "to fetch the account closure status",
        "description": {
          "content": "to fetch the account closure status",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "getRequestStatus"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "[\n    {\n        \"accountName\": \"{{accountName}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"customerId\": \"{{customerId}}\",\n        \"description\": \"{{description}}\",\n        \"estimation\": \"{{estimation}}\",\n        \"modifyDate\": \"{{modifyDate}}\",\n        \"requestDate\": \"{{requestDate}}\",\n        \"requestId\": \"{{requestId}}\",\n        \"requestSubType\": \"{{requestSubType}}\",\n        \"requestType\": \"{{requestType}}\",\n        \"status\": \"{{status}}\"\n    },\n    {\n        \"accountName\": \"{{1.accountName}}\",\n        \"accountNumber\": \"{{1.accountNumber}}\",\n        \"customerId\": \"{{1.customerId}}\",\n        \"description\": \"{{1.description}}\",\n        \"estimation\": \"{{1.estimation}}\",\n        \"modifyDate\": \"{{1.modifyDate}}\",\n        \"requestDate\": \"{{1.requestDate}}\",\n        \"requestId\": \"{{1.requestId}}\",\n        \"requestSubType\": \"{{1.requestSubType}}\",\n        \"requestType\": \"{{1.requestType}}\",\n        \"status\": \"{{1.status}}\"\n    }\n]",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "e30a02c3-b9ec-40d4-a7ff-16a38c5c2bf4",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "getRequestStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"accountName\": \"{{accountName}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"customerId\": \"{{customerId}}\",\n        \"description\": \"{{description}}\",\n        \"estimation\": \"{{estimation}}\",\n        \"modifyDate\": \"{{modifyDate}}\",\n        \"requestDate\": \"{{requestDate}}\",\n        \"requestId\": \"{{requestId}}\",\n        \"requestSubType\": \"{{requestSubType}}\",\n        \"requestType\": \"{{requestType}}\",\n        \"status\": \"{{status}}\"\n    },\n    {\n        \"accountName\": \"{{1.accountName}}\",\n        \"accountNumber\": \"{{1.accountNumber}}\",\n        \"customerId\": \"{{1.customerId}}\",\n        \"description\": \"{{1.description}}\",\n        \"estimation\": \"{{1.estimation}}\",\n        \"modifyDate\": \"{{1.modifyDate}}\",\n        \"requestDate\": \"{{1.requestDate}}\",\n        \"requestId\": \"{{1.requestId}}\",\n        \"requestSubType\": \"{{1.requestSubType}}\",\n        \"requestType\": \"{{1.requestType}}\",\n        \"status\": \"{{1.status}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "71f6a2d9-ec8b-4440-a712-5564f17f435e",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "getRequestStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"accountName\": \"{{accountName}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"customerId\": \"{{customerId}}\",\n        \"description\": \"{{description}}\",\n        \"estimation\": \"{{estimation}}\",\n        \"modifyDate\": \"{{modifyDate}}\",\n        \"requestDate\": \"{{requestDate}}\",\n        \"requestId\": \"{{requestId}}\",\n        \"requestSubType\": \"{{requestSubType}}\",\n        \"requestType\": \"{{requestType}}\",\n        \"status\": \"{{status}}\"\n    },\n    {\n        \"accountName\": \"{{1.accountName}}\",\n        \"accountNumber\": \"{{1.accountNumber}}\",\n        \"customerId\": \"{{1.customerId}}\",\n        \"description\": \"{{1.description}}\",\n        \"estimation\": \"{{1.estimation}}\",\n        \"modifyDate\": \"{{1.modifyDate}}\",\n        \"requestDate\": \"{{1.requestDate}}\",\n        \"requestId\": \"{{1.requestId}}\",\n        \"requestSubType\": \"{{1.requestSubType}}\",\n        \"requestType\": \"{{1.requestType}}\",\n        \"status\": \"{{1.status}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "2dfafba6-55ee-416b-b7f8-dbab8e958ecc",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "getRequestStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"accountName\": \"{{accountName}}\",\n        \"accountNumber\": \"{{accountNumber}}\",\n        \"customerId\": \"{{customerId}}\",\n        \"description\": \"{{description}}\",\n        \"estimation\": \"{{estimation}}\",\n        \"modifyDate\": \"{{modifyDate}}\",\n        \"requestDate\": \"{{requestDate}}\",\n        \"requestId\": \"{{requestId}}\",\n        \"requestSubType\": \"{{requestSubType}}\",\n        \"requestType\": \"{{requestType}}\",\n        \"status\": \"{{status}}\"\n    },\n    {\n        \"accountName\": \"{{1.accountName}}\",\n        \"accountNumber\": \"{{1.accountNumber}}\",\n        \"customerId\": \"{{1.customerId}}\",\n        \"description\": \"{{1.description}}\",\n        \"estimation\": \"{{1.estimation}}\",\n        \"modifyDate\": \"{{1.modifyDate}}\",\n        \"requestDate\": \"{{1.requestDate}}\",\n        \"requestId\": \"{{1.requestId}}\",\n        \"requestSubType\": \"{{1.requestSubType}}\",\n        \"requestType\": \"{{1.requestType}}\",\n        \"status\": \"{{1.status}}\"\n    }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /getRequestStatus for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "6ef482b5-34ab-4b2e-893c-4e35262d49af",
      "name": "to place the request",
      "request": {
        "name": "to place the request",
        "description": {
          "content": "to place the request",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "request"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountName\": \"{{accountName}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"cardNumber\": \"{{cardNumber}}\",\n    \"description\": \"{{description}}\",\n    \"requestSubType\": \"{{requestSubType}}\",\n    \"requestType\": \"{{requestType}}\",\n    \"serviceType\": \"{{serviceType}}\",\n    \"meta\": {}\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "24a2ad59-79c4-4953-a5a3-8c74105d729a",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "request"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountName\": \"{{accountName}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"cardNumber\": \"{{cardNumber}}\",\n    \"description\": \"{{description}}\",\n    \"requestSubType\": \"{{requestSubType}}\",\n    \"serviceType\": \"{{serviceType}}\",\n    \"requestType\": \"{{requestType}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "ffa616dc-1d92-4e31-a9fc-6f275ae7d3aa",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "request"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountName\": \"{{accountName}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"cardNumber\": \"{{cardNumber}}\",\n    \"description\": \"{{description}}\",\n    \"requestSubType\": \"{{requestSubType}}\",\n    \"serviceType\": \"{{serviceType}}\",\n    \"requestType\": \"{{requestType}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "fa1b6279-3b85-4baf-a4ea-d263d4d0eba7",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "request"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountName\": \"{{accountName}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"cardNumber\": \"{{cardNumber}}\",\n    \"description\": \"{{description}}\",\n    \"requestSubType\": \"{{requestSubType}}\",\n    \"serviceType\": \"{{serviceType}}\",\n    \"requestType\": \"{{requestType}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /request for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "2f2f6753-0ef7-4f5f-a785-b76412f7d48b",
      "name": "to enable or disable e or paper statements at profile level",
      "request": {
        "name": "to enable or disable e or paper statements at profile level",
        "description": {
          "content": "to enable or disable e or paper statements at profile level",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "enableEStatement"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"secondaryEmail\": \"{{secondaryEmail}}\",\n    \"subscribe\": \"{{subscribe}}\",\n    \"meta\": {}\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "98bbf3a7-d726-452f-8e6f-16834ae1eeaa",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "enableEStatement"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"secondaryEmail\": \"{{secondaryEmail}}\",\n    \"subscribe\": \"{{subscribe}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "e2378064-d617-4d75-aa42-7eca3c84377f",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "enableEStatement"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"secondaryEmail\": \"{{secondaryEmail}}\",\n    \"subscribe\": \"{{subscribe}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "4dcdc0b4-0dc7-4777-843e-1f140fb7a2df",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "enableEStatement"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"email\": \"{{email}}\",\n    \"secondaryEmail\": \"{{secondaryEmail}}\",\n    \"subscribe\": \"{{subscribe}}\",\n    \"meta\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /enableEStatement for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "67e73b95-4ccc-499d-b3f8-08cff5a34f0f",
      "name": "to update the cheque book details of customer accounts",
      "request": {
        "name": "to update the cheque book details of customer accounts",
        "description": {
          "content": "Update customer cheque book details",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "RequestChequeBook"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "botId",
            "value": "{{botId}}"
          },
          {
            "disabled": false,
            "description": "(Required) ",
            "key": "accountId",
            "value": "{{accountId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"customerId\": \"{{customerId}}\",\n    \"numberOfChequeBooks\": \"{{numberOfChequeBooks}}\",\n    \"numberOfLeaves\": \"{{numberOfLeaves}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "622efc86-743a-4118-be85-b184086ea231",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "RequestChequeBook"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"numberOfChequeBooks\": \"{{numberOfChequeBooks}}\",\n    \"numberOfLeaves\": \"{{numberOfLeaves}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "7e6c5e78-fa17-4166-90e5-675d32d106a8",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "RequestChequeBook"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"numberOfChequeBooks\": \"{{numberOfChequeBooks}}\",\n    \"numberOfLeaves\": \"{{numberOfLeaves}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "b77b4fce-30e8-4a9d-8e4e-bb30fb9a306e",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "RequestChequeBook"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "botId",
                "value": "{{botId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "accountId",
                "value": "{{accountId}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\",\n    \"accountNumber\": \"{{accountNumber}}\",\n    \"numberOfChequeBooks\": \"{{numberOfChequeBooks}}\",\n    \"numberOfLeaves\": \"{{numberOfLeaves}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /RequestChequeBook for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "846ace8a-dff4-4c9b-aaea-6bfe507e9810",
      "name": "sendOTP",
      "request": {
        "name": "sendOTP",
        "description": {
          "content": "sends OTP for reset password",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "sendOTP"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "05990b0d-40f9-4f55-9ea5-3fb7506b9f03",
          "name": "verification code has been sent to your mobile number",
          "originalRequest": {
            "url": {
              "path": [
                "sendOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "70cb46d6-4e6a-440f-a413-7322171f21a2",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "sendOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "7430354d-288c-4354-827a-82b57e90f9b7",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "sendOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /sendOTP for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"verification code has been sent to your mobile number\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "091c1aae-2c4b-4425-9fb6-7e25a0423135",
      "name": "verifyOTP",
      "request": {
        "name": "verifyOTP",
        "description": {
          "content": " to verify OTP for reset password",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "verifyOTP"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"code\": \"{{code}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "48bb373a-2f6b-4ca4-8b9c-2f5cc0c7f6aa",
          "name": "OTP verifid successfully",
          "originalRequest": {
            "url": {
              "path": [
                "verifyOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"code\": \"{{code}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "2ebb170e-5645-4974-900a-cdf0d1579c3c",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "verifyOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"code\": \"{{code}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "4b5ddc70-28c0-4a86-a506-354eb69c6166",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "verifyOTP"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"code\": \"{{code}}\",\n    \"customerId\": \"{{customerId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /verifyOTP for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OTP verifid successfully\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "9499d20d-a49f-44a2-8f11-895c4d3d4815",
      "name": "to fetch the deeplink",
      "request": {
        "name": "to fetch the deeplink",
        "description": {
          "content": "to fetch the deeplink",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "deeplink"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "disabled": false,
            "key": "koreUserId",
            "value": "{{koreUserId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "botId",
            "value": "{{botId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "accountId",
            "value": "{{accountId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "tenantId",
            "value": "{{tenantId}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "environment",
            "value": "{{environment}}",
            "description": ""
          },
          {
            "disabled": false,
            "key": "channel",
            "value": "{{channel}}",
            "description": ""
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"usecase\": [\n        \"{{usecase}}\"\n    ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "e606e000-1850-481a-b8da-c10c6aecbb74",
          "name": "success",
          "originalRequest": {
            "url": {
              "path": [
                "deeplink"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "tenantId",
                "value": "{{tenantId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "environment",
                "value": "{{environment}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "channel",
                "value": "{{channel}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"usecase\": [\n        \"{{usecase}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"usecase\": \"addbeneficiary\",\n    \"link\": \"www.google.com\",\n    \"linkType\": \"deeplink\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "59b9c53f-4a70-44d8-8d3b-45bedbdc60ad",
          "name": "Error: Authorisation failed.",
          "originalRequest": {
            "url": {
              "path": [
                "deeplink"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "tenantId",
                "value": "{{tenantId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "environment",
                "value": "{{environment}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "channel",
                "value": "{{channel}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"usecase\": [\n        \"{{usecase}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "79becc88-8e7f-409f-9a7b-c535683c237b",
          "name": "Error: Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "deeplink"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "key": "koreUserId",
                "value": "{{koreUserId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "botId",
                "value": "{{botId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "accountId",
                "value": "{{accountId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "tenantId",
                "value": "{{tenantId}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "Authorization",
                "value": "{{Authorization}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "environment",
                "value": "{{environment}}",
                "description": ""
              },
              {
                "disabled": false,
                "key": "channel",
                "value": "{{channel}}",
                "description": ""
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"usecase\": [\n        \"{{usecase}}\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"err\": {\n    \"message\": \"veniam dolore dolor\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test pw-test-1741334352704 using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /deeplink for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"success\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Error: Authorisation failed.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Error: Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `err` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err`)){\n                if(pm.expect(ld.get(pm.response.json(), `err`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `err.message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`err.message`)){\n                if(pm.expect(ld.get(pm.response.json(), `err.message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `err.message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://localhost:8080/smt",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{bearerToken}}"
      }
    ]
  },
  "info": {
    "_postman_id": "80b66e41-812a-420a-a4f3-a5b41c0cab55",
    "name": "BankAssist SMT Core Banking API Specification",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "kore.ai banking bot apis.",
      "type": "text/plain"
    }
  }
}