# ********RoostGPT********

# Test generated by RoostGPT for test pw-test-1740811612971 using AI Type deepseek_ai and AI Model deepseek-reasoner
# 
# ROOST_METHOD_HASH=d4875ba7c9
# ROOST_METHOD_SIG_HASH=deac2363dc
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: Credential Wallet API\r\n' +
#     '  As a user of the Credential Wallet API\r\n' +
#     '  I want to get registration details of people allowed to receive credentials \r\n' +
#     '  So that I can manage my account effectively',
#   background: 'Background:\r\n    Given the base URL is "http://localhost:8080"',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Get Registration Details Of Recipient Person',
#     steps: 'Given id of recipient as 27364922937 in path parameter\r\n' +
#       'And size=13 and offset=42 in request query\r\n' +
#       'When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
#       'When authentication token is sent in request\r\n' +
#       'Then for successful request having status code 200, Verify that headers have api-version, page-size and  page-offset\r\n' +
#       'And response body must have element registrations and total.',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}
  payload:
    path: GetRegistrationDetailsOfRecipientPerson.csv
    fields:
      - id
      - jobTitle
      - name
      - email
    skipHeader: true
    delimiter: "^|^"

scenarios:
  - name: Get employee by valid ID
    flow:
      - get:
          url: "/employees/{{ id }}"
          log: "Get employee with valid UUID - should return 200"
          headers:
            Content-Type: application/json
          expect:
            - statusCode: 200
            - contentType: json
            - hasProperty: "id"
            - hasProperty: "jobTitle"
            - hasProperty: "name"
            - hasHeader: "api-version"
      - think: 1

  - name: Get employee with invalid ID
    flow:
      - get:
          url: "/employees/invalid-id-123"
          log: "Get employee with invalid ID - should return 404"
          headers:
            Content-Type: application/json
          expect:
            - statusCode: 404
      - think: 1

  - name: Create valid employee
    flow:
      - post:
          url: "/employees"
          log: "Create valid employee - should return 201"
          headers:
            Content-Type: application/json
          json:
            id: "{{ id }}"
            jobTitle: "{{ jobTitle }}"
            name: "{{ name }}"
            email: "{{ email }}"
          expect:
            - statusCode: 201
      - think: 1

  - name: Create invalid employee
    flow:
      - post:
          url: "/employees"
          log: "Create employee with missing fields - should return 400"
          headers:
            Content-Type: application/json
          json:
            id: "{{ id }}"
          expect:
            - statusCode: 400
      - think: 1

  - name: Search employees with filter
    flow:
      - get:
          url: "/employees?searchString=John"
          log: "Search employees with valid filter - should return 200 array"
          headers:
            Content-Type: application/json
          expect:
            - statusCode: 200
            - contentType: json
            - hasProperty: "[0].id"
            - hasProperty: "[0].jobTitle"
      - think: 1
