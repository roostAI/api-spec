# ********RoostGPT********

# Test generated by RoostGPT for test Exi-PW-Artillery-ClaudeAi using AI Type Claude AI and AI Model claude-3-7-sonnet-20250219
# 
# Test generated for /employees_post for http method type POST in artillery framework
# RoostTestHash=b517afeac4
# 
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 5
      name: "API Testing Phase"
  payload:
    path: "employees_post_others.csv"
    fields:
      - "id"
      - "jobTitle"
      - "name"
      - "email"
    skipHeader: true
  plugins:
    expect: {}

scenarios:
  - name: "Employee API Test Scenarios"
    flow:
      # Scenario 1: Successfully add a new employee with all required fields
      - log: "Starting test: Add a new employee with all required fields"
      - post:
          url: "/employees"
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          json:
            id: "{{ id }}"
            jobTitle: "{{ jobTitle }}"
            name: "{{ name }}"
            email: "{{ email }}"
          expect:
            - statusCode: 201
            - contentType: "application/json"
            - hasProperty: "id"
      - think: 2

      # Scenario 2: Try to add an employee with missing required fields
      - log: "Starting test: Add an employee with missing required fields"
      - post:
          url: "/employees"
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          json:
            id: "{{ id }}"
            # Missing jobTitle, name, and email
          expect:
            - statusCode: 400
      - think: 2

      # Scenario 3: Try to add an employee with invalid email format
      - log: "Starting test: Add an employee with invalid email format"
      - post:
          url: "/employees"
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          json:
            id: "{{ id }}"
            jobTitle: "{{ jobTitle }}"
            name: "{{ name }}"
            email: "invalid-email-format"
          expect:
            - statusCode: 400
      - think: 2

      # Scenario 4: Try to add an employee with duplicate ID
      - log: "Starting test: Add an employee with duplicate ID"
      - post:
          url: "/employees"
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          json:
            id: "{{ id }}"
            jobTitle: "{{ jobTitle }}"
            name: "{{ name }}"
            email: "{{ email }}"
          expect:
            - statusCode: 201
      - think: 1
      - post:
          url: "/employees"
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          json:
            id: "{{ id }}"  # Using the same ID as previous request
            jobTitle: "Different Job"
            name: "Different Name"
            email: "different.email@example.com"
          expect:
            - statusCode: 409  # Conflict due to duplicate ID
      - think: 2

      # Scenario 5: Try to access with invalid authorization
      - log: "Starting test: Access with invalid authorization"
      - post:
          url: "/employees"
          headers:
            Content-Type: "application/json"
            Authorization: "InvalidToken"
          json:
            id: "{{ id }}"
            jobTitle: "{{ jobTitle }}"
            name: "{{ name }}"
            email: "{{ email }}"
          expect:
            - statusCode: 401
      - think: 2

      # Scenario 6: Try to access an invalid URL
      - log: "Starting test: Access an invalid URL"
      - post:
          url: "/employee"  # Incorrect URL (missing 's')
          headers:
            Content-Type: "application/json"
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          json:
            id: "{{ id }}"
            jobTitle: "{{ jobTitle }}"
            name: "{{ name }}"
            email: "{{ email }}"
          expect:
            - statusCode: 404
      - think: 2
