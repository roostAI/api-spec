# ********RoostGPT********

# Test generated by RoostGPT for test testingGeminiWithAPITest using AI Type Gemini AI and AI Model gemini-2.5-flash
# 
# Test generated for /employees_get for http method type GET in artillery framework
# RoostTestHash=ec231a756b
# 
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}
  payload:
    path: "employees_get_success.csv"
    fields:
      - searchString
    skipHeader: true
    delimiter: "^|^"

scenarios:
  - name: "Successful Employee Search Operations"
    flow:
      - log: "Starting scenario: Successful Employee Search Operations. This scenario validates successful GET requests to the /employees endpoint under various valid conditions, expecting 200 OK responses with correctly structured employee data."
      - log: "Request 1: Initiating GET /employees with a valid 'searchString' query parameter from a delimited data file. Expecting a 200 OK response with a list of employees matching the search criteria, each conforming to the defined schema."
      - get:
          url: "/employees?searchString={{ searchString }}"
          headers: {}
          expect:
            - statusCode: 200
            - contentType: "application/json"
            - hasHeader: "Content-Type"
            - jmespath: "type(@)", equals: "array"
            - jmespath: "[0].id", hasProperty: true
            - jmespath: "[0].jobTitle", hasProperty: true
            - jmespath: "[0].name", hasProperty: true
            - jmespath: "[0].email", hasProperty: true
            - jmespath: "[0].id", matchesRegexp: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
            - jmespath: "[0].email", matchesRegexp: "^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$"
      - think: 1
      - log: "Request 2: Initiating GET /employees without any 'searchString' query parameter. Expecting a 200 OK response with a potential full list of employees, each conforming to the defined schema."
      - get:
          url: "/employees"
          headers: {}
          expect:
            - statusCode: 200
            - contentType: "application/json"
            - hasHeader: "Content-Type"
            - jmespath: "type(@)", equals: "array"
            - jmespath: "[0].id", hasProperty: true
            - jmespath: "[0].jobTitle", hasProperty: true
            - jmespath: "[0].name", hasProperty: true
            - jmespath: "[0].email", hasProperty: true
            - jmespath: "[0].id", matchesRegexp: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
            - jmespath: "[0].email", matchesRegexp: "^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$"
      - think: 1
