# ********RoostGPT********

# Test generated by RoostGPT for test karate using AI Type deepseek_ai and AI Model deepseek-chat
# 
# Feature file generated for /employees_get for http method type GET 
# RoostTestHash=ec231a756b
# 
# 

# ********RoostGPT********
Feature: Employee API - Search Employees

  Background:
    * def baseURL = karate.properties['EMPLOYEE_SERVICE_BASE_URL'] || karate.properties['API_HOST']
    * url baseURL
    * configure headers = { 'Accept': 'application/json' }

  Scenario: Get all employees without search filter
    Given path '/employees'
    When method get
    Then status 200
    And match response == '#[]'
    And match each response[*] contains { id: '#string', jobTitle: '#string', name: '#string', email: '#string' }
    And match each response[*].id == '#regex ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
    And match each response[*].email == '#regex ^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$'

  Scenario Outline: Get employees with search filter
    Given path '/employees'
    And param searchString = '<searchString>'
    When method get
    Then status <statusCode>
    And match response == '#? _ == null || _ == "#array" || _ == "#object"'

    Examples:
      | searchString     | statusCode |
      | 'System Analyst' |        200 |
      | 'John'           |        200 |
      | 'invalid@email'  |        400 |
      | ''               |        200 |

  Scenario: Verify response schema for 200 status
    Given path '/employees'
    And param searchString = 'valid'
    When method get
    Then status 200
    And match response == '#[]'
    And match each response[*] == { id: '#string', jobTitle: '#string', name: '#string', email: '#string' }
    And match each response[*].id == '#regex ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
    And match each response[*].email == '#regex ^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$'

  Scenario: Verify error response for invalid input
    Given path '/employees'
    And param searchString = 'invalid@email'
    When method get
    Then status 400
    And match response == '#object'
    And match response contains { error: '#object' }
    And match response.error contains { code: '#number', message: '#string' }
