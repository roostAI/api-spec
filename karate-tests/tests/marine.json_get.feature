# ********RoostGPT********

# Test generated by RoostGPT for test weather_api_test using AI Type Open AI and AI Model gpt-4o
# 
# Feature file generated for /marine.json_get for http method type GET 
# RoostTestHash=543bfd123c
# 
# 

# ********RoostGPT********
Feature: Marine Weather API Tests

  Background:
    * def baseURL = karate.properties['WEATHER_API_BASE_URL'] || karate.properties['API_HOST']
    * url baseURL
    * def authToken = karate.properties['AUTH_TOKEN'] || karate.properties['key']
    * header Accept = 'application/json'

  Scenario Outline: Validate Marine Weather API with valid parameters
    Given path '/v1/marine.json'
    And param q = '<q>'
    And param days = <days>
    And param dt = '<dt>'
    And param unixdt = <unixdt>
    And param hour = <hour>
    And param lang = '<lang>'
    And param key = authToken
    When method GET
    Then status 200
    And match response.location.name == '#string'
    And match response.location.region == '#string'
    And match response.location.country == '#string'
    And match response.location.lat == '#number'
    And match response.location.lon == '#number'
    And match response.location.tz_id == '#string'
    And match response.location.localtime_epoch == '#number'
    And match response.location.localtime == '#string'
    And match response.forecast.forecastday == '#array'
    And match each response.forecast.forecastday[*].date == '#string'
    And match each response.forecast.forecastday[*].date_epoch == '#number'
    And match each response.forecast.forecastday[*].day.maxtemp_c == '#number'
    And match each response.forecast.forecastday[*].day.maxtemp_f == '#number'
    And match each response.forecast.forecastday[*].day.mintemp_c == '#number'
    And match each response.forecast.forecastday[*].day.mintemp_f == '#number'
    And match each response.forecast.forecastday[*].day.avgtemp_c == '#number'
    And match each response.forecast.forecastday[*].day.avgtemp_f == '#number'
    And match each response.forecast.forecastday[*].day.maxwind_mph == '#number'
    And match each response.forecast.forecastday[*].day.maxwind_kph == '#number'
    And match each response.forecast.forecastday[*].day.totalprecip_mm == '#number'
    And match each response.forecast.forecastday[*].day.totalprecip_in == '#number'
    And match each response.forecast.forecastday[*].day.avgvis_km == '#number'
    And match each response.forecast.forecastday[*].day.avgvis_miles == '#number'
    And match each response.forecast.forecastday[*].day.avghumidity == '#number'
    And match each response.forecast.forecastday[*].day.daily_will_it_rain == '#number'
    And match each response.forecast.forecastday[*].day.daily_chance_of_rain == '#number'
    And match each response.forecast.forecastday[*].day.daily_will_it_snow == '#number'
    And match each response.forecast.forecastday[*].day.daily_chance_of_snow == '#number'
    And match each response.forecast.forecastday[*].day.condition.text == '#string'
    And match each response.forecast.forecastday[*].day.condition.icon == '#string'
    And match each response.forecast.forecastday[*].day.condition.code == '#number'
    And match each response.forecast.forecastday[*].day.uv == '#number'
    And match each response.forecast.forecastday[*].astro.sunrise == '#string'
    And match each response.forecast.forecastday[*].astro.sunset == '#string'
    And match each response.forecast.forecastday[*].astro.moonrise == '#string'
    And match each response.forecast.forecastday[*].astro.moonset == '#string'
    And match each response.forecast.forecastday[*].astro.moon_phase == '#string'
    And match each response.forecast.forecastday[*].astro.moon_illumination == '#string'
    And match each response.forecast.forecastday[*].hour == '#array'
    And match each response.forecast.forecastday[*].hour[*].time_epoch == '#number'
    And match each response.forecast.forecastday[*].hour[*].time == '#string'
    And match each response.forecast.forecastday[*].hour[*].temp_c == '#number'
    And match each response.forecast.forecastday[*].hour[*].temp_f == '#number'
    And match each response.forecast.forecastday[*].hour[*].is_day == '#number'
    And match each response.forecast.forecastday[*].hour[*].condition.text == '#string'
    And match each response.forecast.forecastday[*].hour[*].condition.icon == '#string'
    And match each response.forecast.forecastday[*].hour[*].condition.code == '#number'
    And match each response.forecast.forecastday[*].hour[*].wind_mph == '#number'
    And match each response.forecast.forecastday[*].hour[*].wind_kph == '#number'
    And match each response.forecast.forecastday[*].hour[*].wind_degree == '#number'
    And match each response.forecast.forecastday[*].hour[*].wind_dir == '#string'
    And match each response.forecast.forecastday[*].hour[*].pressure_mb == '#number'
    And match each response.forecast.forecastday[*].hour[*].pressure_in == '#number'
    And match each response.forecast.forecastday[*].hour[*].precip_mm == '#number'
    And match each response.forecast.forecastday[*].hour[*].precip_in == '#number'
    And match each response.forecast.forecastday[*].hour[*].humidity == '#number'
    And match each response.forecast.forecastday[*].hour[*].cloud == '#number'
    And match each response.forecast.forecastday[*].hour[*].feelslike_c == '#number'
    And match each response.forecast.forecastday[*].hour[*].feelslike_f == '#number'
    And match each response.forecast.forecastday[*].hour[*].windchill_c == '#number'
    And match each response.forecast.forecastday[*].hour[*].windchill_f == '#number'
    And match each response.forecast.forecastday[*].hour[*].heatindex_c == '#number'
    And match each response.forecast.forecastday[*].hour[*].heatindex_f == '#number'
    And match each response.forecast.forecastday[*].hour[*].dewpoint_c == '#number'
    And match each response.forecast.forecastday[*].hour[*].dewpoint_f == '#number'
    And match each response.forecast.forecastday[*].hour[*].will_it_rain == '#number'
    And match each response.forecast.forecastday[*].hour[*].chance_of_rain == '#number'
    And match each response.forecast.forecastday[*].hour[*].will_it_snow == '#number'
    And match each response.forecast.forecastday[*].hour[*].chance_of_snow == '#number'
    And match each response.forecast.forecastday[*].hour[*].vis_km == '#number'
    And match each response.forecast.forecastday[*].hour[*].vis_miles == '#number'
    And match each response.forecast.forecastday[*].hour[*].gust_mph == '#number'
    And match each response.forecast.forecastday[*].hour[*].gust_kph == '#number'
    And match each response.forecast.forecastday[*].hour[*].sig_ht_mt == '#number'
    And match each response.forecast.forecastday[*].hour[*].swell_ht_mt == '#number'
    And match each response.forecast.forecastday[*].hour[*].swell_ht_ft == '#number'
    And match each response.forecast.forecastday[*].hour[*].swell_dir == '#number'
    And match each response.forecast.forecastday[*].hour[*].swell_dir_16_point == '#number'
    And match each response.forecast.forecastday[*].hour[*].swell_period_secs == '#number'
    And match each response.forecast.forecastday[*].hour[*].uv == '#number'

    Examples:
      | q          | days | dt         | unixdt | hour | lang |
      | '40.71,-74.01' | 3    | '2023-05-20' | null  | 6    | 'en' |
      | '34.05,-118.25' | 5    | null        | 1658522976 | 17   | 'es' |

  Scenario: Validate Marine Weather API with missing 'q' parameter
    Given path '/v1/marine.json'
    And param days = 3
    And param key = authToken
    When method GET
    Then status 400
    And match response.code == 1003
    And match response.message == '#string'

  Scenario: Validate Marine Weather API with invalid API key
    Given path '/v1/marine.json'
    And param q = '40.71,-74.01'
    And param days = 3
    And param key = 'invalid_key'
    When method GET
    Then status 401
    And match response.code == 1002
    And match response.message == '#string'

  Scenario: Validate Marine Weather API with exceeded API key quota
    Given path '/v1/marine.json'
    And param q = '40.71,-74.01'
    And param days = 3
    And param key = authToken
    When method GET
    Then status 403
    And match response.code == 2007
    And match response.message == '#string'
