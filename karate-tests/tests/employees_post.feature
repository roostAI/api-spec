# ********RoostGPT********

# Test generated by RoostGPT for test karate using AI Type deepseek_ai and AI Model deepseek-chat
# 
# Feature file generated for /employees_post for http method type POST 
# RoostTestHash=b517afeac4
# 
# 

# ********RoostGPT********
Feature: Employee API - Add Employee

  Background:
    * def baseURL = karate.properties['EMPLOYEE_SERVICE_BASE_URL'] || karate.properties['API_HOST']
    * url baseURL
    * configure headers = { 'Accept': 'application/json' }

  Scenario Outline: Add a new employee with valid request body
    Given request
      """
      {
        "name": '<name>',
        "email": '<email>',
        "jobTitle": '<jobTitle>'
      }
      """
    When method POST
    Then status 201
    And match response == {}
    And match responseHeaders['Location'] == '#regex .+/employees/.+'

    Examples:
      | read('employees_post.csv') |

  Scenario Outline: Attempt to add employee with missing required fields
    Given request
      """
      {
        "name": '<name>',
        "email": '<email>',
        "jobTitle": '<jobTitle>'
      }
      """
    When method POST
    Then status 400
    And match response.error.code == '#string'
    And match response.error.message == '#string'

    Examples:
      | name       | email                    | jobTitle            |
      | 'John Doe' | null                     | 'Software Engineer' |
      | null       | 'jane.smith@example.com' | 'Product Manager'   |
      | 'John Doe' | 'john.doe@example.com'   | null                |

  Scenario Outline: Attempt to add duplicate employee
    Given request
      """
      {
        "name": '<name>',
        "email": '<email>',
        "jobTitle": '<jobTitle>'
      }
      """
    When method POST
    Then status 409
    And match response.error.code == '#string'
    And match response.error.message == '#string'

    Examples:
      | name       | email                  | jobTitle            |
      | 'John Doe' | 'john.doe@example.com' | 'Software Engineer' |

  Scenario: Add employee with optional ID field
    Given request
      """
      {
        "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
        "name": "Test User",
        "email": "test.user@example.com",
        "jobTitle": "QA Engineer"
      }
      """
    When method POST
    Then status 201
    And match response == {}
    And match responseHeaders['Location'] == '#regex .+/employees/.+'

  Scenario: Attempt to add employee with invalid email format
    Given request
      """
      {
        "name": "Invalid User",
        "email": "not-an-email",
        "jobTitle": "Tester"
      }
      """
    When method POST
    Then status 400
    And match response.error.code == '#string'
    And match response.error.message == '#string'
