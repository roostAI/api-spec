{"postmanCollection":{"filePaths":["/var/tmp/Roost/RoostGPT/Oct-24-Gemini-org/a33b399f-344f-4ced-9886-bdaad729a02f/source/api-spec/postman_collections/modified_postman_061REB413-employee-service-0.1-resolved.json"]},"headBranch":"roost-a33b399f-344f-4ced-9886-bdaad729a02f","reportHeadBranch":"roost-report","aiUsage":{"promptTokens":2191,"completionTokens":908,"apiCallsToAI":3},"repoPath":"/var/tmp/Roost/RoostGPT/Oct-24-Gemini-org/a33b399f-344f-4ced-9886-bdaad729a02f/source/api-spec","errorMsg":"","gitPrUrl":"","status":"","statusDetails":"","coverageReportURL":{},"testReportURL":{},"testMetrics":{"filesScanned":1,"totalFiles":1,"totalTestFiles":3,"successfulTests":3,"testWithCompilationErrors":0,"skippedMethods":0,"toBeProcessed":0,"testswithRunTimeErrors":0,"existingTestPresent":0,"notSupported":0,"methodsScanned":3,"methodsSuccess":3},"advancedDetails":{"apis/061REB413-employee-service-0.1-resolved.json":{"employees?searchString={{searchString}}":{"GET":{"status":"successfully_generated","description":"Tests generated successfully","jsonFilePath":"postman_collections/Oct-24-Gemini-org/Searches_employees.json","feedback":[],"name":"Searches employees.","testscript":" \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Oct-24-Gemini-org using AI Type Gemini AI and AI Model gemini-2.0-flash-lite\n\n\nTest generated for employees?searchString={{searchString}} for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n      try {\n            responseData = pm.response.json();\n      } catch (error) {\n            console.log(\"Error parsing response:\", error.message);\n      }\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Search results matching the filter criteria\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test(\"Response has Content-Type header\", function () {\n            try {\n                pm.response.to.have.header(\"Content-Type\");\n            } catch (error) {\n                console.error('Error checking Content-Type header:', error.message);\n            }\n        });\n        pm.test(\"Content-Type is application/json\", function () {\n            try {\n                pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n            } catch (error) {\n                console.error('Error validating JSON Content-Type:', error.message);\n            }\n        });\n        pm.test(\"Response is an array\", function () {\n            try {\n                if (responseData !== null && responseData !== undefined) {\n                    pm.expect(Array.isArray(responseData)).to.be.true;\n                }\n            } catch (error) {\n                console.error('Error validating array response:', error.message);\n            }\n        });\n        pm.test(\"Each array item has correct structure\", function () {\n            try {\n                if (responseData && Array.isArray(responseData) && responseData.length > 0) {\n                    responseData.forEach((item, index) => {\n                        if (item !== null && item !== undefined) {\n        pm.test(`${iterator} element of array 'item.email' has 'email' as 'string'`, function(){ \n            try {\n                const value = ld.get(pm.response.json(), `item.email`, null);\n                if (value !== null && value !== undefined) {\n                    pm.expect(typeof value).to.equal(\"string\");\n                }\n            } catch (error) {\n                console.log(\"Error checking string type for item.email:\", error.message);\n            }\n        })\n\n  \n        pm.test(`item.email length to be atmost '1000'`,function(){\n            try {\n                const value = ld.get(responseData, `item.email`, null);\n                if (value !== null && value !== undefined && typeof value === 'string') {\n                    pm.expect(value.length).to.be.at.most(1000);\n                }\n            } catch (error) {\n                console.log(\"Error checking maxLength for item.email:\", error.message);\n            }\n        })\n  \n        pm.test(`item.email length to be alteast '0'`,function(){\n            try {\n                const value = ld.get(responseData, `item.email`, null);\n                if (value !== null && value !== undefined && typeof value === 'string') {\n                    pm.expect(value.length).to.be.at.least(0);\n                }\n            } catch (error) {\n                console.log(\"Error checking minLength for item.email:\", error.message);\n            }\n        })\n  \n        pm.test('item.email format to be email',function(){ \n            try {\n                const value = ld.get(responseData, `item.email`, null);\n                if (value !== null && value !== undefined && typeof value === 'string') {\n                    pm.expect(value).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n                }\n            } catch (error) {\n                console.log(\"Error checking email format for item.email:\", error.message);\n            }\n        })\n\n        pm.test(`${iterator} element of array 'item.jobTitle' has 'jobTitle' as 'string'`, function(){ \n            try {\n                const value = ld.get(pm.response.json(), `item.jobTitle`, null);\n                if (value !== null && value !== undefined) {\n                    pm.expect(typeof value).to.equal(\"string\");\n                }\n            } catch (error) {\n                console.log(\"Error checking string type for item.jobTitle:\", error.message);\n            }\n        })\n\n  \n        pm.test(`item.jobTitle length to be atmost '1000'`,function(){\n            try {\n                const value = ld.get(responseData, `item.jobTitle`, null);\n                if (value !== null && value !== undefined && typeof value === 'string') {\n                    pm.expect(value.length).to.be.at.most(1000);\n                }\n            } catch (error) {\n                console.log(\"Error checking maxLength for item.jobTitle:\", error.message);\n            }\n        })\n  \n        pm.test(`item.jobTitle length to be alteast '0'`,function(){\n            try {\n                const value = ld.get(responseData, `item.jobTitle`, null);\n                if (value !== null && value !== undefined && typeof value === 'string') {\n                    pm.expect(value.length).to.be.at.least(0);\n                }\n            } catch (error) {\n                console.log(\"Error checking minLength for item.jobTitle:\", error.message);\n            }\n        })\n\n        pm.test(`${iterator} element of array 'item.name' has 'name' as 'string'`, function(){ \n            try {\n                const value = ld.get(pm.response.json(), `item.name`, null);\n                if (value !== null && value !== undefined) {\n                    pm.expect(typeof value).to.equal(\"string\");\n                }\n            } catch (error) {\n                console.log(\"Error checking string type for item.name:\", error.message);\n            }\n        })\n\n  \n        pm.test(`item.name length to be atmost '1000'`,function(){\n            try {\n                const value = ld.get(responseData, `item.name`, null);\n                if (value !== null && value !== undefined && typeof value === 'string') {\n                    pm.expect(value.length).to.be.at.most(1000);\n                }\n            } catch (error) {\n                console.log(\"Error checking maxLength for item.name:\", error.message);\n            }\n        })\n  \n        pm.test(`item.name length to be alteast '0'`,function(){\n            try {\n                const value = ld.get(responseData, `item.name`, null);\n                if (value !== null && value !== undefined && typeof value === 'string') {\n                    pm.expect(value.length).to.be.at.least(0);\n                }\n            } catch (error) {\n                console.log(\"Error checking minLength for item.name:\", error.message);\n            }\n        })\n\n        pm.test(`${iterator} element of array 'item.id' has 'id' as 'string'`, function(){ \n            try {\n                const value = ld.get(pm.response.json(), `item.id`, null);\n                if (value !== null && value !== undefined) {\n                    pm.expect(typeof value).to.equal(\"string\");\n                }\n            } catch (error) {\n                console.log(\"Error checking string type for item.id:\", error.message);\n            }\n        })\n\n  \n        pm.test(`item.id length to be atmost '1000'`,function(){\n            try {\n                const value = ld.get(responseData, `item.id`, null);\n                if (value !== null && value !== undefined && typeof value === 'string') {\n                    pm.expect(value.length).to.be.at.most(1000);\n                }\n            } catch (error) {\n                console.log(\"Error checking maxLength for item.id:\", error.message);\n            }\n        })\n  \n        pm.test(`item.id length to be alteast '0'`,function(){\n            try {\n                const value = ld.get(responseData, `item.id`, null);\n                if (value !== null && value !== undefined && typeof value === 'string') {\n                    pm.expect(value.length).to.be.at.least(0);\n                }\n            } catch (error) {\n                console.log(\"Error checking minLength for item.id:\", error.message);\n            }\n        })\n\n        pm.test('item.id format to be uuid',function(){  \n            try {\n                const value = ld.get(responseData, `item.id`, null);\n                if (value !== null && value !== undefined && typeof value === 'string') {\n                    pm.expect(value).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n                }\n            } catch (error) {\n                console.log(\"Error checking UUID format for item.id:\", error.message);\n            }\n        })\n\n                        }\n                    });\n                }\n            } catch (error) {\n                console.error('Error validating array item structure:', error.message);\n            }\n        });\n        pm.test(\"Array has minimum required items\", function () {\n            try {\n                if (responseData && Array.isArray(responseData)) {\n                    pm.expect(responseData.length).to.be.at.least(0);\n                }\n            } catch (error) {\n                console.error('Error checking minimum array items:', error.message);\n            }\n        });\n        pm.test(\"Array does not exceed maximum items\", function () {\n            try {\n                if (responseData && Array.isArray(responseData)) {\n                    pm.expect(responseData.length).to.be.at.most(100);\n                }\n            } catch (error) {\n                console.error('Error checking maximum array items:', error.message);\n            }\n        });\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad input\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n","bodyHash":"employees?searchString={{searchString}}_GET_b239e975f2","jsonData":"[\n  {\n    \"searchString\": \"Software Engineer\",\n    \"statusCode\": 200,\n    \"scenario\": \"Search results matching the filter criteria\"\n  },\n  {\n    \"searchString\": \"Data Scientist\",\n    \"statusCode\": 200,\n    \"scenario\": \"Search results matching the filter criteria\"\n  },\n  {\n    \"searchString\": \"Project Manager\",\n    \"statusCode\": 200,\n    \"scenario\": \"Search results matching the filter criteria\"\n  },\n  {\n    \"searchString\": \"\",\n    \"statusCode\": 400,\n    \"scenario\": \"Bad input\"\n  },\n  {\n    \"searchString\": 123,\n    \"statusCode\": 400,\n    \"scenario\": \"Bad input\"\n  }\n]"}},"employees":{"POST":{"status":"successfully_generated","description":"Tests generated successfully","jsonFilePath":"postman_collections/Oct-24-Gemini-org/adds_an_employee.json","feedback":[],"name":"adds an employee","testscript":" \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Oct-24-Gemini-org using AI Type Gemini AI and AI Model gemini-2.0-flash-lite\n\n\nTest generated for employees for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n      try {\n            responseData = pm.response.json();\n      } catch (error) {\n            console.log(\"Error parsing response:\", error.message);\n      }\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 201){\n    pm.test(\"employee created\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"invalid input, object invalid\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    });\n\n}\n\nif (pm.response.code == 409){\n    pm.test(\"an existing employee already exists\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Conflict\");\n    });\n\n}\n","bodyHash":"employees_POST_3dd2c4aea0","jsonData":"[\n  {\n    \"email_string\": \"john.smith@acme-corp.com\",\n    \"jobTitle_string\": \"System Analyst\",\n    \"name_string\": \"John Smith\",\n    \"id_uuid\": \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"statusCode\": 201,\n    \"scenario\": \"employee created\"\n  },\n  {\n    \"email_string\": \"invalid-email\",\n    \"jobTitle_string\": \" \",\n    \"name_string\": \"\",\n    \"id_uuid\": \"invalid-uuid\",\n    \"statusCode\": 400,\n    \"scenario\": \"invalid input, object invalid\"\n  },\n  {\n    \"email_string\": \"john.smith@acme-corp.com\",\n    \"jobTitle_string\": \"System Analyst\",\n    \"name_string\": \"John Smith\",\n    \"id_uuid\": \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"statusCode\": 409,\n    \"scenario\": \"an existing employee already exists\"\n  },\n  {\n    \"email_string\": \"jane.doe@example.com\",\n    \"jobTitle_string\": \"Software Engineer\",\n    \"name_string\": \"Jane Doe\",\n    \"id_uuid\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n    \"statusCode\": 201,\n    \"scenario\": \"employee created\"\n  },\n  {\n    \"email_string\": \"test@test\",\n    \"jobTitle_string\": \"\",\n    \"name_string\": \" \",\n    \"id_uuid\": \"not-a-uuid\",\n    \"statusCode\": 400,\n    \"scenario\": \"invalid input, object invalid\"\n  }\n]"}},"employees/{id}":{"GET":{"status":"successfully_generated","description":"Tests generated successfully","jsonFilePath":"postman_collections/Oct-24-Gemini-org/Gets_an_employee_by_ID.json","feedback":[],"name":"Gets an employee by ID.","testscript":" \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test Oct-24-Gemini-org using AI Type Gemini AI and AI Model gemini-2.0-flash-lite\n\n\nTest generated for employees/{id} for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n      try {\n            responseData = pm.response.json();\n      } catch (error) {\n            console.log(\"Error parsing response:\", error.message);\n      }\n}\nif (pm.variables.get(\"statusCode\")) {\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\nif (pm.response.code == 200){\n    pm.test(\"Successful operation\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        try {\n            if (responseData !== null && responseData !== undefined) {\n        pm.test('Response has the `id` field',function(){\n            try {\n                const jsonResponse = pm.response.json();\n                if (jsonResponse && pm.expect(jsonResponse).to.have.nested.property(`id`)) {\n                    const value = ld.get(jsonResponse, `id`, null);\n                    if (value !== null && value !== undefined) {\n                        pm.expect(typeof value).to.equal(\"string\");\n                    }\n                }\n            } catch (error) {\n                console.log(\"Error checking string field id:\", error.message);\n            }\n        })\n\n        pm.test('id format to be uuid',function(){  \n            try {\n                const value = ld.get(responseData, `id`, null);\n                if (value !== null && value !== undefined && typeof value === 'string') {\n                    pm.expect(value).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n                }\n            } catch (error) {\n                console.log(\"Error checking UUID format for id:\", error.message);\n            }\n        })\n\n        pm.test('Response has the `jobTitle` field',function(){\n            try {\n                const jsonResponse = pm.response.json();\n                if (jsonResponse && pm.expect(jsonResponse).to.have.nested.property(`jobTitle`)) {\n                    const value = ld.get(jsonResponse, `jobTitle`, null);\n                    if (value !== null && value !== undefined) {\n                        pm.expect(typeof value).to.equal(\"string\");\n                    }\n                }\n            } catch (error) {\n                console.log(\"Error checking string field jobTitle:\", error.message);\n            }\n        })\n\n        pm.test('Response has the `name` field',function(){\n            try {\n                const jsonResponse = pm.response.json();\n                if (jsonResponse && pm.expect(jsonResponse).to.have.nested.property(`name`)) {\n                    const value = ld.get(jsonResponse, `name`, null);\n                    if (value !== null && value !== undefined) {\n                        pm.expect(typeof value).to.equal(\"string\");\n                    }\n                }\n            } catch (error) {\n                console.log(\"Error checking string field name:\", error.message);\n            }\n        })\n\n        pm.test('Response has the `email` field',function(){\n            try {\n                const jsonResponse = pm.response.json();\n                if (jsonResponse && pm.expect(jsonResponse).to.have.nested.property(`email`)) {\n                    const value = ld.get(jsonResponse, `email`, null);\n                    if (value !== null && value !== undefined) {\n                        pm.expect(typeof value).to.equal(\"string\");\n                    }\n                }\n            } catch (error) {\n                console.log(\"Error checking string field email:\", error.message);\n            }\n        })\n\n            }\n        } catch (error) {\n            console.error('Error during response validation:', error.message);\n        }\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    });\n\n}\n","bodyHash":"employees/{id}_GET_0c0d164b17","jsonData":"[\n  {\n    \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n    \"statusCode\": 200,\n    \"scenario\": \"Successful operation\"\n  },\n  {\n    \"id\": \"f1e2d3c4-b5a6-0987-6543-210fedcba987\",\n    \"statusCode\": 200,\n    \"scenario\": \"Successful operation\"\n  },\n  {\n    \"id\": \"invalid-uuid\",\n    \"statusCode\": 404,\n    \"scenario\": \"Not found\"\n  },\n  {\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"statusCode\": 404,\n    \"scenario\": \"Not found\"\n  }\n]"}},"testFilePath":"/var/tmp/Roost/RoostGPT/Oct-24-Gemini-org/a33b399f-344f-4ced-9886-bdaad729a02f/source/api-spec/postman_collections/modified_postman_061REB413-employee-service-0.1-resolved.json"}}}