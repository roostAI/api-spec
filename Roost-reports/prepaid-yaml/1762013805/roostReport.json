{"postmanCollection":{"filePaths":["/var/tmp/Roost/RoostGPT/prepaid-yaml/1762013805/source/api-spec/postman_collections/modified_postman_prepaid-card-swagger.json"]},"headBranch":"roost-1762013805","reportHeadBranch":"roost-report","aiUsage":{"promptTokens":827,"completionTokens":418,"apiCallsToAI":1},"repoPath":"/var/tmp/Roost/RoostGPT/prepaid-yaml/1762013805/source/api-spec","errorMsg":"","gitPrUrl":"","status":"","statusDetails":"","coverageReportURL":{},"testReportURL":{},"testMetrics":{"filesScanned":1,"totalFiles":1,"totalTestFiles":1,"successfulTests":1,"testWithCompilationErrors":0,"skippedMethods":7,"toBeProcessed":7,"testswithRunTimeErrors":0,"existingTestPresent":0,"notSupported":0,"methodsScanned":8,"methodsSuccess":1},"advancedDetails":{"/Users/iamdm/Desktop/prepaid-card-swagger.yaml":{"users/register":{"POST":{"status":"to_be_processed","description":"method not processed yet","jsonFilePath":"","feedback":[],"name":"Register a new user"}},"users/login":{"POST":{"status":"to_be_processed","description":"method not processed yet","jsonFilePath":"","feedback":[],"name":"User login"}},"users/me":{"GET":{"status":"to_be_processed","description":"method not processed yet","jsonFilePath":"","feedback":[],"name":"Get current user's profile"}},"kyc/upload":{"POST":{"status":"to_be_processed","description":"method not processed yet","jsonFilePath":"","feedback":[],"name":"Submit KYC documents"}},"cards":{"GET":{"status":"to_be_processed","description":"method not processed yet","jsonFilePath":"","feedback":[],"name":"List user's cards"},"POST":{"status":"to_be_processed","description":"method not processed yet","jsonFilePath":"","feedback":[],"name":"Issue a new card"}},"cards/{cardId}/load":{"POST":{"status":"successfully_generated","description":"Tests generated successfully","jsonFilePath":"postman_collections/prepaid-yaml/Load_funds_onto_a_card.json","feedback":[],"name":"Load funds onto a card","testscript":" \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test prepaid-yaml using AI Type AWS Bedrock Runtime AI and AI Model eu.anthropic.claude-3-7-sonnet-20250219-v1:0\n\n\nTest generated for cards/{cardId}/load for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n         console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n      try {\n            responseData = pm.response.json();\n      } catch (error) {\n            console.log(\"Error parsing response:\", error.message);\n      }\n}\n// Status code check with early exit\nconst expectedStatusCode = parseInt(pm.variables.get(\"statusCode\"));\nlet statusMatches = true;\nif (pm.variables.get(\"statusCode\")) {\n  statusMatches = (pm.response.code === expectedStatusCode);\n  pm.test(\"Status code matches expected value\", function () {\n      pm.expect(pm.response.code).to.equal(expectedStatusCode);\n  });\n}\n\nif (pm.response.code == 200 && statusMatches){\n    pm.test(\"Load successful, returns new balance\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        try {\n            if (responseData !== null && responseData !== undefined) {\n        pm.test('Response has the `balance` field',function(){\n            try {\n                if (responseData && pm.expect(responseData).to.have.nested.property(`balance`)) {\n                    const value = ld.get(responseData, `balance`, null);\n                    if (value !== null && value !== undefined) {\n                        pm.expect(typeof value).to.equal(\"number\");\n                    }\n                }\n            } catch (error) {\n                console.log(\"Error checking number field balance:\", error.message);\n            }\n        })\n\n        pm.test('Response has the `currency` field',function(){\n            try {\n                const jsonResponse = pm.response.json();\n                if (jsonResponse && pm.expect(jsonResponse).to.have.nested.property(`currency`)) {\n                    const value = ld.get(jsonResponse, `currency`, null);\n                    if (value !== null && value !== undefined) {\n                        pm.expect(typeof value).to.equal(\"string\");\n                    }\n                }\n            } catch (error) {\n                console.log(\"Error checking string field currency:\", error.message);\n            }\n        })\n\n            }\n        } catch (error) {\n            console.error('Error during response validation:', error.message);\n        }\n    });\n\n}\n\nif (pm.response.code == 400 && statusMatches){\n    pm.test(\"Bad Request\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        try {\n            if (responseData !== null && responseData !== undefined) {\n        pm.test('Response has the `code` field',function(){\n            try {\n                const jsonResponse = pm.response.json();\n                if (jsonResponse && pm.expect(jsonResponse).to.have.nested.property(`code`)) {\n                    const value = ld.get(jsonResponse, `code`, null);\n                    if (value !== null && value !== undefined) {\n                        pm.expect(typeof value).to.equal(\"string\");\n                    }\n                }\n            } catch (error) {\n                console.log(\"Error checking string field code:\", error.message);\n            }\n        })\n\n        pm.test('Response has the `message` field',function(){\n            try {\n                const jsonResponse = pm.response.json();\n                if (jsonResponse && pm.expect(jsonResponse).to.have.nested.property(`message`)) {\n                    const value = ld.get(jsonResponse, `message`, null);\n                    if (value !== null && value !== undefined) {\n                        pm.expect(typeof value).to.equal(\"string\");\n                    }\n                }\n            } catch (error) {\n                console.log(\"Error checking string field message:\", error.message);\n            }\n        })\n\n            }\n        } catch (error) {\n            console.error('Error during response validation:', error.message);\n        }\n    });\n\n}\n\nif (pm.response.code == 402 && statusMatches){\n    pm.test(\"Payment source declined\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Payment Required\");\n    });\n\n}\n","bodyHash":"cards/{cardId}/load_POST_c0b71a1063","jsonData":"[\n  {\n    \"cardId\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"amount_*double\": 50,\n    \"sourceId_*string\": \"pm_123abc456def\",\n    \"statusCode\": 200,\n    \"scenario\": \"Load successful, returns new balance\"\n  },\n  {\n    \"cardId\": \"63a9f0ea-7bb3-11ea-bc55-0242ac130003\",\n    \"amount_*double\": 100.5,\n    \"sourceId_*string\": \"pm_456def789ghi\",\n    \"statusCode\": 200,\n    \"scenario\": \"Load successful, returns new balance\"\n  },\n  {\n    \"cardId\": \"invalid-card-id\",\n    \"amount_*double\": -25.5,\n    \"sourceId_*string\": \"pm_invalid\",\n    \"statusCode\": 400,\n    \"scenario\": \"Bad Request\"\n  },\n  {\n    \"cardId\": \"72fdf5d8-87fa-4eab-8655-6835a383dcc0\",\n    \"amount_*double\": 0,\n    \"sourceId_*string\": \"pm_declined_source\",\n    \"statusCode\": 402,\n    \"scenario\": \"Payment source declined\"\n  },\n  {\n    \"cardId\": \"99b44442-aed9-11ed-afa1-0242ac120002\",\n    \"amount_*double\": 9999999.99,\n    \"sourceId_*string\": \"pm_expired_123456\",\n    \"statusCode\": 400,\n    \"scenario\": \"Bad Request\"\n  }\n]"}},"cards/{cardId}/transactions?limit={{limit}}&page={{page}}":{"GET":{"status":"to_be_processed","description":"method not processed yet","jsonFilePath":"","feedback":[],"name":"Get card transaction history"}},"testFilePath":"/var/tmp/Roost/RoostGPT/prepaid-yaml/1762013805/source/api-spec/postman_collections/modified_postman_prepaid-card-swagger.json"}}}